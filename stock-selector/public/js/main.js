if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3211";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6241__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__6240 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__6240) : cljs.core.into_array.call(null, G__6240);
      }());
    };
    var G__6241 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__6242__i = 0, G__6242__a = new Array(arguments.length - 0);
        while (G__6242__i < G__6242__a.length) {
          G__6242__a[G__6242__i] = arguments[G__6242__i + 0];
          ++G__6242__i;
        }
        args = new cljs.core.IndexedSeq(G__6242__a, 0);
      }
      return G__6241__delegate.call(this, args);
    };
    G__6241.cljs$lang$maxFixedArity = 0;
    G__6241.cljs$lang$applyTo = function(arglist__6243) {
      var args = cljs.core.seq(arglist__6243);
      return G__6241__delegate(args);
    };
    G__6241.cljs$core$IFn$_invoke$arity$variadic = G__6241__delegate;
    return G__6241;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__6245 = x;
  return goog.isString(G__6245);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__6247 = x__$1;
    return goog.typeOf(G__6247);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4203__auto__ = ty;
    if (cljs.core.truth_(and__4203__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4203__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__6249 = obj;
    return goog.typeOf(G__6249);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4420__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4420__auto__)) {
    var s = temp__4420__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__6251 = Symbol;
  return goog.typeOf(G__6251);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function cljs$core$make_array() {
  var G__6253 = arguments.length;
  switch(G__6253) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5100__auto___6255 = len;
  var i_6256 = 0;
  while (true) {
    if (i_6256 < n__5100__auto___6255) {
      new_arr[i_6256] = arr[i_6256];
      var G__6257 = i_6256 + 1;
      i_6256 = G__6257;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__6258 = i + 1;
      i = G__6258;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var G__6263 = arguments.length;
  switch(G__6263) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__6264 = cljs.core.aget;
  var G__6265 = array[i];
  var G__6266 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__6264, G__6265, G__6266) : cljs.core.apply.call(null, G__6264, G__6265, G__6266);
};
cljs.core.aget.cljs$lang$applyTo = function(seq6259) {
  var G__6260 = cljs.core.first(seq6259);
  var seq6259__$1 = cljs.core.next(seq6259);
  var G__6261 = cljs.core.first(seq6259__$1);
  var seq6259__$2 = cljs.core.next(seq6259__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__6260, G__6261, seq6259__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var G__6273 = arguments.length;
  switch(G__6273) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__6274 = cljs.core.aset;
  var G__6275 = array[idx];
  var G__6276 = idx2;
  var G__6277 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__6274, G__6275, G__6276, G__6277) : cljs.core.apply.call(null, G__6274, G__6275, G__6276, G__6277);
};
cljs.core.aset.cljs$lang$applyTo = function(seq6268) {
  var G__6269 = cljs.core.first(seq6268);
  var seq6268__$1 = cljs.core.next(seq6268);
  var G__6270 = cljs.core.first(seq6268__$1);
  var seq6268__$2 = cljs.core.next(seq6268__$1);
  var G__6271 = cljs.core.first(seq6268__$2);
  var seq6268__$3 = cljs.core.next(seq6268__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__6269, G__6270, G__6271, seq6268__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var G__6280 = arguments.length;
  switch(G__6280) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__6281 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__6282 = [];
  var G__6283 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6281, G__6282, G__6283) : cljs.core.reduce.call(null, G__6281, G__6282, G__6283);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var argseq__5255__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5255__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq6285) {
  var G__6286 = cljs.core.first(seq6285);
  var seq6285__$1 = cljs.core.next(seq6285);
  var G__6287 = cljs.core.first(seq6285__$1);
  var seq6285__$2 = cljs.core.next(seq6285__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__6286, G__6287, seq6285__$2);
};
cljs.core.Fn = function() {
  var obj6289 = {};
  return obj6289;
}();
cljs.core.IFn = function() {
  var obj6291 = {};
  return obj6291;
}();
cljs.core._invoke = function cljs$core$_invoke() {
  var G__6293 = arguments.length;
  switch(G__6293) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6295 = x__4851__auto__;
        return goog.typeOf(G__6295);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6297 = x__4851__auto__;
        return goog.typeOf(G__6297);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6299 = x__4851__auto__;
        return goog.typeOf(G__6299);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$4;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6301 = x__4851__auto__;
        return goog.typeOf(G__6301);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$5;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6303 = x__4851__auto__;
        return goog.typeOf(G__6303);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$6;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6305 = x__4851__auto__;
        return goog.typeOf(G__6305);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$7;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6307 = x__4851__auto__;
        return goog.typeOf(G__6307);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$8;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6309 = x__4851__auto__;
        return goog.typeOf(G__6309);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$9;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6311 = x__4851__auto__;
        return goog.typeOf(G__6311);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$10;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6313 = x__4851__auto__;
        return goog.typeOf(G__6313);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$11;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6315 = x__4851__auto__;
        return goog.typeOf(G__6315);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$12;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6317 = x__4851__auto__;
        return goog.typeOf(G__6317);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$13;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6319 = x__4851__auto__;
        return goog.typeOf(G__6319);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$14;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6321 = x__4851__auto__;
        return goog.typeOf(G__6321);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$15;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6323 = x__4851__auto__;
        return goog.typeOf(G__6323);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$16;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6325 = x__4851__auto__;
        return goog.typeOf(G__6325);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$17;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6327 = x__4851__auto__;
        return goog.typeOf(G__6327);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$18;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6329 = x__4851__auto__;
        return goog.typeOf(G__6329);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$19;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6331 = x__4851__auto__;
        return goog.typeOf(G__6331);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$20;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6333 = x__4851__auto__;
        return goog.typeOf(G__6333);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$21;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6335 = x__4851__auto__;
        return goog.typeOf(G__6335);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$22;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._invoke[function() {
        var G__6337 = x__4851__auto__;
        return goog.typeOf(G__6337);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._invoke["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
  var obj6340 = {};
  return obj6340;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4203__auto__ = value;
    if (and__4203__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4851__auto__ = value == null ? null : value;
    return function() {
      var or__4215__auto__ = cljs.core._clone[function() {
        var G__6344 = x__4851__auto__;
        return goog.typeOf(G__6344);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._clone["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj6346 = {};
  return obj6346;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._count[function() {
        var G__6350 = x__4851__auto__;
        return goog.typeOf(G__6350);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._count["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj6352 = {};
  return obj6352;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._empty[function() {
        var G__6356 = x__4851__auto__;
        return goog.typeOf(G__6356);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._empty["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj6358 = {};
  return obj6358;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._conj[function() {
        var G__6362 = x__4851__auto__;
        return goog.typeOf(G__6362);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._conj["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj6364 = {};
  return obj6364;
}();
cljs.core._nth = function cljs$core$_nth() {
  var G__6366 = arguments.length;
  switch(G__6366) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._nth[function() {
        var G__6368 = x__4851__auto__;
        return goog.typeOf(G__6368);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._nth["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._nth[function() {
        var G__6370 = x__4851__auto__;
        return goog.typeOf(G__6370);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._nth["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
  var obj6373 = {};
  return obj6373;
}();
cljs.core.ISeq = function() {
  var obj6375 = {};
  return obj6375;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._first[function() {
        var G__6379 = x__4851__auto__;
        return goog.typeOf(G__6379);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._first["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._rest[function() {
        var G__6383 = x__4851__auto__;
        return goog.typeOf(G__6383);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._rest["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj6385 = {};
  return obj6385;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._next[function() {
        var G__6389 = x__4851__auto__;
        return goog.typeOf(G__6389);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._next["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj6391 = {};
  return obj6391;
}();
cljs.core._lookup = function cljs$core$_lookup() {
  var G__6393 = arguments.length;
  switch(G__6393) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._lookup[function() {
        var G__6395 = x__4851__auto__;
        return goog.typeOf(G__6395);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._lookup["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._lookup[function() {
        var G__6397 = x__4851__auto__;
        return goog.typeOf(G__6397);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._lookup["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
  var obj6400 = {};
  return obj6400;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__6404 = x__4851__auto__;
        return goog.typeOf(G__6404);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._assoc[function() {
        var G__6408 = x__4851__auto__;
        return goog.typeOf(G__6408);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._assoc["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj6410 = {};
  return obj6410;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._dissoc[function() {
        var G__6414 = x__4851__auto__;
        return goog.typeOf(G__6414);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._dissoc["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj6416 = {};
  return obj6416;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._key[function() {
        var G__6420 = x__4851__auto__;
        return goog.typeOf(G__6420);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._key["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._val[function() {
        var G__6424 = x__4851__auto__;
        return goog.typeOf(G__6424);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._val["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj6426 = {};
  return obj6426;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._disjoin[function() {
        var G__6430 = x__4851__auto__;
        return goog.typeOf(G__6430);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._disjoin["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj6432 = {};
  return obj6432;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._peek[function() {
        var G__6436 = x__4851__auto__;
        return goog.typeOf(G__6436);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._peek["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._pop[function() {
        var G__6440 = x__4851__auto__;
        return goog.typeOf(G__6440);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._pop["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj6442 = {};
  return obj6442;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._assoc_n[function() {
        var G__6446 = x__4851__auto__;
        return goog.typeOf(G__6446);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj6448 = {};
  return obj6448;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._deref[function() {
        var G__6452 = x__4851__auto__;
        return goog.typeOf(G__6452);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._deref["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj6454 = {};
  return obj6454;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._deref_with_timeout[function() {
        var G__6458 = x__4851__auto__;
        return goog.typeOf(G__6458);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj6460 = {};
  return obj6460;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._meta[function() {
        var G__6464 = x__4851__auto__;
        return goog.typeOf(G__6464);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._meta["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj6466 = {};
  return obj6466;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._with_meta[function() {
        var G__6470 = x__4851__auto__;
        return goog.typeOf(G__6470);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._with_meta["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj6472 = {};
  return obj6472;
}();
cljs.core._reduce = function cljs$core$_reduce() {
  var G__6474 = arguments.length;
  switch(G__6474) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._reduce[function() {
        var G__6476 = x__4851__auto__;
        return goog.typeOf(G__6476);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._reduce["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._reduce[function() {
        var G__6478 = x__4851__auto__;
        return goog.typeOf(G__6478);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._reduce["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
  var obj6481 = {};
  return obj6481;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._kv_reduce[function() {
        var G__6485 = x__4851__auto__;
        return goog.typeOf(G__6485);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj6487 = {};
  return obj6487;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._equiv[function() {
        var G__6491 = x__4851__auto__;
        return goog.typeOf(G__6491);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._equiv["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj6493 = {};
  return obj6493;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._hash[function() {
        var G__6497 = x__4851__auto__;
        return goog.typeOf(G__6497);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._hash["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj6499 = {};
  return obj6499;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._seq[function() {
        var G__6503 = x__4851__auto__;
        return goog.typeOf(G__6503);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._seq["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj6505 = {};
  return obj6505;
}();
cljs.core.IList = function() {
  var obj6507 = {};
  return obj6507;
}();
cljs.core.IRecord = function() {
  var obj6509 = {};
  return obj6509;
}();
cljs.core.IReversible = function() {
  var obj6511 = {};
  return obj6511;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._rseq[function() {
        var G__6515 = x__4851__auto__;
        return goog.typeOf(G__6515);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._rseq["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj6517 = {};
  return obj6517;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._sorted_seq[function() {
        var G__6521 = x__4851__auto__;
        return goog.typeOf(G__6521);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._sorted_seq_from[function() {
        var G__6525 = x__4851__auto__;
        return goog.typeOf(G__6525);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._entry_key[function() {
        var G__6529 = x__4851__auto__;
        return goog.typeOf(G__6529);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._entry_key["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._comparator[function() {
        var G__6533 = x__4851__auto__;
        return goog.typeOf(G__6533);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._comparator["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj6535 = {};
  return obj6535;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4203__auto__ = writer;
    if (and__4203__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4851__auto__ = writer == null ? null : writer;
    return function() {
      var or__4215__auto__ = cljs.core._write[function() {
        var G__6539 = x__4851__auto__;
        return goog.typeOf(G__6539);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._write["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4203__auto__ = writer;
    if (and__4203__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4851__auto__ = writer == null ? null : writer;
    return function() {
      var or__4215__auto__ = cljs.core._flush[function() {
        var G__6543 = x__4851__auto__;
        return goog.typeOf(G__6543);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._flush["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj6545 = {};
  return obj6545;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._pr_writer[function() {
        var G__6549 = x__4851__auto__;
        return goog.typeOf(G__6549);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj6551 = {};
  return obj6551;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4203__auto__ = d;
    if (and__4203__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4851__auto__ = d == null ? null : d;
    return function() {
      var or__4215__auto__ = cljs.core._realized_QMARK_[function() {
        var G__6555 = x__4851__auto__;
        return goog.typeOf(G__6555);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj6557 = {};
  return obj6557;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._notify_watches[function() {
        var G__6561 = x__4851__auto__;
        return goog.typeOf(G__6561);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._add_watch[function() {
        var G__6565 = x__4851__auto__;
        return goog.typeOf(G__6565);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._add_watch["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core._remove_watch[function() {
        var G__6569 = x__4851__auto__;
        return goog.typeOf(G__6569);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj6571 = {};
  return obj6571;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._as_transient[function() {
        var G__6575 = x__4851__auto__;
        return goog.typeOf(G__6575);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._as_transient["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj6577 = {};
  return obj6577;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4203__auto__ = tcoll;
    if (and__4203__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4851__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4215__auto__ = cljs.core._conj_BANG_[function() {
        var G__6581 = x__4851__auto__;
        return goog.typeOf(G__6581);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4203__auto__ = tcoll;
    if (and__4203__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4851__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4215__auto__ = cljs.core._persistent_BANG_[function() {
        var G__6585 = x__4851__auto__;
        return goog.typeOf(G__6585);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj6587 = {};
  return obj6587;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4203__auto__ = tcoll;
    if (and__4203__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4851__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4215__auto__ = cljs.core._assoc_BANG_[function() {
        var G__6591 = x__4851__auto__;
        return goog.typeOf(G__6591);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj6593 = {};
  return obj6593;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4203__auto__ = tcoll;
    if (and__4203__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4851__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4215__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__6597 = x__4851__auto__;
        return goog.typeOf(G__6597);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj6599 = {};
  return obj6599;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4203__auto__ = tcoll;
    if (and__4203__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4851__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4215__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__6603 = x__4851__auto__;
        return goog.typeOf(G__6603);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4203__auto__ = tcoll;
    if (and__4203__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4851__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4215__auto__ = cljs.core._pop_BANG_[function() {
        var G__6607 = x__4851__auto__;
        return goog.typeOf(G__6607);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj6609 = {};
  return obj6609;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4203__auto__ = tcoll;
    if (and__4203__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4851__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4215__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__6613 = x__4851__auto__;
        return goog.typeOf(G__6613);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj6615 = {};
  return obj6615;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4203__auto__ = x;
    if (and__4203__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4851__auto__ = x == null ? null : x;
    return function() {
      var or__4215__auto__ = cljs.core._compare[function() {
        var G__6619 = x__4851__auto__;
        return goog.typeOf(G__6619);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._compare["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj6621 = {};
  return obj6621;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._drop_first[function() {
        var G__6625 = x__4851__auto__;
        return goog.typeOf(G__6625);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._drop_first["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj6627 = {};
  return obj6627;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._chunked_first[function() {
        var G__6631 = x__4851__auto__;
        return goog.typeOf(G__6631);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._chunked_rest[function() {
        var G__6635 = x__4851__auto__;
        return goog.typeOf(G__6635);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj6637 = {};
  return obj6637;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._chunked_next[function() {
        var G__6641 = x__4851__auto__;
        return goog.typeOf(G__6641);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj6643 = {};
  return obj6643;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4203__auto__ = x;
    if (and__4203__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4851__auto__ = x == null ? null : x;
    return function() {
      var or__4215__auto__ = cljs.core._name[function() {
        var G__6647 = x__4851__auto__;
        return goog.typeOf(G__6647);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._name["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4203__auto__ = x;
    if (and__4203__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4851__auto__ = x == null ? null : x;
    return function() {
      var or__4215__auto__ = cljs.core._namespace[function() {
        var G__6651 = x__4851__auto__;
        return goog.typeOf(G__6651);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._namespace["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj6653 = {};
  return obj6653;
}();
cljs.core.IReset = function() {
  var obj6655 = {};
  return obj6655;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._reset_BANG_[function() {
        var G__6659 = x__4851__auto__;
        return goog.typeOf(G__6659);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj6661 = {};
  return obj6661;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var G__6663 = arguments.length;
  switch(G__6663) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._swap_BANG_[function() {
        var G__6665 = x__4851__auto__;
        return goog.typeOf(G__6665);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._swap_BANG_[function() {
        var G__6667 = x__4851__auto__;
        return goog.typeOf(G__6667);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._swap_BANG_[function() {
        var G__6669 = x__4851__auto__;
        return goog.typeOf(G__6669);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._swap_BANG_[function() {
        var G__6671 = x__4851__auto__;
        return goog.typeOf(G__6671);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
  var obj6674 = {};
  return obj6674;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4203__auto__ = o;
    if (and__4203__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4851__auto__ = o == null ? null : o;
    return function() {
      var or__4215__auto__ = cljs.core._vreset_BANG_[function() {
        var G__6678 = x__4851__auto__;
        return goog.typeOf(G__6678);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj6680 = {};
  return obj6680;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4203__auto__ = coll;
    if (and__4203__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4851__auto__ = coll == null ? null : coll;
    return function() {
      var or__4215__auto__ = cljs.core._iterator[function() {
        var G__6684 = x__4851__auto__;
        return goog.typeOf(G__6684);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._iterator["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__6687 = 4294967295;
  var G__6688 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6687, G__6688) : Math.imul.call(null, G__6687, G__6688);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__6691 = a;
    var G__6692 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6691, G__6692) : Math.imul.call(null, G__6691, G__6692);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6693 = i + 2;
        var G__6694 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6693;
        h1 = G__6694;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj6696 = {};
  return obj6696;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6697 = i + 1;
          var G__6698 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__6697;
          hash = G__6698;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj6702 = {};
      return obj6702;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__6705 = o;
    if (G__6705) {
      var bit__4882__auto__ = G__6705.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4882__auto__ || G__6705.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__6706 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__6706) : Math.floor.call(null, G__6706);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = cljs.core.not(a.ns);
      if (and__4203__auto__) {
        return b.ns;
      } else {
        return and__4203__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__6713 = a.ns;
            var G__6714 = b.ns;
            return goog.array.defaultCompare(G__6713, G__6714);
          }();
          if (0 === nsc) {
            var G__6715 = a.name;
            var G__6716 = b.name;
            return goog.array.defaultCompare(G__6715, G__6716);
          } else {
            return nsc;
          }
        }
      } else {
        var G__6717 = a.name;
        var G__6718 = b.name;
        return goog.array.defaultCompare(G__6717, G__6718);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__6720 = null;
  var G__6720__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__6720__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__6720 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6720__2.call(this, self__, coll);
      case 3:
        return G__6720__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6720.cljs$core$IFn$_invoke$arity$2 = G__6720__2;
  G__6720.cljs$core$IFn$_invoke$arity$3 = G__6720__3;
  return G__6720;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6719) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6719)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4631__auto__ = self__._hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var G__6722 = arguments.length;
  switch(G__6722) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__6769 = null;
  var G__6769__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__6769__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__6769__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__6769__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__6769__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__6769__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__6769__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__6769__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__6769__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__6769__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6769__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6769__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6769__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6769__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6769__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6769__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6769__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6769__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6769__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6769__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6769__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6769__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6725 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__6726 = a;
    var G__6727 = b;
    var G__6728 = c;
    var G__6729 = d;
    var G__6730 = e;
    var G__6731 = f;
    var G__6732 = g;
    var G__6733 = h;
    var G__6734 = i;
    var G__6735 = j;
    var G__6736 = k;
    var G__6737 = l;
    var G__6738 = m;
    var G__6739 = n;
    var G__6740 = o;
    var G__6741 = p;
    var G__6742 = q;
    var G__6743 = r;
    var G__6744 = s;
    var G__6745 = t;
    var G__6746 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6725, G__6726, G__6727, G__6728, G__6729, G__6730, G__6731, G__6732, G__6733, G__6734, G__6735, G__6736, G__6737, G__6738, G__6739, G__6740, G__6741, G__6742, G__6743, G__6744, G__6745, G__6746) : cljs.core.apply.call(null, G__6725, G__6726, G__6727, G__6728, G__6729, G__6730, G__6731, G__6732, G__6733, G__6734, G__6735, G__6736, G__6737, G__6738, G__6739, G__6740, G__6741, G__6742, G__6743, 
    G__6744, G__6745, G__6746);
  };
  G__6769 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6769__1.call(this, self__);
      case 2:
        return G__6769__2.call(this, self__, a);
      case 3:
        return G__6769__3.call(this, self__, a, b);
      case 4:
        return G__6769__4.call(this, self__, a, b, c);
      case 5:
        return G__6769__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6769__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6769__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6769__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6769__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6769__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6769__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6769__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6769__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6769__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6769__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6769__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6769__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6769__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6769__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6769__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6769__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6769__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6769.cljs$core$IFn$_invoke$arity$1 = G__6769__1;
  G__6769.cljs$core$IFn$_invoke$arity$2 = G__6769__2;
  G__6769.cljs$core$IFn$_invoke$arity$3 = G__6769__3;
  G__6769.cljs$core$IFn$_invoke$arity$4 = G__6769__4;
  G__6769.cljs$core$IFn$_invoke$arity$5 = G__6769__5;
  G__6769.cljs$core$IFn$_invoke$arity$6 = G__6769__6;
  G__6769.cljs$core$IFn$_invoke$arity$7 = G__6769__7;
  G__6769.cljs$core$IFn$_invoke$arity$8 = G__6769__8;
  G__6769.cljs$core$IFn$_invoke$arity$9 = G__6769__9;
  G__6769.cljs$core$IFn$_invoke$arity$10 = G__6769__10;
  G__6769.cljs$core$IFn$_invoke$arity$11 = G__6769__11;
  G__6769.cljs$core$IFn$_invoke$arity$12 = G__6769__12;
  G__6769.cljs$core$IFn$_invoke$arity$13 = G__6769__13;
  G__6769.cljs$core$IFn$_invoke$arity$14 = G__6769__14;
  G__6769.cljs$core$IFn$_invoke$arity$15 = G__6769__15;
  G__6769.cljs$core$IFn$_invoke$arity$16 = G__6769__16;
  G__6769.cljs$core$IFn$_invoke$arity$17 = G__6769__17;
  G__6769.cljs$core$IFn$_invoke$arity$18 = G__6769__18;
  G__6769.cljs$core$IFn$_invoke$arity$19 = G__6769__19;
  G__6769.cljs$core$IFn$_invoke$arity$20 = G__6769__20;
  G__6769.cljs$core$IFn$_invoke$arity$21 = G__6769__21;
  G__6769.cljs$core$IFn$_invoke$arity$22 = G__6769__22;
  return G__6769;
}();
cljs.core.Var.prototype.apply = function(self__, args6724) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6724)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6747 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__6748 = a;
  var G__6749 = b;
  var G__6750 = c;
  var G__6751 = d;
  var G__6752 = e;
  var G__6753 = f;
  var G__6754 = g;
  var G__6755 = h;
  var G__6756 = i;
  var G__6757 = j;
  var G__6758 = k;
  var G__6759 = l;
  var G__6760 = m;
  var G__6761 = n;
  var G__6762 = o;
  var G__6763 = p;
  var G__6764 = q;
  var G__6765 = r;
  var G__6766 = s;
  var G__6767 = t;
  var G__6768 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6747, G__6748, G__6749, G__6750, G__6751, G__6752, G__6753, G__6754, G__6755, G__6756, G__6757, G__6758, G__6759, G__6760, G__6761, G__6762, G__6763, G__6764, G__6765, G__6766, G__6767, G__6768) : cljs.core.apply.call(null, G__6747, G__6748, G__6749, G__6750, G__6751, G__6752, G__6753, G__6754, G__6755, G__6756, G__6757, G__6758, G__6759, G__6760, G__6761, G__6762, G__6763, G__6764, G__6765, 
  G__6766, G__6767, G__6768);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__6771 = x;
  if (G__6771) {
    var bit__4889__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4215__auto__ = bit__4889__auto__;
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return G__6771.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__6771.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6771);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6771);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__6773 = value;
  if (G__6773) {
    var bit__4889__auto__ = G__6773.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4889__auto__ || G__6773.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__6773.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6773);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6773);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6775 = coll;
      if (G__6775) {
        var bit__4882__auto__ = G__6775.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4882__auto__ || G__6775.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6777 = coll;
      if (G__6777) {
        var bit__4882__auto__ = G__6777.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4882__auto__ || G__6777.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6779 = coll;
      if (G__6779) {
        var bit__4882__auto__ = G__6779.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4882__auto__ || G__6779.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6781 = coll;
      if (G__6781) {
        var bit__4882__auto__ = G__6781.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4882__auto__ || G__6781.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var G__6786 = arguments.length;
  switch(G__6786) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__6788 = y;
        var G__6789 = cljs.core.first(more);
        var G__6790 = cljs.core.next(more);
        x = G__6788;
        y = G__6789;
        more = G__6790;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq6782) {
  var G__6783 = cljs.core.first(seq6782);
  var seq6782__$1 = cljs.core.next(seq6782);
  var G__6784 = cljs.core.first(seq6782__$1);
  var seq6782__$2 = cljs.core.next(seq6782__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__6783, G__6784, seq6782__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"value":x, "done":false};
  } else {
    return{"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__6791 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__6791) : cljs.core.es6_iterator_seq.call(null, G__6791);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6792 = n + 1;
      var G__6793 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6794 = cljs.core.next(coll__$1);
      n = G__6792;
      hash_code = G__6793;
      coll__$1 = G__6794;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6795 = n + 1;
      var G__6796 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6797 = cljs.core.next(coll__$1);
      n = G__6795;
      hash_code = G__6796;
      coll__$1 = G__6797;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__6798 = this$__$1.valueOf();
  var G__6799 = other.valueOf();
  return goog.array.defaultCompare(G__6798, G__6799);
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__6800 = o;
  return goog.getUid(G__6800);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__6802 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__6802) : cljs.core.deref.call(null, G__6802);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var G__6804 = arguments.length;
  switch(G__6804) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6805 = val;
          var G__6806 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6805, G__6806) : f.call(null, G__6805, G__6806);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6812 = nval;
          var G__6813 = n + 1;
          val = G__6812;
          n = G__6813;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6807 = val__$1;
        var G__6808 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6807, G__6808) : f.call(null, G__6807, G__6808);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6814 = nval;
        var G__6815 = n + 1;
        val__$1 = G__6814;
        n = G__6815;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6809 = val__$1;
        var G__6810 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6809, G__6810) : f.call(null, G__6809, G__6810);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6816 = nval;
        var G__6817 = n + 1;
        val__$1 = G__6816;
        n = G__6817;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var G__6819 = arguments.length;
  switch(G__6819) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6820 = val;
          var G__6821 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6820, G__6821) : f.call(null, G__6820, G__6821);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6827 = nval;
          var G__6828 = n + 1;
          val = G__6827;
          n = G__6828;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6822 = val__$1;
        var G__6823 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6822, G__6823) : f.call(null, G__6822, G__6823);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6829 = nval;
        var G__6830 = n + 1;
        val__$1 = G__6829;
        n = G__6830;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6824 = val__$1;
        var G__6825 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6824, G__6825) : f.call(null, G__6824, G__6825);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6831 = nval;
        var G__6832 = n + 1;
        val__$1 = G__6831;
        n = G__6832;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__6834 = x;
  if (G__6834) {
    var bit__4889__auto__ = G__6834.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4889__auto__ || G__6834.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__6834.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6834);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6834);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__6836 = x;
  if (G__6836) {
    var bit__4889__auto__ = G__6836.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4889__auto__ || G__6836.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__6836.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6836);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6836);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6837 = coll__$1;
  var G__6838 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6837, G__6838) : cljs.core.equiv_sequential.call(null, G__6837, G__6838);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6839 = o;
  var G__6840 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6839, G__6840) : cljs.core.cons.call(null, G__6839, G__6840);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var G__6842 = arguments.length;
  switch(G__6842) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var G__6845 = arguments.length;
  switch(G__6845) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6847 = coll__$1;
  var G__6848 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6847, G__6848) : cljs.core.equiv_sequential.call(null, G__6847, G__6848);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__6849 = cljs.core.List.EMPTY;
  var G__6850 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__6849, G__6850) : cljs.core.with_meta.call(null, G__6849, G__6850);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__6851 = f;
  var G__6852 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__6851, G__6852) : cljs.core.seq_reduce.call(null, G__6851, G__6852);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__6853 = f;
  var G__6854 = start;
  var G__6855 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__6853, G__6854, G__6855) : cljs.core.seq_reduce.call(null, G__6853, G__6854, G__6855);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6856 = o;
  var G__6857 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6856, G__6857) : cljs.core.cons.call(null, G__6856, G__6857);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__6858 = sn;
      s = G__6858;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var G__6863 = arguments.length;
  switch(G__6863) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__6865 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__6866 = cljs.core.first(xs);
      var G__6867 = cljs.core.next(xs);
      coll = G__6865;
      x = G__6866;
      xs = G__6867;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq6859) {
  var G__6860 = cljs.core.first(seq6859);
  var seq6859__$1 = cljs.core.next(seq6859);
  var G__6861 = cljs.core.first(seq6859__$1);
  var seq6859__$2 = cljs.core.next(seq6859__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__6860, G__6861, seq6859__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__6868 = cljs.core.next(s);
      var G__6869 = acc + 1;
      s = G__6868;
      acc = G__6869;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6871 = coll;
      if (G__6871) {
        var bit__4882__auto__ = G__6871.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4882__auto__ || G__6871.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var G__6873 = arguments.length;
  switch(G__6873) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__6875 = cljs.core.next(coll);
            var G__6876 = n - 1;
            coll = G__6875;
            n = G__6876;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__6877 = cljs.core.next(coll);
            var G__6878 = n - 1;
            var G__6879 = not_found;
            coll = G__6877;
            n = G__6878;
            not_found = G__6879;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var G__6881 = arguments.length;
  switch(G__6881) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (function() {
        var G__6882 = coll;
        if (G__6882) {
          var bit__4882__auto__ = G__6882.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4882__auto__ || G__6882.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__6883 = coll;
                if (G__6883) {
                  var bit__4889__auto__ = G__6883.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4889__auto__ || G__6883.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__6883.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6883);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6883);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (function() {
        var G__6884 = coll;
        if (G__6884) {
          var bit__4882__auto__ = G__6884.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4882__auto__ || G__6884.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__6885 = coll;
                if (G__6885) {
                  var bit__4889__auto__ = G__6885.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4889__auto__ || G__6885.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__6885.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6885);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6885);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__6887 = n__$1 - 1;
      var G__6888 = cljs.core.rest(xs);
      n__$1 = G__6887;
      xs = G__6888;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var G__6890 = arguments.length;
  switch(G__6890) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (function() {
      var G__6891 = o;
      if (G__6891) {
        var bit__4882__auto__ = G__6891.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4882__auto__ || G__6891.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (function() {
      var G__6892 = o;
      if (G__6892) {
        var bit__4882__auto__ = G__6892.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4882__auto__ || G__6892.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var G__6899 = arguments.length;
  switch(G__6899) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__6901 = ret;
      var G__6902 = cljs.core.first(kvs);
      var G__6903 = cljs.core.second(kvs);
      var G__6904 = cljs.core.nnext(kvs);
      coll = G__6901;
      k = G__6902;
      v = G__6903;
      kvs = G__6904;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq6894) {
  var G__6895 = cljs.core.first(seq6894);
  var seq6894__$1 = cljs.core.next(seq6894);
  var G__6896 = cljs.core.first(seq6894__$1);
  var seq6894__$2 = cljs.core.next(seq6894__$1);
  var G__6897 = cljs.core.first(seq6894__$2);
  var seq6894__$3 = cljs.core.next(seq6894__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__6895, G__6896, G__6897, seq6894__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var G__6909 = arguments.length;
  switch(G__6909) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__6911 = ret;
        var G__6912 = cljs.core.first(ks);
        var G__6913 = cljs.core.next(ks);
        coll = G__6911;
        k = G__6912;
        ks = G__6913;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq6905) {
  var G__6906 = cljs.core.first(seq6905);
  var seq6905__$1 = cljs.core.next(seq6905);
  var G__6907 = cljs.core.first(seq6905__$1);
  var seq6905__$2 = cljs.core.next(seq6905__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__6906, G__6907, seq6905__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4215__auto__ = function() {
    var G__6918 = f;
    return goog.isFunction(G__6918);
  }();
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    var G__6919 = f;
    if (G__6919) {
      var bit__4889__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4215__auto____$1 = bit__4889__auto__;
        if (cljs.core.truth_(or__4215__auto____$1)) {
          return or__4215__auto____$1;
        } else {
          return G__6919.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__6919.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6919);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6919);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__7385 = null;
  var G__7385__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__7385__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6921 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__6921) : self__.afn.call(null, G__6921);
  };
  var G__7385__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6922 = a;
    var G__6923 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__6922, G__6923) : self__.afn.call(null, G__6922, G__6923);
  };
  var G__7385__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6924 = a;
    var G__6925 = b;
    var G__6926 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__6924, G__6925, G__6926) : self__.afn.call(null, G__6924, G__6925, G__6926);
  };
  var G__7385__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6927 = a;
    var G__6928 = b;
    var G__6929 = c;
    var G__6930 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__6927, G__6928, G__6929, G__6930) : self__.afn.call(null, G__6927, G__6928, G__6929, G__6930);
  };
  var G__7385__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6931 = a;
    var G__6932 = b;
    var G__6933 = c;
    var G__6934 = d;
    var G__6935 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__6931, G__6932, G__6933, G__6934, G__6935) : self__.afn.call(null, G__6931, G__6932, G__6933, G__6934, G__6935);
  };
  var G__7385__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6936 = a;
    var G__6937 = b;
    var G__6938 = c;
    var G__6939 = d;
    var G__6940 = e;
    var G__6941 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__6936, G__6937, G__6938, G__6939, G__6940, G__6941) : self__.afn.call(null, G__6936, G__6937, G__6938, G__6939, G__6940, G__6941);
  };
  var G__7385__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6942 = a;
    var G__6943 = b;
    var G__6944 = c;
    var G__6945 = d;
    var G__6946 = e;
    var G__6947 = f;
    var G__6948 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__6942, G__6943, G__6944, G__6945, G__6946, G__6947, G__6948) : self__.afn.call(null, G__6942, G__6943, G__6944, G__6945, G__6946, G__6947, G__6948);
  };
  var G__7385__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6949 = a;
    var G__6950 = b;
    var G__6951 = c;
    var G__6952 = d;
    var G__6953 = e;
    var G__6954 = f;
    var G__6955 = g;
    var G__6956 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__6949, G__6950, G__6951, G__6952, G__6953, G__6954, G__6955, G__6956) : self__.afn.call(null, G__6949, G__6950, G__6951, G__6952, G__6953, G__6954, G__6955, G__6956);
  };
  var G__7385__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6957 = a;
    var G__6958 = b;
    var G__6959 = c;
    var G__6960 = d;
    var G__6961 = e;
    var G__6962 = f;
    var G__6963 = g;
    var G__6964 = h;
    var G__6965 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__6957, G__6958, G__6959, G__6960, G__6961, G__6962, G__6963, G__6964, G__6965) : self__.afn.call(null, G__6957, G__6958, G__6959, G__6960, G__6961, G__6962, G__6963, G__6964, G__6965);
  };
  var G__7385__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6966 = a;
    var G__6967 = b;
    var G__6968 = c;
    var G__6969 = d;
    var G__6970 = e;
    var G__6971 = f;
    var G__6972 = g;
    var G__6973 = h;
    var G__6974 = i;
    var G__6975 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__6966, G__6967, G__6968, G__6969, G__6970, G__6971, G__6972, G__6973, G__6974, G__6975) : self__.afn.call(null, G__6966, G__6967, G__6968, G__6969, G__6970, G__6971, G__6972, G__6973, G__6974, G__6975);
  };
  var G__7385__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6976 = a;
    var G__6977 = b;
    var G__6978 = c;
    var G__6979 = d;
    var G__6980 = e;
    var G__6981 = f;
    var G__6982 = g;
    var G__6983 = h;
    var G__6984 = i;
    var G__6985 = j;
    var G__6986 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__6976, G__6977, G__6978, G__6979, G__6980, G__6981, G__6982, G__6983, G__6984, G__6985, G__6986) : self__.afn.call(null, G__6976, G__6977, G__6978, G__6979, G__6980, G__6981, G__6982, G__6983, G__6984, G__6985, G__6986);
  };
  var G__7385__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6987 = a;
    var G__6988 = b;
    var G__6989 = c;
    var G__6990 = d;
    var G__6991 = e;
    var G__6992 = f;
    var G__6993 = g;
    var G__6994 = h;
    var G__6995 = i;
    var G__6996 = j;
    var G__6997 = k;
    var G__6998 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__6987, G__6988, G__6989, G__6990, G__6991, G__6992, G__6993, G__6994, G__6995, G__6996, G__6997, G__6998) : self__.afn.call(null, G__6987, G__6988, G__6989, G__6990, G__6991, G__6992, G__6993, G__6994, G__6995, G__6996, G__6997, G__6998);
  };
  var G__7385__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6999 = a;
    var G__7000 = b;
    var G__7001 = c;
    var G__7002 = d;
    var G__7003 = e;
    var G__7004 = f;
    var G__7005 = g;
    var G__7006 = h;
    var G__7007 = i;
    var G__7008 = j;
    var G__7009 = k;
    var G__7010 = l;
    var G__7011 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__6999, G__7000, G__7001, G__7002, G__7003, G__7004, G__7005, G__7006, G__7007, G__7008, G__7009, G__7010, G__7011) : self__.afn.call(null, G__6999, G__7000, G__7001, G__7002, G__7003, G__7004, G__7005, G__7006, G__7007, G__7008, G__7009, G__7010, G__7011);
  };
  var G__7385__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7012 = a;
    var G__7013 = b;
    var G__7014 = c;
    var G__7015 = d;
    var G__7016 = e;
    var G__7017 = f;
    var G__7018 = g;
    var G__7019 = h;
    var G__7020 = i;
    var G__7021 = j;
    var G__7022 = k;
    var G__7023 = l;
    var G__7024 = m;
    var G__7025 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__7012, G__7013, G__7014, G__7015, G__7016, G__7017, G__7018, G__7019, G__7020, G__7021, G__7022, G__7023, G__7024, G__7025) : self__.afn.call(null, G__7012, G__7013, G__7014, G__7015, G__7016, G__7017, G__7018, G__7019, G__7020, G__7021, G__7022, G__7023, G__7024, G__7025);
  };
  var G__7385__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7026 = a;
    var G__7027 = b;
    var G__7028 = c;
    var G__7029 = d;
    var G__7030 = e;
    var G__7031 = f;
    var G__7032 = g;
    var G__7033 = h;
    var G__7034 = i;
    var G__7035 = j;
    var G__7036 = k;
    var G__7037 = l;
    var G__7038 = m;
    var G__7039 = n;
    var G__7040 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__7026, G__7027, G__7028, G__7029, G__7030, G__7031, G__7032, G__7033, G__7034, G__7035, G__7036, G__7037, G__7038, G__7039, G__7040) : self__.afn.call(null, G__7026, G__7027, G__7028, G__7029, G__7030, G__7031, G__7032, G__7033, G__7034, G__7035, G__7036, G__7037, G__7038, G__7039, G__7040);
  };
  var G__7385__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7041 = a;
    var G__7042 = b;
    var G__7043 = c;
    var G__7044 = d;
    var G__7045 = e;
    var G__7046 = f;
    var G__7047 = g;
    var G__7048 = h;
    var G__7049 = i;
    var G__7050 = j;
    var G__7051 = k;
    var G__7052 = l;
    var G__7053 = m;
    var G__7054 = n;
    var G__7055 = o;
    var G__7056 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__7041, G__7042, G__7043, G__7044, G__7045, G__7046, G__7047, G__7048, G__7049, G__7050, G__7051, G__7052, G__7053, G__7054, G__7055, G__7056) : self__.afn.call(null, G__7041, G__7042, G__7043, G__7044, G__7045, G__7046, G__7047, G__7048, G__7049, G__7050, G__7051, G__7052, G__7053, G__7054, G__7055, G__7056);
  };
  var G__7385__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7057 = a;
    var G__7058 = b;
    var G__7059 = c;
    var G__7060 = d;
    var G__7061 = e;
    var G__7062 = f;
    var G__7063 = g;
    var G__7064 = h;
    var G__7065 = i;
    var G__7066 = j;
    var G__7067 = k;
    var G__7068 = l;
    var G__7069 = m;
    var G__7070 = n;
    var G__7071 = o;
    var G__7072 = p;
    var G__7073 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__7057, G__7058, G__7059, G__7060, G__7061, G__7062, G__7063, G__7064, G__7065, G__7066, G__7067, G__7068, G__7069, G__7070, G__7071, G__7072, G__7073) : self__.afn.call(null, G__7057, G__7058, G__7059, G__7060, G__7061, G__7062, G__7063, G__7064, G__7065, G__7066, G__7067, G__7068, G__7069, G__7070, G__7071, G__7072, G__7073);
  };
  var G__7385__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7074 = a;
    var G__7075 = b;
    var G__7076 = c;
    var G__7077 = d;
    var G__7078 = e;
    var G__7079 = f;
    var G__7080 = g;
    var G__7081 = h;
    var G__7082 = i;
    var G__7083 = j;
    var G__7084 = k;
    var G__7085 = l;
    var G__7086 = m;
    var G__7087 = n;
    var G__7088 = o;
    var G__7089 = p;
    var G__7090 = q;
    var G__7091 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__7074, G__7075, G__7076, G__7077, G__7078, G__7079, G__7080, G__7081, G__7082, G__7083, G__7084, G__7085, G__7086, G__7087, G__7088, G__7089, G__7090, G__7091) : self__.afn.call(null, G__7074, G__7075, G__7076, G__7077, G__7078, G__7079, G__7080, G__7081, G__7082, G__7083, G__7084, G__7085, G__7086, G__7087, G__7088, G__7089, G__7090, G__7091);
  };
  var G__7385__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7092 = a;
    var G__7093 = b;
    var G__7094 = c;
    var G__7095 = d;
    var G__7096 = e;
    var G__7097 = f;
    var G__7098 = g;
    var G__7099 = h;
    var G__7100 = i;
    var G__7101 = j;
    var G__7102 = k;
    var G__7103 = l;
    var G__7104 = m;
    var G__7105 = n;
    var G__7106 = o;
    var G__7107 = p;
    var G__7108 = q;
    var G__7109 = r;
    var G__7110 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__7092, G__7093, G__7094, G__7095, G__7096, G__7097, G__7098, G__7099, G__7100, G__7101, G__7102, G__7103, G__7104, G__7105, G__7106, G__7107, G__7108, G__7109, G__7110) : self__.afn.call(null, G__7092, G__7093, G__7094, G__7095, G__7096, G__7097, G__7098, G__7099, G__7100, G__7101, G__7102, G__7103, G__7104, G__7105, G__7106, G__7107, G__7108, G__7109, G__7110);
  };
  var G__7385__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7111 = a;
    var G__7112 = b;
    var G__7113 = c;
    var G__7114 = d;
    var G__7115 = e;
    var G__7116 = f;
    var G__7117 = g;
    var G__7118 = h;
    var G__7119 = i;
    var G__7120 = j;
    var G__7121 = k;
    var G__7122 = l;
    var G__7123 = m;
    var G__7124 = n;
    var G__7125 = o;
    var G__7126 = p;
    var G__7127 = q;
    var G__7128 = r;
    var G__7129 = s;
    var G__7130 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__7111, G__7112, G__7113, G__7114, G__7115, G__7116, G__7117, G__7118, G__7119, G__7120, G__7121, G__7122, G__7123, G__7124, G__7125, G__7126, G__7127, G__7128, G__7129, G__7130) : self__.afn.call(null, G__7111, G__7112, G__7113, G__7114, G__7115, G__7116, G__7117, G__7118, G__7119, G__7120, G__7121, G__7122, G__7123, G__7124, G__7125, G__7126, G__7127, G__7128, G__7129, G__7130);
  };
  var G__7385__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7131 = self__.afn;
    var G__7132 = a;
    var G__7133 = b;
    var G__7134 = c;
    var G__7135 = d;
    var G__7136 = e;
    var G__7137 = f;
    var G__7138 = g;
    var G__7139 = h;
    var G__7140 = i;
    var G__7141 = j;
    var G__7142 = k;
    var G__7143 = l;
    var G__7144 = m;
    var G__7145 = n;
    var G__7146 = o;
    var G__7147 = p;
    var G__7148 = q;
    var G__7149 = r;
    var G__7150 = s;
    var G__7151 = t;
    var G__7152 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__7131, G__7132, G__7133, G__7134, G__7135, G__7136, G__7137, G__7138, G__7139, G__7140, G__7141, G__7142, G__7143, G__7144, G__7145, G__7146, G__7147, G__7148, G__7149, G__7150, G__7151, G__7152) : cljs.core.apply.call(null, G__7131, G__7132, G__7133, G__7134, G__7135, G__7136, G__7137, G__7138, G__7139, G__7140, G__7141, G__7142, G__7143, G__7144, G__7145, G__7146, G__7147, G__7148, G__7149, 
    G__7150, G__7151, G__7152);
  };
  G__7385 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__7385__1.call(this, self__);
      case 2:
        return G__7385__2.call(this, self__, a);
      case 3:
        return G__7385__3.call(this, self__, a, b);
      case 4:
        return G__7385__4.call(this, self__, a, b, c);
      case 5:
        return G__7385__5.call(this, self__, a, b, c, d);
      case 6:
        return G__7385__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__7385__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__7385__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__7385__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__7385__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__7385__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__7385__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__7385__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__7385__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__7385__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__7385__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__7385__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__7385__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__7385__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__7385__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__7385__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__7385__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7385.cljs$core$IFn$_invoke$arity$1 = G__7385__1;
  G__7385.cljs$core$IFn$_invoke$arity$2 = G__7385__2;
  G__7385.cljs$core$IFn$_invoke$arity$3 = G__7385__3;
  G__7385.cljs$core$IFn$_invoke$arity$4 = G__7385__4;
  G__7385.cljs$core$IFn$_invoke$arity$5 = G__7385__5;
  G__7385.cljs$core$IFn$_invoke$arity$6 = G__7385__6;
  G__7385.cljs$core$IFn$_invoke$arity$7 = G__7385__7;
  G__7385.cljs$core$IFn$_invoke$arity$8 = G__7385__8;
  G__7385.cljs$core$IFn$_invoke$arity$9 = G__7385__9;
  G__7385.cljs$core$IFn$_invoke$arity$10 = G__7385__10;
  G__7385.cljs$core$IFn$_invoke$arity$11 = G__7385__11;
  G__7385.cljs$core$IFn$_invoke$arity$12 = G__7385__12;
  G__7385.cljs$core$IFn$_invoke$arity$13 = G__7385__13;
  G__7385.cljs$core$IFn$_invoke$arity$14 = G__7385__14;
  G__7385.cljs$core$IFn$_invoke$arity$15 = G__7385__15;
  G__7385.cljs$core$IFn$_invoke$arity$16 = G__7385__16;
  G__7385.cljs$core$IFn$_invoke$arity$17 = G__7385__17;
  G__7385.cljs$core$IFn$_invoke$arity$18 = G__7385__18;
  G__7385.cljs$core$IFn$_invoke$arity$19 = G__7385__19;
  G__7385.cljs$core$IFn$_invoke$arity$20 = G__7385__20;
  G__7385.cljs$core$IFn$_invoke$arity$21 = G__7385__21;
  G__7385.cljs$core$IFn$_invoke$arity$22 = G__7385__22;
  return G__7385;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args6920) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6920)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__7153 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__7153) : self__.afn.call(null, G__7153);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__7154 = a;
  var G__7155 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__7154, G__7155) : self__.afn.call(null, G__7154, G__7155);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__7156 = a;
  var G__7157 = b;
  var G__7158 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__7156, G__7157, G__7158) : self__.afn.call(null, G__7156, G__7157, G__7158);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__7159 = a;
  var G__7160 = b;
  var G__7161 = c;
  var G__7162 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__7159, G__7160, G__7161, G__7162) : self__.afn.call(null, G__7159, G__7160, G__7161, G__7162);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__7163 = a;
  var G__7164 = b;
  var G__7165 = c;
  var G__7166 = d;
  var G__7167 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__7163, G__7164, G__7165, G__7166, G__7167) : self__.afn.call(null, G__7163, G__7164, G__7165, G__7166, G__7167);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__7168 = a;
  var G__7169 = b;
  var G__7170 = c;
  var G__7171 = d;
  var G__7172 = e;
  var G__7173 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__7168, G__7169, G__7170, G__7171, G__7172, G__7173) : self__.afn.call(null, G__7168, G__7169, G__7170, G__7171, G__7172, G__7173);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__7174 = a;
  var G__7175 = b;
  var G__7176 = c;
  var G__7177 = d;
  var G__7178 = e;
  var G__7179 = f;
  var G__7180 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__7174, G__7175, G__7176, G__7177, G__7178, G__7179, G__7180) : self__.afn.call(null, G__7174, G__7175, G__7176, G__7177, G__7178, G__7179, G__7180);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__7181 = a;
  var G__7182 = b;
  var G__7183 = c;
  var G__7184 = d;
  var G__7185 = e;
  var G__7186 = f;
  var G__7187 = g;
  var G__7188 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__7181, G__7182, G__7183, G__7184, G__7185, G__7186, G__7187, G__7188) : self__.afn.call(null, G__7181, G__7182, G__7183, G__7184, G__7185, G__7186, G__7187, G__7188);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__7189 = a;
  var G__7190 = b;
  var G__7191 = c;
  var G__7192 = d;
  var G__7193 = e;
  var G__7194 = f;
  var G__7195 = g;
  var G__7196 = h;
  var G__7197 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__7189, G__7190, G__7191, G__7192, G__7193, G__7194, G__7195, G__7196, G__7197) : self__.afn.call(null, G__7189, G__7190, G__7191, G__7192, G__7193, G__7194, G__7195, G__7196, G__7197);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__7198 = a;
  var G__7199 = b;
  var G__7200 = c;
  var G__7201 = d;
  var G__7202 = e;
  var G__7203 = f;
  var G__7204 = g;
  var G__7205 = h;
  var G__7206 = i;
  var G__7207 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__7198, G__7199, G__7200, G__7201, G__7202, G__7203, G__7204, G__7205, G__7206, G__7207) : self__.afn.call(null, G__7198, G__7199, G__7200, G__7201, G__7202, G__7203, G__7204, G__7205, G__7206, G__7207);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__7208 = a;
  var G__7209 = b;
  var G__7210 = c;
  var G__7211 = d;
  var G__7212 = e;
  var G__7213 = f;
  var G__7214 = g;
  var G__7215 = h;
  var G__7216 = i;
  var G__7217 = j;
  var G__7218 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__7208, G__7209, G__7210, G__7211, G__7212, G__7213, G__7214, G__7215, G__7216, G__7217, G__7218) : self__.afn.call(null, G__7208, G__7209, G__7210, G__7211, G__7212, G__7213, G__7214, G__7215, G__7216, G__7217, G__7218);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__7219 = a;
  var G__7220 = b;
  var G__7221 = c;
  var G__7222 = d;
  var G__7223 = e;
  var G__7224 = f;
  var G__7225 = g;
  var G__7226 = h;
  var G__7227 = i;
  var G__7228 = j;
  var G__7229 = k;
  var G__7230 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__7219, G__7220, G__7221, G__7222, G__7223, G__7224, G__7225, G__7226, G__7227, G__7228, G__7229, G__7230) : self__.afn.call(null, G__7219, G__7220, G__7221, G__7222, G__7223, G__7224, G__7225, G__7226, G__7227, G__7228, G__7229, G__7230);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__7231 = a;
  var G__7232 = b;
  var G__7233 = c;
  var G__7234 = d;
  var G__7235 = e;
  var G__7236 = f;
  var G__7237 = g;
  var G__7238 = h;
  var G__7239 = i;
  var G__7240 = j;
  var G__7241 = k;
  var G__7242 = l;
  var G__7243 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__7231, G__7232, G__7233, G__7234, G__7235, G__7236, G__7237, G__7238, G__7239, G__7240, G__7241, G__7242, G__7243) : self__.afn.call(null, G__7231, G__7232, G__7233, G__7234, G__7235, G__7236, G__7237, G__7238, G__7239, G__7240, G__7241, G__7242, G__7243);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__7244 = a;
  var G__7245 = b;
  var G__7246 = c;
  var G__7247 = d;
  var G__7248 = e;
  var G__7249 = f;
  var G__7250 = g;
  var G__7251 = h;
  var G__7252 = i;
  var G__7253 = j;
  var G__7254 = k;
  var G__7255 = l;
  var G__7256 = m;
  var G__7257 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__7244, G__7245, G__7246, G__7247, G__7248, G__7249, G__7250, G__7251, G__7252, G__7253, G__7254, G__7255, G__7256, G__7257) : self__.afn.call(null, G__7244, G__7245, G__7246, G__7247, G__7248, G__7249, G__7250, G__7251, G__7252, G__7253, G__7254, G__7255, G__7256, G__7257);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__7258 = a;
  var G__7259 = b;
  var G__7260 = c;
  var G__7261 = d;
  var G__7262 = e;
  var G__7263 = f;
  var G__7264 = g;
  var G__7265 = h;
  var G__7266 = i;
  var G__7267 = j;
  var G__7268 = k;
  var G__7269 = l;
  var G__7270 = m;
  var G__7271 = n;
  var G__7272 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__7258, G__7259, G__7260, G__7261, G__7262, G__7263, G__7264, G__7265, G__7266, G__7267, G__7268, G__7269, G__7270, G__7271, G__7272) : self__.afn.call(null, G__7258, G__7259, G__7260, G__7261, G__7262, G__7263, G__7264, G__7265, G__7266, G__7267, G__7268, G__7269, G__7270, G__7271, G__7272);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__7273 = a;
  var G__7274 = b;
  var G__7275 = c;
  var G__7276 = d;
  var G__7277 = e;
  var G__7278 = f;
  var G__7279 = g;
  var G__7280 = h;
  var G__7281 = i;
  var G__7282 = j;
  var G__7283 = k;
  var G__7284 = l;
  var G__7285 = m;
  var G__7286 = n;
  var G__7287 = o;
  var G__7288 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__7273, G__7274, G__7275, G__7276, G__7277, G__7278, G__7279, G__7280, G__7281, G__7282, G__7283, G__7284, G__7285, G__7286, G__7287, G__7288) : self__.afn.call(null, G__7273, G__7274, G__7275, G__7276, G__7277, G__7278, G__7279, G__7280, G__7281, G__7282, G__7283, G__7284, G__7285, G__7286, G__7287, G__7288);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__7289 = a;
  var G__7290 = b;
  var G__7291 = c;
  var G__7292 = d;
  var G__7293 = e;
  var G__7294 = f;
  var G__7295 = g;
  var G__7296 = h;
  var G__7297 = i;
  var G__7298 = j;
  var G__7299 = k;
  var G__7300 = l;
  var G__7301 = m;
  var G__7302 = n;
  var G__7303 = o;
  var G__7304 = p;
  var G__7305 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__7289, G__7290, G__7291, G__7292, G__7293, G__7294, G__7295, G__7296, G__7297, G__7298, G__7299, G__7300, G__7301, G__7302, G__7303, G__7304, G__7305) : self__.afn.call(null, G__7289, G__7290, G__7291, G__7292, G__7293, G__7294, G__7295, G__7296, G__7297, G__7298, G__7299, G__7300, G__7301, G__7302, G__7303, G__7304, G__7305);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__7306 = a;
  var G__7307 = b;
  var G__7308 = c;
  var G__7309 = d;
  var G__7310 = e;
  var G__7311 = f;
  var G__7312 = g;
  var G__7313 = h;
  var G__7314 = i;
  var G__7315 = j;
  var G__7316 = k;
  var G__7317 = l;
  var G__7318 = m;
  var G__7319 = n;
  var G__7320 = o;
  var G__7321 = p;
  var G__7322 = q;
  var G__7323 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__7306, G__7307, G__7308, G__7309, G__7310, G__7311, G__7312, G__7313, G__7314, G__7315, G__7316, G__7317, G__7318, G__7319, G__7320, G__7321, G__7322, G__7323) : self__.afn.call(null, G__7306, G__7307, G__7308, G__7309, G__7310, G__7311, G__7312, G__7313, G__7314, G__7315, G__7316, G__7317, G__7318, G__7319, G__7320, G__7321, G__7322, G__7323);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__7324 = a;
  var G__7325 = b;
  var G__7326 = c;
  var G__7327 = d;
  var G__7328 = e;
  var G__7329 = f;
  var G__7330 = g;
  var G__7331 = h;
  var G__7332 = i;
  var G__7333 = j;
  var G__7334 = k;
  var G__7335 = l;
  var G__7336 = m;
  var G__7337 = n;
  var G__7338 = o;
  var G__7339 = p;
  var G__7340 = q;
  var G__7341 = r;
  var G__7342 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__7324, G__7325, G__7326, G__7327, G__7328, G__7329, G__7330, G__7331, G__7332, G__7333, G__7334, G__7335, G__7336, G__7337, G__7338, G__7339, G__7340, G__7341, G__7342) : self__.afn.call(null, G__7324, G__7325, G__7326, G__7327, G__7328, G__7329, G__7330, G__7331, G__7332, G__7333, G__7334, G__7335, G__7336, G__7337, G__7338, G__7339, G__7340, G__7341, G__7342);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__7343 = a;
  var G__7344 = b;
  var G__7345 = c;
  var G__7346 = d;
  var G__7347 = e;
  var G__7348 = f;
  var G__7349 = g;
  var G__7350 = h;
  var G__7351 = i;
  var G__7352 = j;
  var G__7353 = k;
  var G__7354 = l;
  var G__7355 = m;
  var G__7356 = n;
  var G__7357 = o;
  var G__7358 = p;
  var G__7359 = q;
  var G__7360 = r;
  var G__7361 = s;
  var G__7362 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__7343, G__7344, G__7345, G__7346, G__7347, G__7348, G__7349, G__7350, G__7351, G__7352, G__7353, G__7354, G__7355, G__7356, G__7357, G__7358, G__7359, G__7360, G__7361, G__7362) : self__.afn.call(null, G__7343, G__7344, G__7345, G__7346, G__7347, G__7348, G__7349, G__7350, G__7351, G__7352, G__7353, G__7354, G__7355, G__7356, G__7357, G__7358, G__7359, G__7360, G__7361, G__7362);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__7363 = self__.afn;
  var G__7364 = a;
  var G__7365 = b;
  var G__7366 = c;
  var G__7367 = d;
  var G__7368 = e;
  var G__7369 = f;
  var G__7370 = g;
  var G__7371 = h;
  var G__7372 = i;
  var G__7373 = j;
  var G__7374 = k;
  var G__7375 = l;
  var G__7376 = m;
  var G__7377 = n;
  var G__7378 = o;
  var G__7379 = p;
  var G__7380 = q;
  var G__7381 = r;
  var G__7382 = s;
  var G__7383 = t;
  var G__7384 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__7363, G__7364, G__7365, G__7366, G__7367, G__7368, G__7369, G__7370, G__7371, G__7372, G__7373, G__7374, G__7375, G__7376, G__7377, G__7378, G__7379, G__7380, G__7381, G__7382, G__7383, G__7384) : cljs.core.apply.call(null, G__7363, G__7364, G__7365, G__7366, G__7367, G__7368, G__7369, G__7370, G__7371, G__7372, G__7373, G__7374, G__7375, G__7376, G__7377, G__7378, G__7379, G__7380, G__7381, 
  G__7382, G__7383, G__7384);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__7389 = o;
    if (G__7389) {
      var bit__4889__auto__ = G__7389.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4889__auto__ || G__7389.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__7389.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__7389);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__7389);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4203__auto__ = !(o == null);
    if (and__4203__auto__) {
      var G__7393 = o;
      if (G__7393) {
        var bit__4889__auto__ = G__7393.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4889__auto__ || G__7393.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__7393.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__7393);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__7393);
      }
    } else {
      return and__4203__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var G__7398 = arguments.length;
  switch(G__7398) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__7400 = ret;
        var G__7401 = cljs.core.first(ks);
        var G__7402 = cljs.core.next(ks);
        coll = G__7400;
        k = G__7401;
        ks = G__7402;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq7394) {
  var G__7395 = cljs.core.first(seq7394);
  var seq7394__$1 = cljs.core.next(seq7394);
  var G__7396 = cljs.core.first(seq7394__$1);
  var seq7394__$2 = cljs.core.next(seq7394__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__7395, G__7396, seq7394__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7404 = x;
    if (G__7404) {
      var bit__4889__auto__ = G__7404.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4889__auto__ || G__7404.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__7404.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__7404);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__7404);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7406 = x;
    if (G__7406) {
      var bit__4889__auto__ = G__7406.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4889__auto__ || G__7406.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__7406.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__7406);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__7406);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__7408 = x;
  if (G__7408) {
    var bit__4889__auto__ = G__7408.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4889__auto__ || G__7408.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__7408.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__7408);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__7408);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__7410 = x;
  if (G__7410) {
    var bit__4889__auto__ = G__7410.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4889__auto__ || G__7410.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__7410.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__7410);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__7410);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__7412 = x;
  if (G__7412) {
    var bit__4889__auto__ = G__7412.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4889__auto__ || G__7412.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__7412.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__7412);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__7412);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__7414 = x;
  if (G__7414) {
    var bit__4889__auto__ = G__7414.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4889__auto__ || G__7414.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__7414.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__7414);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__7414);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7416 = x;
    if (G__7416) {
      var bit__4889__auto__ = G__7416.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4889__auto__ || G__7416.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__7416.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__7416);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__7416);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__7418 = x;
  if (G__7418) {
    var bit__4889__auto__ = G__7418.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4889__auto__ || G__7418.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__7418.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__7418);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__7418);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__7420 = x;
  if (G__7420) {
    var bit__4882__auto__ = G__7420.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4882__auto__ || G__7420.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var G__7423 = arguments.length;
  switch(G__7423) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5266__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  var obj7425 = {};
  return obj7425;
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var G__7426 = goog.object.create;
  var G__7427 = keyvals;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__7426, G__7427) : cljs.core.apply.call(null, G__7426, G__7427);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq7421) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7421));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__7431_7433 = obj;
  var G__7432_7434 = function(G__7431_7433, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__7431_7433, keys);
  goog.object.forEach(G__7431_7433, G__7432_7434);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7435 = i__$1 + 1;
      var G__7436 = j__$1 + 1;
      var G__7437 = len__$1 - 1;
      i__$1 = G__7435;
      j__$1 = G__7436;
      len__$1 = G__7437;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7438 = i__$1 - 1;
      var G__7439 = j__$1 - 1;
      var G__7440 = len__$1 - 1;
      i__$1 = G__7438;
      j__$1 = G__7439;
      len__$1 = G__7440;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj7442 = {};
  return obj7442;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__7444 = s;
    if (G__7444) {
      var bit__4889__auto__ = G__7444.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4889__auto__ || G__7444.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__7444.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__7444);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__7444);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__7446 = s;
  if (G__7446) {
    var bit__4889__auto__ = G__7446.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4889__auto__ || G__7446.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__7446.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__7446);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__7446);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4215__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4215__auto__) {
    return or__4215__auto__;
  } else {
    var G__7450 = f;
    if (G__7450) {
      var bit__4889__auto__ = G__7450.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4889__auto__ || G__7450.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__7450.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__7450);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__7450);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__7463 = n;
    return isNaN(G__7463);
  }()) && !(n === Infinity) && function() {
    var G__7464 = n;
    return parseFloat(G__7464);
  }() === function() {
    var G__7465 = n;
    var G__7466 = 10;
    return parseInt(G__7465, G__7466);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var G__7471 = arguments.length;
  switch(G__7471) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__7473 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__7474 = etc;
          s = G__7473;
          xs = G__7474;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq7467) {
  var G__7468 = cljs.core.first(seq7467);
  var seq7467__$1 = cljs.core.next(seq7467);
  var G__7469 = cljs.core.first(seq7467__$1);
  var seq7467__$2 = cljs.core.next(seq7467__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__7468, G__7469, seq7467__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__7478 = x;
            if (G__7478) {
              var bit__4882__auto__ = G__7478.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4882__auto__ || G__7478.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__7479 = x;
            var G__7480 = y;
            return goog.array.defaultCompare(G__7479, G__7480);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var G__7482 = arguments.length;
  switch(G__7482) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return-1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__7484 = xs;
      var G__7485 = ys;
      var G__7486 = len;
      var G__7487 = n + 1;
      xs = G__7484;
      ys = G__7485;
      len = G__7486;
      n = G__7487;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__7492 = x;
        var G__7493 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7492, G__7493) : f.call(null, G__7492, G__7493);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__7494 = y;
            var G__7495 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7494, G__7495) : f.call(null, G__7494, G__7495);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var G__7497 = arguments.length;
  switch(G__7497) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = function() {
      var G__7498 = coll;
      return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__7498) : cljs.core.to_array.call(null, G__7498);
    }();
    var G__7499_7502 = a;
    var G__7500_7503 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__7499_7502, G__7500_7503);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var G__7505 = arguments.length;
  switch(G__7505) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, function() {
      var G__7506 = x;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__7506) : keyfn.call(null, G__7506);
    }(), function() {
      var G__7507 = y;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__7507) : keyfn.call(null, G__7507);
    }());
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var G__7510 = arguments.length;
  switch(G__7510) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4420__auto__ = cljs.core.seq(coll);
  if (temp__4420__auto__) {
    var s = temp__4420__auto__;
    var G__7511 = f;
    var G__7512 = cljs.core.first(s);
    var G__7513 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__7511, G__7512, G__7513) : cljs.core.reduce.call(null, G__7511, G__7512, G__7513);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__7514 = val__$1;
        var G__7515 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7514, G__7515) : f.call(null, G__7514, G__7515);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__7517 = nval;
        var G__7518 = cljs.core.next(coll__$1);
        val__$1 = G__7517;
        coll__$1 = G__7518;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__7522 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__7522) : cljs.core.to_array.call(null, G__7522);
  }();
  var G__7523_7525 = a;
  goog.array.shuffle(G__7523_7525);
  var G__7524 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__7524) : cljs.core.vec.call(null, G__7524);
};
cljs.core.reduce = function cljs$core$reduce() {
  var G__7527 = arguments.length;
  switch(G__7527) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (function() {
    var G__7528 = coll;
    if (G__7528) {
      var bit__4882__auto__ = G__7528.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4882__auto__ || G__7528.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (function() {
    var G__7529 = coll;
    if (G__7529) {
      var bit__4882__auto__ = G__7529.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4882__auto__ || G__7529.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var G__7532 = arguments.length;
  switch(G__7532) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__7537 = null;
    var G__7537__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__7537__1 = function(x) {
      var G__7533 = x;
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__7533) : cf.call(null, G__7533);
    };
    var G__7537__2 = function(x, y) {
      var G__7534 = x;
      var G__7535 = y;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7534, G__7535) : f.call(null, G__7534, G__7535);
    };
    G__7537 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__7537__0.call(this);
        case 1:
          return G__7537__1.call(this, x);
        case 2:
          return G__7537__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7537.cljs$core$IFn$_invoke$arity$0 = G__7537__0;
    G__7537.cljs$core$IFn$_invoke$arity$1 = G__7537__1;
    G__7537.cljs$core$IFn$_invoke$arity$2 = G__7537__2;
    return G__7537;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var G__7539 = arguments.length;
  switch(G__7539) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }(), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = function() {
    var G__7540 = f;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__7540) : xform.call(null, G__7540);
  }();
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  var G__7541 = ret;
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__7541) : f__$1.call(null, G__7541);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var G__7547 = arguments.length;
  switch(G__7547) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq7543) {
  var G__7544 = cljs.core.first(seq7543);
  var seq7543__$1 = cljs.core.next(seq7543);
  var G__7545 = cljs.core.first(seq7543__$1);
  var seq7543__$2 = cljs.core.next(seq7543__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__7544, G__7545, seq7543__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var G__7553 = arguments.length;
  switch(G__7553) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq7549) {
  var G__7550 = cljs.core.first(seq7549);
  var seq7549__$1 = cljs.core.next(seq7549);
  var G__7551 = cljs.core.first(seq7549__$1);
  var seq7549__$2 = cljs.core.next(seq7549__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__7550, G__7551, seq7549__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var G__7559 = arguments.length;
  switch(G__7559) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq7555) {
  var G__7556 = cljs.core.first(seq7555);
  var seq7555__$1 = cljs.core.next(seq7555);
  var G__7557 = cljs.core.first(seq7555__$1);
  var seq7555__$2 = cljs.core.next(seq7555__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__7556, G__7557, seq7555__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var G__7565 = arguments.length;
  switch(G__7565) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq7561) {
  var G__7562 = cljs.core.first(seq7561);
  var seq7561__$1 = cljs.core.next(seq7561);
  var G__7563 = cljs.core.first(seq7561__$1);
  var seq7561__$2 = cljs.core.next(seq7561__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__7562, G__7563, seq7561__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var G__7571 = arguments.length;
  switch(G__7571) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__7573 = y;
        var G__7574 = cljs.core.first(more);
        var G__7575 = cljs.core.next(more);
        x = G__7573;
        y = G__7574;
        more = G__7575;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq7567) {
  var G__7568 = cljs.core.first(seq7567);
  var seq7567__$1 = cljs.core.next(seq7567);
  var G__7569 = cljs.core.first(seq7567__$1);
  var seq7567__$2 = cljs.core.next(seq7567__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__7568, G__7569, seq7567__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var G__7580 = arguments.length;
  switch(G__7580) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__7582 = y;
        var G__7583 = cljs.core.first(more);
        var G__7584 = cljs.core.next(more);
        x = G__7582;
        y = G__7583;
        more = G__7584;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq7576) {
  var G__7577 = cljs.core.first(seq7576);
  var seq7576__$1 = cljs.core.next(seq7576);
  var G__7578 = cljs.core.first(seq7576__$1);
  var seq7576__$2 = cljs.core.next(seq7576__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7577, G__7578, seq7576__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var G__7589 = arguments.length;
  switch(G__7589) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__7591 = y;
        var G__7592 = cljs.core.first(more);
        var G__7593 = cljs.core.next(more);
        x = G__7591;
        y = G__7592;
        more = G__7593;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq7585) {
  var G__7586 = cljs.core.first(seq7585);
  var seq7585__$1 = cljs.core.next(seq7585);
  var G__7587 = cljs.core.first(seq7585__$1);
  var seq7585__$2 = cljs.core.next(seq7585__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__7586, G__7587, seq7585__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var G__7598 = arguments.length;
  switch(G__7598) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__7600 = y;
        var G__7601 = cljs.core.first(more);
        var G__7602 = cljs.core.next(more);
        x = G__7600;
        y = G__7601;
        more = G__7602;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq7594) {
  var G__7595 = cljs.core.first(seq7594);
  var seq7594__$1 = cljs.core.next(seq7594);
  var G__7596 = cljs.core.first(seq7594__$1);
  var seq7594__$2 = cljs.core.next(seq7594__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7595, G__7596, seq7594__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var G__7607 = arguments.length;
  switch(G__7607) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4527__auto__ = x;
  var y__4528__auto__ = y;
  return x__4527__auto__ > y__4528__auto__ ? x__4527__auto__ : y__4528__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4527__auto__ = x;
    var y__4528__auto__ = y;
    return x__4527__auto__ > y__4528__auto__ ? x__4527__auto__ : y__4528__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq7603) {
  var G__7604 = cljs.core.first(seq7603);
  var seq7603__$1 = cljs.core.next(seq7603);
  var G__7605 = cljs.core.first(seq7603__$1);
  var seq7603__$2 = cljs.core.next(seq7603__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__7604, G__7605, seq7603__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var G__7613 = arguments.length;
  switch(G__7613) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4534__auto__ = x;
  var y__4535__auto__ = y;
  return x__4534__auto__ < y__4535__auto__ ? x__4534__auto__ : y__4535__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4534__auto__ = x;
    var y__4535__auto__ = y;
    return x__4534__auto__ < y__4535__auto__ ? x__4534__auto__ : y__4535__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq7609) {
  var G__7610 = cljs.core.first(seq7609);
  var seq7609__$1 = cljs.core.next(seq7609);
  var G__7611 = cljs.core.first(seq7609__$1);
  var seq7609__$2 = cljs.core.next(seq7609__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__7610, G__7611, seq7609__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var G__7619 = arguments.length;
  switch(G__7619) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq7615) {
  var G__7616 = cljs.core.first(seq7615);
  var seq7615__$1 = cljs.core.next(seq7615);
  var G__7617 = cljs.core.first(seq7615__$1);
  var seq7615__$2 = cljs.core.next(seq7615__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__7616, G__7617, seq7615__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var G__7625 = arguments.length;
  switch(G__7625) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq7621) {
  var G__7622 = cljs.core.first(seq7621);
  var seq7621__$1 = cljs.core.next(seq7621);
  var G__7623 = cljs.core.first(seq7621__$1);
  var seq7621__$2 = cljs.core.next(seq7621__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__7622, G__7623, seq7621__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var G__7631 = arguments.length;
  switch(G__7631) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq7627) {
  var G__7628 = cljs.core.first(seq7627);
  var seq7627__$1 = cljs.core.next(seq7627);
  var G__7629 = cljs.core.first(seq7627__$1);
  var seq7627__$2 = cljs.core.next(seq7627__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__7628, G__7629, seq7627__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var G__7637 = arguments.length;
  switch(G__7637) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq7633) {
  var G__7634 = cljs.core.first(seq7633);
  var seq7633__$1 = cljs.core.next(seq7633);
  var G__7635 = cljs.core.first(seq7633__$1);
  var seq7633__$2 = cljs.core.next(seq7633__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__7634, G__7635, seq7633__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var G__7643 = arguments.length;
  switch(G__7643) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq7639) {
  var G__7640 = cljs.core.first(seq7639);
  var seq7639__$1 = cljs.core.next(seq7639);
  var G__7641 = cljs.core.first(seq7639__$1);
  var seq7639__$2 = cljs.core.next(seq7639__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__7640, G__7641, seq7639__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__7647 = x;
  var G__7648 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__7647, G__7648) : cljs.core.mod.call(null, G__7647, G__7648);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var G__7653 = arguments.length;
  switch(G__7653) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq7649) {
  var G__7650 = cljs.core.first(seq7649);
  var seq7649__$1 = cljs.core.next(seq7649);
  var G__7651 = cljs.core.first(seq7649__$1);
  var seq7649__$2 = cljs.core.next(seq7649__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__7650, G__7651, seq7649__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var G__7659 = arguments.length;
  switch(G__7659) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq7655) {
  var G__7656 = cljs.core.first(seq7655);
  var seq7655__$1 = cljs.core.next(seq7655);
  var G__7657 = cljs.core.first(seq7655__$1);
  var seq7655__$2 = cljs.core.next(seq7655__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__7656, G__7657, seq7655__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__7663 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__7663) : Math.floor.call(null, G__7663);
  } else {
    var G__7664 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__7664) : Math.ceil.call(null, G__7664);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var G__7669 = arguments.length;
  switch(G__7669) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq7665) {
  var G__7666 = cljs.core.first(seq7665);
  var seq7665__$1 = cljs.core.next(seq7665);
  var G__7667 = cljs.core.first(seq7665__$1);
  var seq7665__$2 = cljs.core.next(seq7665__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__7666, G__7667, seq7665__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var G__7675 = arguments.length;
  switch(G__7675) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq7671) {
  var G__7672 = cljs.core.first(seq7671);
  var seq7671__$1 = cljs.core.next(seq7671);
  var G__7673 = cljs.core.first(seq7671__$1);
  var seq7671__$2 = cljs.core.next(seq7671__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__7672, G__7673, seq7671__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var G__7681 = arguments.length;
  switch(G__7681) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq7677) {
  var G__7678 = cljs.core.first(seq7677);
  var seq7677__$1 = cljs.core.next(seq7677);
  var G__7679 = cljs.core.first(seq7677__$1);
  var seq7677__$2 = cljs.core.next(seq7677__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__7678, G__7679, seq7677__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var G__7687 = arguments.length;
  switch(G__7687) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq7683) {
  var G__7684 = cljs.core.first(seq7683);
  var seq7683__$1 = cljs.core.next(seq7683);
  var G__7685 = cljs.core.first(seq7683__$1);
  var seq7683__$2 = cljs.core.next(seq7683__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__7684, G__7685, seq7683__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var G__7693 = arguments.length;
  switch(G__7693) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__7695 = y;
        var G__7696 = cljs.core.first(more);
        var G__7697 = cljs.core.next(more);
        x = G__7695;
        y = G__7696;
        more = G__7697;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq7689) {
  var G__7690 = cljs.core.first(seq7689);
  var seq7689__$1 = cljs.core.next(seq7689);
  var G__7691 = cljs.core.first(seq7689__$1);
  var seq7689__$2 = cljs.core.next(seq7689__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7690, G__7691, seq7689__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7698 = n__$1 - 1;
      var G__7699 = cljs.core.next(xs);
      n__$1 = G__7698;
      xs = G__7699;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var G__7703 = arguments.length;
  switch(G__7703) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5266__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    var G__7704 = x;
    return goog.string.buildString(G__7704);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__7706 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__7707 = cljs.core.next(more);
      sb = G__7706;
      more = G__7707;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq7700) {
  var G__7701 = cljs.core.first(seq7700);
  var seq7700__$1 = cljs.core.next(seq7700);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__7701, seq7700__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var G__7709 = arguments.length;
  switch(G__7709) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__7711 = cljs.core.next(xs);
            var G__7712 = cljs.core.next(ys);
            xs = G__7711;
            ys = G__7712;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7713 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__7714 = cljs.core.next(s);
        res = G__7713;
        s = G__7714;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__7719 = (h + (cljs.core.hash(function() {
        var G__7717 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__7717) : cljs.core.key.call(null, G__7717);
      }()) ^ cljs.core.hash(function() {
        var G__7718 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__7718) : cljs.core.val.call(null, G__7718);
      }()))) % 4503599627370496;
      var G__7720 = cljs.core.next(s);
      h = G__7719;
      s = G__7720;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__7721 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__7722 = cljs.core.next(s__$1);
      h = G__7721;
      s__$1 = G__7722;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__7733_7743 = cljs.core.seq(fn_map);
  var chunk__7734_7744 = null;
  var count__7735_7745 = 0;
  var i__7736_7746 = 0;
  while (true) {
    if (i__7736_7746 < count__7735_7745) {
      var vec__7737_7747 = chunk__7734_7744.cljs$core$IIndexed$_nth$arity$2(null, i__7736_7746);
      var key_name_7748 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7737_7747, 0, null);
      var f_7749 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7737_7747, 1, null);
      var str_name_7750 = function() {
        var G__7738 = key_name_7748;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7738) : cljs.core.name.call(null, G__7738);
      }();
      obj[str_name_7750] = f_7749;
      var G__7751 = seq__7733_7743;
      var G__7752 = chunk__7734_7744;
      var G__7753 = count__7735_7745;
      var G__7754 = i__7736_7746 + 1;
      seq__7733_7743 = G__7751;
      chunk__7734_7744 = G__7752;
      count__7735_7745 = G__7753;
      i__7736_7746 = G__7754;
      continue;
    } else {
      var temp__4422__auto___7755 = cljs.core.seq(seq__7733_7743);
      if (temp__4422__auto___7755) {
        var seq__7733_7756__$1 = temp__4422__auto___7755;
        if (cljs.core.chunked_seq_QMARK_(seq__7733_7756__$1)) {
          var c__5000__auto___7757 = function() {
            var G__7739 = seq__7733_7756__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__7739) : cljs.core.chunk_first.call(null, G__7739);
          }();
          var G__7758 = function() {
            var G__7740 = seq__7733_7756__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__7740) : cljs.core.chunk_rest.call(null, G__7740);
          }();
          var G__7759 = c__5000__auto___7757;
          var G__7760 = cljs.core.count(c__5000__auto___7757);
          var G__7761 = 0;
          seq__7733_7743 = G__7758;
          chunk__7734_7744 = G__7759;
          count__7735_7745 = G__7760;
          i__7736_7746 = G__7761;
          continue;
        } else {
          var vec__7741_7762 = cljs.core.first(seq__7733_7756__$1);
          var key_name_7763 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7741_7762, 0, null);
          var f_7764 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7741_7762, 1, null);
          var str_name_7765 = function() {
            var G__7742 = key_name_7763;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7742) : cljs.core.name.call(null, G__7742);
          }();
          obj[str_name_7765] = f_7764;
          var G__7766 = cljs.core.next(seq__7733_7756__$1);
          var G__7767 = null;
          var G__7768 = 0;
          var G__7769 = 0;
          seq__7733_7743 = G__7766;
          chunk__7734_7744 = G__7767;
          count__7735_7745 = G__7768;
          i__7736_7746 = G__7769;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__7771 = coll;
  if (G__7771) {
    var bit__4889__auto__ = G__7771.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4889__auto__ || G__7771.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__7771.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7771);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7771);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__7773 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__7773;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__7774 = i - 1;
      var G__7775 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__7774;
      r = G__7775;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq7772) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7772));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4215__auto__ = coll == null;
    if (or__4215__auto__) {
      return or__4215__auto__;
    } else {
      var G__7779 = coll;
      if (G__7779) {
        var bit__4882__auto__ = G__7779.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4882__auto__ || G__7779.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__7781 = x;
  if (G__7781) {
    var bit__4889__auto__ = G__7781.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4889__auto__ || G__7781.cljs$core$IList$) {
      return true;
    } else {
      if (!G__7781.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7781);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7781);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = cljs.core.not(a.ns);
      if (and__4203__auto__) {
        return b.ns;
      } else {
        return and__4203__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7788 = a.ns;
            var G__7789 = b.ns;
            return goog.array.defaultCompare(G__7788, G__7789);
          }();
          if (0 === nsc) {
            var G__7790 = a.name;
            var G__7791 = b.name;
            return goog.array.defaultCompare(G__7790, G__7791);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7792 = a.name;
        var G__7793 = b.name;
        return goog.array.defaultCompare(G__7792, G__7793);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7795 = null;
  var G__7795__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__7795__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__7795 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7795__2.call(this, self__, coll);
      case 3:
        return G__7795__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7795.cljs$core$IFn$_invoke$arity$2 = G__7795__2;
  G__7795.cljs$core$IFn$_invoke$arity$3 = G__7795__3;
  return G__7795;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7794) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7794)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4631__auto__ = self__._hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__7797 = x;
    if (G__7797) {
      var bit__4882__auto__ = G__7797.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4882__auto__ || G__7797.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var G__7799 = arguments.length;
  switch(G__7799) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), function() {
        var G__7800 = name;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7800) : cljs.core.name.call(null, G__7800);
      }(), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7802 = ls.sval();
        ls = G__7802;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var G__7804 = arguments.length;
  switch(G__7804) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__7807 = s;
    if (G__7807) {
      var bit__4882__auto__ = G__7807.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4882__auto__ || G__7807.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__7808 = cljs.core.next(s__$1);
      s__$1 = G__7808;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_7809 = 0;
  var xs_7810 = cljs.core.seq(coll);
  while (true) {
    if (xs_7810) {
      ret[i_7809] = cljs.core.to_array(cljs.core.first(xs_7810));
      var G__7811 = i_7809 + 1;
      var G__7812 = cljs.core.next(xs_7810);
      i_7809 = G__7811;
      xs_7810 = G__7812;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var G__7814 = arguments.length;
  switch(G__7814) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7816 = i + 1;
        var G__7817 = cljs.core.next(s__$1);
        i = G__7816;
        s__$1 = G__7817;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5100__auto___7818 = size;
    var i_7819 = 0;
    while (true) {
      if (i_7819 < n__5100__auto___7818) {
        a[i_7819] = init_val_or_seq;
        var G__7820 = i_7819 + 1;
        i_7819 = G__7820;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var G__7822 = arguments.length;
  switch(G__7822) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7824 = i + 1;
        var G__7825 = cljs.core.next(s__$1);
        i = G__7824;
        s__$1 = G__7825;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5100__auto___7826 = size;
    var i_7827 = 0;
    while (true) {
      if (i_7827 < n__5100__auto___7826) {
        a[i_7827] = init_val_or_seq;
        var G__7828 = i_7827 + 1;
        i_7827 = G__7828;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var G__7830 = arguments.length;
  switch(G__7830) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7832 = i + 1;
        var G__7833 = cljs.core.next(s__$1);
        i = G__7832;
        s__$1 = G__7833;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5100__auto___7834 = size;
    var i_7835 = 0;
    while (true) {
      if (i_7835 < n__5100__auto___7834) {
        a[i_7835] = init_val_or_seq;
        var G__7836 = i_7835 + 1;
        i_7835 = G__7836;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var G__7838 = arguments.length;
  switch(G__7838) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7840 = i + 1;
        var G__7841 = cljs.core.next(s__$1);
        i = G__7840;
        s__$1 = G__7841;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5100__auto___7842 = size;
    var i_7843 = 0;
    while (true) {
      if (i_7843 < n__5100__auto___7842) {
        a[i_7843] = init_val_or_seq;
        var G__7844 = i_7843 + 1;
        i_7843 = G__7844;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__7845 = cljs.core.next(s__$1);
        var G__7846 = i - 1;
        var G__7847 = sum + 1;
        s__$1 = G__7845;
        i = G__7846;
        sum = G__7847;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var G__7853 = arguments.length;
  switch(G__7853) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq7849) {
  var G__7850 = cljs.core.first(seq7849);
  var seq7849__$1 = cljs.core.next(seq7849);
  var G__7851 = cljs.core.first(seq7849__$1);
  var seq7849__$2 = cljs.core.next(seq7849__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__7850, G__7851, seq7849__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var G__7867 = arguments.length;
  switch(G__7867) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5266__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq7861) {
  var G__7862 = cljs.core.first(seq7861);
  var seq7861__$1 = cljs.core.next(seq7861);
  var G__7863 = cljs.core.first(seq7861__$1);
  var seq7861__$2 = cljs.core.next(seq7861__$1);
  var G__7864 = cljs.core.first(seq7861__$2);
  var seq7861__$3 = cljs.core.next(seq7861__$2);
  var G__7865 = cljs.core.first(seq7861__$3);
  var seq7861__$4 = cljs.core.next(seq7861__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__7862, G__7863, G__7864, G__7865, seq7861__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var G__7873 = arguments.length;
  switch(G__7873) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__7875 = ntcoll;
      var G__7876 = cljs.core.first(vals);
      var G__7877 = cljs.core.next(vals);
      tcoll = G__7875;
      val = G__7876;
      vals = G__7877;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq7869) {
  var G__7870 = cljs.core.first(seq7869);
  var seq7869__$1 = cljs.core.next(seq7869);
  var G__7871 = cljs.core.first(seq7869__$1);
  var seq7869__$2 = cljs.core.next(seq7869__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7870, G__7871, seq7869__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var G__7883 = arguments.length;
  switch(G__7883) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__7885 = ntcoll;
      var G__7886 = cljs.core.first(kvs);
      var G__7887 = cljs.core.second(kvs);
      var G__7888 = cljs.core.nnext(kvs);
      tcoll = G__7885;
      key = G__7886;
      val = G__7887;
      kvs = G__7888;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq7878) {
  var G__7879 = cljs.core.first(seq7878);
  var seq7878__$1 = cljs.core.next(seq7878);
  var G__7880 = cljs.core.first(seq7878__$1);
  var seq7878__$2 = cljs.core.next(seq7878__$1);
  var G__7881 = cljs.core.first(seq7878__$2);
  var seq7878__$3 = cljs.core.next(seq7878__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7879, G__7880, G__7881, seq7878__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var G__7893 = arguments.length;
  switch(G__7893) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__7895 = ntcoll;
      var G__7896 = cljs.core.first(ks);
      var G__7897 = cljs.core.next(ks);
      tcoll = G__7895;
      key = G__7896;
      ks = G__7897;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq7889) {
  var G__7890 = cljs.core.first(seq7889);
  var seq7889__$1 = cljs.core.next(seq7889);
  var G__7891 = cljs.core.first(seq7889__$1);
  var seq7889__$2 = cljs.core.next(seq7889__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7890, G__7891, seq7889__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var G__7902 = arguments.length;
  switch(G__7902) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__7904 = ntcoll;
      var G__7905 = cljs.core.first(vals);
      var G__7906 = cljs.core.next(vals);
      tcoll = G__7904;
      val = G__7905;
      vals = G__7906;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq7898) {
  var G__7899 = cljs.core.first(seq7898);
  var seq7898__$1 = cljs.core.next(seq7898);
  var G__7900 = cljs.core.first(seq7898__$1);
  var seq7898__$2 = cljs.core.next(seq7898__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7899, G__7900, seq7898__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5144 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5144);
      } else {
        var G__8117 = a5144;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8117) : f.call(null, G__8117);
      }
    } else {
      var b5145 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5144, b5145);
        } else {
          var G__8118 = a5144;
          var G__8119 = b5145;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8118, G__8119) : f.call(null, G__8118, G__8119);
        }
      } else {
        var c5146 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5144, b5145, c5146);
          } else {
            var G__8120 = a5144;
            var G__8121 = b5145;
            var G__8122 = c5146;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8120, G__8121, G__8122) : f.call(null, G__8120, G__8121, G__8122);
          }
        } else {
          var d5147 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5144, b5145, c5146, d5147);
            } else {
              var G__8123 = a5144;
              var G__8124 = b5145;
              var G__8125 = c5146;
              var G__8126 = d5147;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8123, G__8124, G__8125, G__8126) : f.call(null, G__8123, G__8124, G__8125, G__8126);
            }
          } else {
            var e5148 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5144, b5145, c5146, d5147, e5148);
              } else {
                var G__8127 = a5144;
                var G__8128 = b5145;
                var G__8129 = c5146;
                var G__8130 = d5147;
                var G__8131 = e5148;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8127, G__8128, G__8129, G__8130, G__8131) : f.call(null, G__8127, G__8128, G__8129, G__8130, G__8131);
              }
            } else {
              var f5149 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5144, b5145, c5146, d5147, e5148, f5149);
                } else {
                  var G__8132 = a5144;
                  var G__8133 = b5145;
                  var G__8134 = c5146;
                  var G__8135 = d5147;
                  var G__8136 = e5148;
                  var G__8137 = f5149;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__8132, G__8133, G__8134, G__8135, G__8136, G__8137) : f.call(null, G__8132, G__8133, G__8134, G__8135, G__8136, G__8137);
                }
              } else {
                var g5150 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5144, b5145, c5146, d5147, e5148, f5149, g5150);
                  } else {
                    var G__8138 = a5144;
                    var G__8139 = b5145;
                    var G__8140 = c5146;
                    var G__8141 = d5147;
                    var G__8142 = e5148;
                    var G__8143 = f5149;
                    var G__8144 = g5150;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__8138, G__8139, G__8140, G__8141, G__8142, G__8143, G__8144) : f.call(null, G__8138, G__8139, G__8140, G__8141, G__8142, G__8143, G__8144);
                  }
                } else {
                  var h5151 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151);
                    } else {
                      var G__8145 = a5144;
                      var G__8146 = b5145;
                      var G__8147 = c5146;
                      var G__8148 = d5147;
                      var G__8149 = e5148;
                      var G__8150 = f5149;
                      var G__8151 = g5150;
                      var G__8152 = h5151;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__8145, G__8146, G__8147, G__8148, G__8149, G__8150, G__8151, G__8152) : f.call(null, G__8145, G__8146, G__8147, G__8148, G__8149, G__8150, G__8151, G__8152);
                    }
                  } else {
                    var i5152 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152);
                      } else {
                        var G__8153 = a5144;
                        var G__8154 = b5145;
                        var G__8155 = c5146;
                        var G__8156 = d5147;
                        var G__8157 = e5148;
                        var G__8158 = f5149;
                        var G__8159 = g5150;
                        var G__8160 = h5151;
                        var G__8161 = i5152;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__8153, G__8154, G__8155, G__8156, G__8157, G__8158, G__8159, G__8160, G__8161) : f.call(null, G__8153, G__8154, G__8155, G__8156, G__8157, G__8158, G__8159, G__8160, G__8161);
                      }
                    } else {
                      var j5153 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153);
                        } else {
                          var G__8162 = a5144;
                          var G__8163 = b5145;
                          var G__8164 = c5146;
                          var G__8165 = d5147;
                          var G__8166 = e5148;
                          var G__8167 = f5149;
                          var G__8168 = g5150;
                          var G__8169 = h5151;
                          var G__8170 = i5152;
                          var G__8171 = j5153;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__8162, G__8163, G__8164, G__8165, G__8166, G__8167, G__8168, G__8169, G__8170, G__8171) : f.call(null, G__8162, G__8163, G__8164, G__8165, G__8166, G__8167, G__8168, G__8169, G__8170, G__8171);
                        }
                      } else {
                        var k5154 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154);
                          } else {
                            var G__8172 = a5144;
                            var G__8173 = b5145;
                            var G__8174 = c5146;
                            var G__8175 = d5147;
                            var G__8176 = e5148;
                            var G__8177 = f5149;
                            var G__8178 = g5150;
                            var G__8179 = h5151;
                            var G__8180 = i5152;
                            var G__8181 = j5153;
                            var G__8182 = k5154;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__8172, G__8173, G__8174, G__8175, G__8176, G__8177, G__8178, G__8179, G__8180, G__8181, G__8182) : f.call(null, G__8172, G__8173, G__8174, G__8175, G__8176, G__8177, G__8178, G__8179, G__8180, G__8181, G__8182);
                          }
                        } else {
                          var l5155 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155);
                            } else {
                              var G__8183 = a5144;
                              var G__8184 = b5145;
                              var G__8185 = c5146;
                              var G__8186 = d5147;
                              var G__8187 = e5148;
                              var G__8188 = f5149;
                              var G__8189 = g5150;
                              var G__8190 = h5151;
                              var G__8191 = i5152;
                              var G__8192 = j5153;
                              var G__8193 = k5154;
                              var G__8194 = l5155;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__8183, G__8184, G__8185, G__8186, G__8187, G__8188, G__8189, G__8190, G__8191, G__8192, G__8193, G__8194) : f.call(null, G__8183, G__8184, G__8185, G__8186, G__8187, G__8188, G__8189, G__8190, G__8191, G__8192, G__8193, G__8194);
                            }
                          } else {
                            var m5156 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156);
                              } else {
                                var G__8195 = a5144;
                                var G__8196 = b5145;
                                var G__8197 = c5146;
                                var G__8198 = d5147;
                                var G__8199 = e5148;
                                var G__8200 = f5149;
                                var G__8201 = g5150;
                                var G__8202 = h5151;
                                var G__8203 = i5152;
                                var G__8204 = j5153;
                                var G__8205 = k5154;
                                var G__8206 = l5155;
                                var G__8207 = m5156;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__8195, G__8196, G__8197, G__8198, G__8199, G__8200, G__8201, G__8202, G__8203, G__8204, G__8205, G__8206, G__8207) : f.call(null, G__8195, G__8196, G__8197, G__8198, G__8199, G__8200, G__8201, G__8202, G__8203, G__8204, G__8205, G__8206, G__8207);
                              }
                            } else {
                              var n5157 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156, n5157);
                                } else {
                                  var G__8208 = a5144;
                                  var G__8209 = b5145;
                                  var G__8210 = c5146;
                                  var G__8211 = d5147;
                                  var G__8212 = e5148;
                                  var G__8213 = f5149;
                                  var G__8214 = g5150;
                                  var G__8215 = h5151;
                                  var G__8216 = i5152;
                                  var G__8217 = j5153;
                                  var G__8218 = k5154;
                                  var G__8219 = l5155;
                                  var G__8220 = m5156;
                                  var G__8221 = n5157;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__8208, G__8209, G__8210, G__8211, G__8212, G__8213, G__8214, G__8215, G__8216, G__8217, G__8218, G__8219, G__8220, G__8221) : f.call(null, G__8208, G__8209, G__8210, G__8211, G__8212, G__8213, G__8214, G__8215, G__8216, G__8217, G__8218, G__8219, G__8220, G__8221);
                                }
                              } else {
                                var o5158 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156, n5157, o5158);
                                  } else {
                                    var G__8222 = a5144;
                                    var G__8223 = b5145;
                                    var G__8224 = c5146;
                                    var G__8225 = d5147;
                                    var G__8226 = e5148;
                                    var G__8227 = f5149;
                                    var G__8228 = g5150;
                                    var G__8229 = h5151;
                                    var G__8230 = i5152;
                                    var G__8231 = j5153;
                                    var G__8232 = k5154;
                                    var G__8233 = l5155;
                                    var G__8234 = m5156;
                                    var G__8235 = n5157;
                                    var G__8236 = o5158;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__8222, G__8223, G__8224, G__8225, G__8226, G__8227, G__8228, G__8229, G__8230, G__8231, G__8232, G__8233, G__8234, G__8235, G__8236) : f.call(null, G__8222, G__8223, G__8224, G__8225, G__8226, G__8227, G__8228, G__8229, G__8230, G__8231, G__8232, G__8233, G__8234, G__8235, G__8236);
                                  }
                                } else {
                                  var p5159 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156, n5157, o5158, p5159);
                                    } else {
                                      var G__8237 = a5144;
                                      var G__8238 = b5145;
                                      var G__8239 = c5146;
                                      var G__8240 = d5147;
                                      var G__8241 = e5148;
                                      var G__8242 = f5149;
                                      var G__8243 = g5150;
                                      var G__8244 = h5151;
                                      var G__8245 = i5152;
                                      var G__8246 = j5153;
                                      var G__8247 = k5154;
                                      var G__8248 = l5155;
                                      var G__8249 = m5156;
                                      var G__8250 = n5157;
                                      var G__8251 = o5158;
                                      var G__8252 = p5159;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__8237, G__8238, G__8239, G__8240, G__8241, G__8242, G__8243, G__8244, G__8245, G__8246, G__8247, G__8248, G__8249, G__8250, G__8251, G__8252) : f.call(null, G__8237, G__8238, G__8239, G__8240, G__8241, G__8242, G__8243, G__8244, G__8245, G__8246, G__8247, G__8248, G__8249, G__8250, G__8251, G__8252);
                                    }
                                  } else {
                                    var q5160 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156, n5157, o5158, p5159, q5160);
                                      } else {
                                        var G__8253 = a5144;
                                        var G__8254 = b5145;
                                        var G__8255 = c5146;
                                        var G__8256 = d5147;
                                        var G__8257 = e5148;
                                        var G__8258 = f5149;
                                        var G__8259 = g5150;
                                        var G__8260 = h5151;
                                        var G__8261 = i5152;
                                        var G__8262 = j5153;
                                        var G__8263 = k5154;
                                        var G__8264 = l5155;
                                        var G__8265 = m5156;
                                        var G__8266 = n5157;
                                        var G__8267 = o5158;
                                        var G__8268 = p5159;
                                        var G__8269 = q5160;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__8253, G__8254, G__8255, G__8256, G__8257, G__8258, G__8259, G__8260, G__8261, G__8262, G__8263, G__8264, G__8265, G__8266, G__8267, G__8268, G__8269) : f.call(null, G__8253, G__8254, G__8255, G__8256, G__8257, G__8258, G__8259, G__8260, G__8261, G__8262, G__8263, G__8264, G__8265, G__8266, G__8267, G__8268, G__8269);
                                      }
                                    } else {
                                      var r5161 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156, n5157, o5158, p5159, q5160, r5161);
                                        } else {
                                          var G__8270 = a5144;
                                          var G__8271 = b5145;
                                          var G__8272 = c5146;
                                          var G__8273 = d5147;
                                          var G__8274 = e5148;
                                          var G__8275 = f5149;
                                          var G__8276 = g5150;
                                          var G__8277 = h5151;
                                          var G__8278 = i5152;
                                          var G__8279 = j5153;
                                          var G__8280 = k5154;
                                          var G__8281 = l5155;
                                          var G__8282 = m5156;
                                          var G__8283 = n5157;
                                          var G__8284 = o5158;
                                          var G__8285 = p5159;
                                          var G__8286 = q5160;
                                          var G__8287 = r5161;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__8270, G__8271, G__8272, G__8273, G__8274, G__8275, G__8276, G__8277, G__8278, G__8279, G__8280, G__8281, G__8282, G__8283, G__8284, G__8285, G__8286, G__8287) : f.call(null, G__8270, G__8271, G__8272, G__8273, G__8274, G__8275, G__8276, G__8277, G__8278, G__8279, G__8280, G__8281, G__8282, G__8283, G__8284, G__8285, G__8286, G__8287);
                                        }
                                      } else {
                                        var s5162 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156, n5157, o5158, p5159, q5160, r5161, s5162);
                                          } else {
                                            var G__8288 = a5144;
                                            var G__8289 = b5145;
                                            var G__8290 = c5146;
                                            var G__8291 = d5147;
                                            var G__8292 = e5148;
                                            var G__8293 = f5149;
                                            var G__8294 = g5150;
                                            var G__8295 = h5151;
                                            var G__8296 = i5152;
                                            var G__8297 = j5153;
                                            var G__8298 = k5154;
                                            var G__8299 = l5155;
                                            var G__8300 = m5156;
                                            var G__8301 = n5157;
                                            var G__8302 = o5158;
                                            var G__8303 = p5159;
                                            var G__8304 = q5160;
                                            var G__8305 = r5161;
                                            var G__8306 = s5162;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__8288, G__8289, G__8290, G__8291, G__8292, G__8293, G__8294, G__8295, G__8296, G__8297, G__8298, G__8299, G__8300, G__8301, G__8302, G__8303, G__8304, G__8305, G__8306) : f.call(null, G__8288, G__8289, G__8290, G__8291, G__8292, G__8293, G__8294, G__8295, G__8296, G__8297, G__8298, G__8299, G__8300, G__8301, G__8302, G__8303, G__8304, G__8305, G__8306);
                                          }
                                        } else {
                                          var t5163 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5144, b5145, c5146, d5147, e5148, f5149, g5150, h5151, i5152, j5153, k5154, l5155, m5156, n5157, o5158, p5159, q5160, r5161, s5162, t5163);
                                            } else {
                                              var G__8307 = a5144;
                                              var G__8308 = b5145;
                                              var G__8309 = c5146;
                                              var G__8310 = d5147;
                                              var G__8311 = e5148;
                                              var G__8312 = f5149;
                                              var G__8313 = g5150;
                                              var G__8314 = h5151;
                                              var G__8315 = i5152;
                                              var G__8316 = j5153;
                                              var G__8317 = k5154;
                                              var G__8318 = l5155;
                                              var G__8319 = m5156;
                                              var G__8320 = n5157;
                                              var G__8321 = o5158;
                                              var G__8322 = p5159;
                                              var G__8323 = q5160;
                                              var G__8324 = r5161;
                                              var G__8325 = s5162;
                                              var G__8326 = t5163;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__8307, G__8308, G__8309, G__8310, G__8311, G__8312, G__8313, G__8314, G__8315, G__8316, G__8317, G__8318, G__8319, G__8320, G__8321, G__8322, G__8323, G__8324, G__8325, G__8326) : f.call(null, G__8307, G__8308, G__8309, G__8310, G__8311, G__8312, G__8313, G__8314, G__8315, G__8316, G__8317, G__8318, G__8319, G__8320, G__8321, G__8322, G__8323, G__8324, G__8325, G__8326);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var G__8334 = arguments.length;
  switch(G__8334) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5266__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq8327) {
  var G__8328 = cljs.core.first(seq8327);
  var seq8327__$1 = cljs.core.next(seq8327);
  var G__8329 = cljs.core.first(seq8327__$1);
  var seq8327__$2 = cljs.core.next(seq8327__$1);
  var G__8330 = cljs.core.first(seq8327__$2);
  var seq8327__$3 = cljs.core.next(seq8327__$2);
  var G__8331 = cljs.core.first(seq8327__$3);
  var seq8327__$4 = cljs.core.next(seq8327__$3);
  var G__8332 = cljs.core.first(seq8327__$4);
  var seq8327__$5 = cljs.core.next(seq8327__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__8328, G__8329, G__8330, G__8331, G__8332, seq8327__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var G__8344 = arguments.length;
  switch(G__8344) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5266__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__8345 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8345) : f.call(null, G__8345);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__8346 = cljs.core.meta(obj);
    var G__8347 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8346, G__8347) : f.call(null, G__8346, G__8347);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__8348 = cljs.core.meta(obj);
    var G__8349 = a;
    var G__8350 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8348, G__8349, G__8350) : f.call(null, G__8348, G__8349, G__8350);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__8351 = cljs.core.meta(obj);
    var G__8352 = a;
    var G__8353 = b;
    var G__8354 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8351, G__8352, G__8353, G__8354) : f.call(null, G__8351, G__8352, G__8353, G__8354);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__8355 = cljs.core.meta(obj);
    var G__8356 = a;
    var G__8357 = b;
    var G__8358 = c;
    var G__8359 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8355, G__8356, G__8357, G__8358, G__8359) : f.call(null, G__8355, G__8356, G__8357, G__8358, G__8359);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq8336) {
  var G__8337 = cljs.core.first(seq8336);
  var seq8336__$1 = cljs.core.next(seq8336);
  var G__8338 = cljs.core.first(seq8336__$1);
  var seq8336__$2 = cljs.core.next(seq8336__$1);
  var G__8339 = cljs.core.first(seq8336__$2);
  var seq8336__$3 = cljs.core.next(seq8336__$2);
  var G__8340 = cljs.core.first(seq8336__$3);
  var seq8336__$4 = cljs.core.next(seq8336__$3);
  var G__8341 = cljs.core.first(seq8336__$4);
  var seq8336__$5 = cljs.core.next(seq8336__$4);
  var G__8342 = cljs.core.first(seq8336__$5);
  var seq8336__$6 = cljs.core.next(seq8336__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__8337, G__8338, G__8339, G__8340, G__8341, G__8342, seq8336__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var G__8365 = arguments.length;
  switch(G__8365) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq8361) {
  var G__8362 = cljs.core.first(seq8361);
  var seq8361__$1 = cljs.core.next(seq8361);
  var G__8363 = cljs.core.first(seq8361__$1);
  var seq8361__$2 = cljs.core.next(seq8361__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8362, G__8363, seq8361__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t8370 !== "undefined") {
  } else {
    cljs.core.t8370 = function(nil_iter, meta8371) {
      this.nil_iter = nil_iter;
      this.meta8371 = meta8371;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t8370.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8372, meta8371__$1) {
      var self__ = this;
      var _8372__$1 = this;
      return new cljs.core.t8370(self__.nil_iter, meta8371__$1);
    };
    cljs.core.t8370.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8372) {
      var self__ = this;
      var _8372__$1 = this;
      return self__.meta8371;
    };
    cljs.core.t8370.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t8370.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t8370.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t8370.cljs$lang$type = true;
    cljs.core.t8370.cljs$lang$ctorStr = "cljs.core/t8370";
    cljs.core.t8370.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write(writer__4795__auto__, "cljs.core/t8370");
    };
    cljs.core.__GT_t8370 = function cljs$core$nil_iter_$___GT_t8370(nil_iter__$1, meta8371) {
      return new cljs.core.t8370(nil_iter__$1, meta8371);
    };
  }
  return new cljs.core.t8370(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = !(lt.stepper == null);
      if (and__4203__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4203__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__8373 = lt;
        var G__8374 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__8373, G__8374) : self__.xform.call(null, G__8373, G__8374);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__8375 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__8375) : self__.xform.call(null, G__8375);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__8377 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__8377) : xform.call(null, G__8377);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__8379 = cljs.core.next(iters__$1);
        iters__$1 = G__8379;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5100__auto___8380 = self__.iters.length;
  var i_8381 = 0;
  while (true) {
    if (i_8381 < n__5100__auto___8380) {
      self__.nexts[i_8381] = self__.iters[i_8381].next();
      var G__8382 = i_8381 + 1;
      i_8381 = G__8382;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = !(lt.stepper == null);
      if (and__4203__auto__) {
        return this$.hasNext();
      } else {
        return and__4203__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__8378 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__8378) : self__.xform.call(null, G__8378);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var G__8384 = arguments.length;
  switch(G__8384) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(function() {
    var G__8385 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__8385) : xform.call(null, G__8385);
  }(), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__8387_8391 = cljs.core.seq(colls);
  var chunk__8388_8392 = null;
  var count__8389_8393 = 0;
  var i__8390_8394 = 0;
  while (true) {
    if (i__8390_8394 < count__8389_8393) {
      var coll_8395 = chunk__8388_8392.cljs$core$IIndexed$_nth$arity$2(null, i__8390_8394);
      iters.push(cljs.core.iter(coll_8395));
      var G__8396 = seq__8387_8391;
      var G__8397 = chunk__8388_8392;
      var G__8398 = count__8389_8393;
      var G__8399 = i__8390_8394 + 1;
      seq__8387_8391 = G__8396;
      chunk__8388_8392 = G__8397;
      count__8389_8393 = G__8398;
      i__8390_8394 = G__8399;
      continue;
    } else {
      var temp__4422__auto___8400 = cljs.core.seq(seq__8387_8391);
      if (temp__4422__auto___8400) {
        var seq__8387_8401__$1 = temp__4422__auto___8400;
        if (cljs.core.chunked_seq_QMARK_(seq__8387_8401__$1)) {
          var c__5000__auto___8402 = cljs.core.chunk_first(seq__8387_8401__$1);
          var G__8403 = cljs.core.chunk_rest(seq__8387_8401__$1);
          var G__8404 = c__5000__auto___8402;
          var G__8405 = cljs.core.count(c__5000__auto___8402);
          var G__8406 = 0;
          seq__8387_8391 = G__8403;
          chunk__8388_8392 = G__8404;
          count__8389_8393 = G__8405;
          i__8390_8394 = G__8406;
          continue;
        } else {
          var coll_8407 = cljs.core.first(seq__8387_8401__$1);
          iters.push(cljs.core.iter(coll_8407));
          var G__8408 = cljs.core.next(seq__8387_8401__$1);
          var G__8409 = null;
          var G__8410 = 0;
          var G__8411 = 0;
          seq__8387_8391 = G__8408;
          chunk__8388_8392 = G__8409;
          count__8389_8393 = G__8410;
          i__8390_8394 = G__8411;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var G__8416 = arguments.length;
  switch(G__8416) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4215__auto__ = cljs.core.seq(coll);
    if (or__4215__auto__) {
      return or__4215__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq8412) {
  var G__8413 = cljs.core.first(seq8412);
  var seq8412__$1 = cljs.core.next(seq8412);
  var G__8414 = cljs.core.first(seq8412__$1);
  var seq8412__$2 = cljs.core.next(seq8412__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__8413, G__8414, seq8412__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__8419 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8419) : pred.call(null, G__8419);
      }())) {
        var G__8420 = pred;
        var G__8421 = cljs.core.next(coll);
        pred = G__8420;
        coll = G__8421;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4215__auto__ = function() {
        var G__8425 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8425) : pred.call(null, G__8425);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var G__8426 = pred;
        var G__8427 = cljs.core.next(coll);
        pred = G__8426;
        coll = G__8427;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__8434 = null;
    var G__8434__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__8434__1 = function(x) {
      return cljs.core.not(function() {
        var G__8431 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8431) : f.call(null, G__8431);
      }());
    };
    var G__8434__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__8432 = x;
        var G__8433 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8432, G__8433) : f.call(null, G__8432, G__8433);
      }());
    };
    var G__8434__3 = function() {
      var G__8435__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__8435 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__8436__i = 0, G__8436__a = new Array(arguments.length - 2);
          while (G__8436__i < G__8436__a.length) {
            G__8436__a[G__8436__i] = arguments[G__8436__i + 2];
            ++G__8436__i;
          }
          zs = new cljs.core.IndexedSeq(G__8436__a, 0);
        }
        return G__8435__delegate.call(this, x, y, zs);
      };
      G__8435.cljs$lang$maxFixedArity = 2;
      G__8435.cljs$lang$applyTo = function(arglist__8437) {
        var x = cljs.core.first(arglist__8437);
        arglist__8437 = cljs.core.next(arglist__8437);
        var y = cljs.core.first(arglist__8437);
        var zs = cljs.core.rest(arglist__8437);
        return G__8435__delegate(x, y, zs);
      };
      G__8435.cljs$core$IFn$_invoke$arity$variadic = G__8435__delegate;
      return G__8435;
    }();
    G__8434 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__8434__0.call(this);
        case 1:
          return G__8434__1.call(this, x);
        case 2:
          return G__8434__2.call(this, x, y);
        default:
          var G__8438 = null;
          if (arguments.length > 2) {
            var G__8439__i = 0, G__8439__a = new Array(arguments.length - 2);
            while (G__8439__i < G__8439__a.length) {
              G__8439__a[G__8439__i] = arguments[G__8439__i + 2];
              ++G__8439__i;
            }
            G__8438 = new cljs.core.IndexedSeq(G__8439__a, 0);
          }
          return G__8434__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__8438);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8434.cljs$lang$maxFixedArity = 2;
    G__8434.cljs$lang$applyTo = G__8434__3.cljs$lang$applyTo;
    G__8434.cljs$core$IFn$_invoke$arity$0 = G__8434__0;
    G__8434.cljs$core$IFn$_invoke$arity$1 = G__8434__1;
    G__8434.cljs$core$IFn$_invoke$arity$2 = G__8434__2;
    G__8434.cljs$core$IFn$_invoke$arity$variadic = G__8434__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__8434;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__8440__delegate = function(args) {
      return x;
    };
    var G__8440 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8441__i = 0, G__8441__a = new Array(arguments.length - 0);
        while (G__8441__i < G__8441__a.length) {
          G__8441__a[G__8441__i] = arguments[G__8441__i + 0];
          ++G__8441__i;
        }
        args = new cljs.core.IndexedSeq(G__8441__a, 0);
      }
      return G__8440__delegate.call(this, args);
    };
    G__8440.cljs$lang$maxFixedArity = 0;
    G__8440.cljs$lang$applyTo = function(arglist__8442) {
      var args = cljs.core.seq(arglist__8442);
      return G__8440__delegate(args);
    };
    G__8440.cljs$core$IFn$_invoke$arity$variadic = G__8440__delegate;
    return G__8440;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var G__8448 = arguments.length;
  switch(G__8448) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__8477 = null;
    var G__8477__0 = function() {
      var G__8449 = function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8449) : f.call(null, G__8449);
    };
    var G__8477__1 = function(x) {
      var G__8450 = function() {
        var G__8451 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8451) : g.call(null, G__8451);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8450) : f.call(null, G__8450);
    };
    var G__8477__2 = function(x, y) {
      var G__8452 = function() {
        var G__8453 = x;
        var G__8454 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__8453, G__8454) : g.call(null, G__8453, G__8454);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8452) : f.call(null, G__8452);
    };
    var G__8477__3 = function(x, y, z) {
      var G__8455 = function() {
        var G__8456 = x;
        var G__8457 = y;
        var G__8458 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__8456, G__8457, G__8458) : g.call(null, G__8456, G__8457, G__8458);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8455) : f.call(null, G__8455);
    };
    var G__8477__4 = function() {
      var G__8478__delegate = function(x, y, z, args) {
        var G__8459 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8459) : f.call(null, G__8459);
      };
      var G__8478 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8479__i = 0, G__8479__a = new Array(arguments.length - 3);
          while (G__8479__i < G__8479__a.length) {
            G__8479__a[G__8479__i] = arguments[G__8479__i + 3];
            ++G__8479__i;
          }
          args = new cljs.core.IndexedSeq(G__8479__a, 0);
        }
        return G__8478__delegate.call(this, x, y, z, args);
      };
      G__8478.cljs$lang$maxFixedArity = 3;
      G__8478.cljs$lang$applyTo = function(arglist__8480) {
        var x = cljs.core.first(arglist__8480);
        arglist__8480 = cljs.core.next(arglist__8480);
        var y = cljs.core.first(arglist__8480);
        arglist__8480 = cljs.core.next(arglist__8480);
        var z = cljs.core.first(arglist__8480);
        var args = cljs.core.rest(arglist__8480);
        return G__8478__delegate(x, y, z, args);
      };
      G__8478.cljs$core$IFn$_invoke$arity$variadic = G__8478__delegate;
      return G__8478;
    }();
    G__8477 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8477__0.call(this);
        case 1:
          return G__8477__1.call(this, x);
        case 2:
          return G__8477__2.call(this, x, y);
        case 3:
          return G__8477__3.call(this, x, y, z);
        default:
          var G__8481 = null;
          if (arguments.length > 3) {
            var G__8482__i = 0, G__8482__a = new Array(arguments.length - 3);
            while (G__8482__i < G__8482__a.length) {
              G__8482__a[G__8482__i] = arguments[G__8482__i + 3];
              ++G__8482__i;
            }
            G__8481 = new cljs.core.IndexedSeq(G__8482__a, 0);
          }
          return G__8477__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8481);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8477.cljs$lang$maxFixedArity = 3;
    G__8477.cljs$lang$applyTo = G__8477__4.cljs$lang$applyTo;
    G__8477.cljs$core$IFn$_invoke$arity$0 = G__8477__0;
    G__8477.cljs$core$IFn$_invoke$arity$1 = G__8477__1;
    G__8477.cljs$core$IFn$_invoke$arity$2 = G__8477__2;
    G__8477.cljs$core$IFn$_invoke$arity$3 = G__8477__3;
    G__8477.cljs$core$IFn$_invoke$arity$variadic = G__8477__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8477;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__8483 = null;
    var G__8483__0 = function() {
      var G__8460 = function() {
        var G__8461 = function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8461) : g.call(null, G__8461);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8460) : f.call(null, G__8460);
    };
    var G__8483__1 = function(x) {
      var G__8462 = function() {
        var G__8463 = function() {
          var G__8464 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__8464) : h.call(null, G__8464);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8463) : g.call(null, G__8463);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8462) : f.call(null, G__8462);
    };
    var G__8483__2 = function(x, y) {
      var G__8465 = function() {
        var G__8466 = function() {
          var G__8467 = x;
          var G__8468 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__8467, G__8468) : h.call(null, G__8467, G__8468);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8466) : g.call(null, G__8466);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8465) : f.call(null, G__8465);
    };
    var G__8483__3 = function(x, y, z) {
      var G__8469 = function() {
        var G__8470 = function() {
          var G__8471 = x;
          var G__8472 = y;
          var G__8473 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__8471, G__8472, G__8473) : h.call(null, G__8471, G__8472, G__8473);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8470) : g.call(null, G__8470);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8469) : f.call(null, G__8469);
    };
    var G__8483__4 = function() {
      var G__8484__delegate = function(x, y, z, args) {
        var G__8474 = function() {
          var G__8475 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8475) : g.call(null, G__8475);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8474) : f.call(null, G__8474);
      };
      var G__8484 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8485__i = 0, G__8485__a = new Array(arguments.length - 3);
          while (G__8485__i < G__8485__a.length) {
            G__8485__a[G__8485__i] = arguments[G__8485__i + 3];
            ++G__8485__i;
          }
          args = new cljs.core.IndexedSeq(G__8485__a, 0);
        }
        return G__8484__delegate.call(this, x, y, z, args);
      };
      G__8484.cljs$lang$maxFixedArity = 3;
      G__8484.cljs$lang$applyTo = function(arglist__8486) {
        var x = cljs.core.first(arglist__8486);
        arglist__8486 = cljs.core.next(arglist__8486);
        var y = cljs.core.first(arglist__8486);
        arglist__8486 = cljs.core.next(arglist__8486);
        var z = cljs.core.first(arglist__8486);
        var args = cljs.core.rest(arglist__8486);
        return G__8484__delegate(x, y, z, args);
      };
      G__8484.cljs$core$IFn$_invoke$arity$variadic = G__8484__delegate;
      return G__8484;
    }();
    G__8483 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8483__0.call(this);
        case 1:
          return G__8483__1.call(this, x);
        case 2:
          return G__8483__2.call(this, x, y);
        case 3:
          return G__8483__3.call(this, x, y, z);
        default:
          var G__8487 = null;
          if (arguments.length > 3) {
            var G__8488__i = 0, G__8488__a = new Array(arguments.length - 3);
            while (G__8488__i < G__8488__a.length) {
              G__8488__a[G__8488__i] = arguments[G__8488__i + 3];
              ++G__8488__i;
            }
            G__8487 = new cljs.core.IndexedSeq(G__8488__a, 0);
          }
          return G__8483__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8487);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8483.cljs$lang$maxFixedArity = 3;
    G__8483.cljs$lang$applyTo = G__8483__4.cljs$lang$applyTo;
    G__8483.cljs$core$IFn$_invoke$arity$0 = G__8483__0;
    G__8483.cljs$core$IFn$_invoke$arity$1 = G__8483__1;
    G__8483.cljs$core$IFn$_invoke$arity$2 = G__8483__2;
    G__8483.cljs$core$IFn$_invoke$arity$3 = G__8483__3;
    G__8483.cljs$core$IFn$_invoke$arity$variadic = G__8483__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8483;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__8489__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__8490 = cljs.core.first(fs__$2).call(null, ret);
            var G__8491 = cljs.core.next(fs__$2);
            ret = G__8490;
            fs__$2 = G__8491;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__8489 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__8492__i = 0, G__8492__a = new Array(arguments.length - 0);
          while (G__8492__i < G__8492__a.length) {
            G__8492__a[G__8492__i] = arguments[G__8492__i + 0];
            ++G__8492__i;
          }
          args = new cljs.core.IndexedSeq(G__8492__a, 0);
        }
        return G__8489__delegate.call(this, args);
      };
      G__8489.cljs$lang$maxFixedArity = 0;
      G__8489.cljs$lang$applyTo = function(arglist__8493) {
        var args = cljs.core.seq(arglist__8493);
        return G__8489__delegate(args);
      };
      G__8489.cljs$core$IFn$_invoke$arity$variadic = G__8489__delegate;
      return G__8489;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq8443) {
  var G__8444 = cljs.core.first(seq8443);
  var seq8443__$1 = cljs.core.next(seq8443);
  var G__8445 = cljs.core.first(seq8443__$1);
  var seq8443__$2 = cljs.core.next(seq8443__$1);
  var G__8446 = cljs.core.first(seq8443__$2);
  var seq8443__$3 = cljs.core.next(seq8443__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__8444, G__8445, G__8446, seq8443__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var G__8500 = arguments.length;
  switch(G__8500) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5266__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__8544 = null;
    var G__8544__0 = function() {
      var G__8501 = arg1;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8501) : f.call(null, G__8501);
    };
    var G__8544__1 = function(x) {
      var G__8502 = arg1;
      var G__8503 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8502, G__8503) : f.call(null, G__8502, G__8503);
    };
    var G__8544__2 = function(x, y) {
      var G__8504 = arg1;
      var G__8505 = x;
      var G__8506 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8504, G__8505, G__8506) : f.call(null, G__8504, G__8505, G__8506);
    };
    var G__8544__3 = function(x, y, z) {
      var G__8507 = arg1;
      var G__8508 = x;
      var G__8509 = y;
      var G__8510 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8507, G__8508, G__8509, G__8510) : f.call(null, G__8507, G__8508, G__8509, G__8510);
    };
    var G__8544__4 = function() {
      var G__8545__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__8545 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8546__i = 0, G__8546__a = new Array(arguments.length - 3);
          while (G__8546__i < G__8546__a.length) {
            G__8546__a[G__8546__i] = arguments[G__8546__i + 3];
            ++G__8546__i;
          }
          args = new cljs.core.IndexedSeq(G__8546__a, 0);
        }
        return G__8545__delegate.call(this, x, y, z, args);
      };
      G__8545.cljs$lang$maxFixedArity = 3;
      G__8545.cljs$lang$applyTo = function(arglist__8547) {
        var x = cljs.core.first(arglist__8547);
        arglist__8547 = cljs.core.next(arglist__8547);
        var y = cljs.core.first(arglist__8547);
        arglist__8547 = cljs.core.next(arglist__8547);
        var z = cljs.core.first(arglist__8547);
        var args = cljs.core.rest(arglist__8547);
        return G__8545__delegate(x, y, z, args);
      };
      G__8545.cljs$core$IFn$_invoke$arity$variadic = G__8545__delegate;
      return G__8545;
    }();
    G__8544 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8544__0.call(this);
        case 1:
          return G__8544__1.call(this, x);
        case 2:
          return G__8544__2.call(this, x, y);
        case 3:
          return G__8544__3.call(this, x, y, z);
        default:
          var G__8548 = null;
          if (arguments.length > 3) {
            var G__8549__i = 0, G__8549__a = new Array(arguments.length - 3);
            while (G__8549__i < G__8549__a.length) {
              G__8549__a[G__8549__i] = arguments[G__8549__i + 3];
              ++G__8549__i;
            }
            G__8548 = new cljs.core.IndexedSeq(G__8549__a, 0);
          }
          return G__8544__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8548);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8544.cljs$lang$maxFixedArity = 3;
    G__8544.cljs$lang$applyTo = G__8544__4.cljs$lang$applyTo;
    G__8544.cljs$core$IFn$_invoke$arity$0 = G__8544__0;
    G__8544.cljs$core$IFn$_invoke$arity$1 = G__8544__1;
    G__8544.cljs$core$IFn$_invoke$arity$2 = G__8544__2;
    G__8544.cljs$core$IFn$_invoke$arity$3 = G__8544__3;
    G__8544.cljs$core$IFn$_invoke$arity$variadic = G__8544__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8544;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__8550 = null;
    var G__8550__0 = function() {
      var G__8511 = arg1;
      var G__8512 = arg2;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8511, G__8512) : f.call(null, G__8511, G__8512);
    };
    var G__8550__1 = function(x) {
      var G__8513 = arg1;
      var G__8514 = arg2;
      var G__8515 = x;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8513, G__8514, G__8515) : f.call(null, G__8513, G__8514, G__8515);
    };
    var G__8550__2 = function(x, y) {
      var G__8516 = arg1;
      var G__8517 = arg2;
      var G__8518 = x;
      var G__8519 = y;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8516, G__8517, G__8518, G__8519) : f.call(null, G__8516, G__8517, G__8518, G__8519);
    };
    var G__8550__3 = function(x, y, z) {
      var G__8520 = arg1;
      var G__8521 = arg2;
      var G__8522 = x;
      var G__8523 = y;
      var G__8524 = z;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8520, G__8521, G__8522, G__8523, G__8524) : f.call(null, G__8520, G__8521, G__8522, G__8523, G__8524);
    };
    var G__8550__4 = function() {
      var G__8551__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__8551 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8552__i = 0, G__8552__a = new Array(arguments.length - 3);
          while (G__8552__i < G__8552__a.length) {
            G__8552__a[G__8552__i] = arguments[G__8552__i + 3];
            ++G__8552__i;
          }
          args = new cljs.core.IndexedSeq(G__8552__a, 0);
        }
        return G__8551__delegate.call(this, x, y, z, args);
      };
      G__8551.cljs$lang$maxFixedArity = 3;
      G__8551.cljs$lang$applyTo = function(arglist__8553) {
        var x = cljs.core.first(arglist__8553);
        arglist__8553 = cljs.core.next(arglist__8553);
        var y = cljs.core.first(arglist__8553);
        arglist__8553 = cljs.core.next(arglist__8553);
        var z = cljs.core.first(arglist__8553);
        var args = cljs.core.rest(arglist__8553);
        return G__8551__delegate(x, y, z, args);
      };
      G__8551.cljs$core$IFn$_invoke$arity$variadic = G__8551__delegate;
      return G__8551;
    }();
    G__8550 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8550__0.call(this);
        case 1:
          return G__8550__1.call(this, x);
        case 2:
          return G__8550__2.call(this, x, y);
        case 3:
          return G__8550__3.call(this, x, y, z);
        default:
          var G__8554 = null;
          if (arguments.length > 3) {
            var G__8555__i = 0, G__8555__a = new Array(arguments.length - 3);
            while (G__8555__i < G__8555__a.length) {
              G__8555__a[G__8555__i] = arguments[G__8555__i + 3];
              ++G__8555__i;
            }
            G__8554 = new cljs.core.IndexedSeq(G__8555__a, 0);
          }
          return G__8550__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8554);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8550.cljs$lang$maxFixedArity = 3;
    G__8550.cljs$lang$applyTo = G__8550__4.cljs$lang$applyTo;
    G__8550.cljs$core$IFn$_invoke$arity$0 = G__8550__0;
    G__8550.cljs$core$IFn$_invoke$arity$1 = G__8550__1;
    G__8550.cljs$core$IFn$_invoke$arity$2 = G__8550__2;
    G__8550.cljs$core$IFn$_invoke$arity$3 = G__8550__3;
    G__8550.cljs$core$IFn$_invoke$arity$variadic = G__8550__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8550;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__8556 = null;
    var G__8556__0 = function() {
      var G__8525 = arg1;
      var G__8526 = arg2;
      var G__8527 = arg3;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8525, G__8526, G__8527) : f.call(null, G__8525, G__8526, G__8527);
    };
    var G__8556__1 = function(x) {
      var G__8528 = arg1;
      var G__8529 = arg2;
      var G__8530 = arg3;
      var G__8531 = x;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8528, G__8529, G__8530, G__8531) : f.call(null, G__8528, G__8529, G__8530, G__8531);
    };
    var G__8556__2 = function(x, y) {
      var G__8532 = arg1;
      var G__8533 = arg2;
      var G__8534 = arg3;
      var G__8535 = x;
      var G__8536 = y;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8532, G__8533, G__8534, G__8535, G__8536) : f.call(null, G__8532, G__8533, G__8534, G__8535, G__8536);
    };
    var G__8556__3 = function(x, y, z) {
      var G__8537 = arg1;
      var G__8538 = arg2;
      var G__8539 = arg3;
      var G__8540 = x;
      var G__8541 = y;
      var G__8542 = z;
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__8537, G__8538, G__8539, G__8540, G__8541, G__8542) : f.call(null, G__8537, G__8538, G__8539, G__8540, G__8541, G__8542);
    };
    var G__8556__4 = function() {
      var G__8557__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__8557 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8558__i = 0, G__8558__a = new Array(arguments.length - 3);
          while (G__8558__i < G__8558__a.length) {
            G__8558__a[G__8558__i] = arguments[G__8558__i + 3];
            ++G__8558__i;
          }
          args = new cljs.core.IndexedSeq(G__8558__a, 0);
        }
        return G__8557__delegate.call(this, x, y, z, args);
      };
      G__8557.cljs$lang$maxFixedArity = 3;
      G__8557.cljs$lang$applyTo = function(arglist__8559) {
        var x = cljs.core.first(arglist__8559);
        arglist__8559 = cljs.core.next(arglist__8559);
        var y = cljs.core.first(arglist__8559);
        arglist__8559 = cljs.core.next(arglist__8559);
        var z = cljs.core.first(arglist__8559);
        var args = cljs.core.rest(arglist__8559);
        return G__8557__delegate(x, y, z, args);
      };
      G__8557.cljs$core$IFn$_invoke$arity$variadic = G__8557__delegate;
      return G__8557;
    }();
    G__8556 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8556__0.call(this);
        case 1:
          return G__8556__1.call(this, x);
        case 2:
          return G__8556__2.call(this, x, y);
        case 3:
          return G__8556__3.call(this, x, y, z);
        default:
          var G__8560 = null;
          if (arguments.length > 3) {
            var G__8561__i = 0, G__8561__a = new Array(arguments.length - 3);
            while (G__8561__i < G__8561__a.length) {
              G__8561__a[G__8561__i] = arguments[G__8561__i + 3];
              ++G__8561__i;
            }
            G__8560 = new cljs.core.IndexedSeq(G__8561__a, 0);
          }
          return G__8556__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8560);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8556.cljs$lang$maxFixedArity = 3;
    G__8556.cljs$lang$applyTo = G__8556__4.cljs$lang$applyTo;
    G__8556.cljs$core$IFn$_invoke$arity$0 = G__8556__0;
    G__8556.cljs$core$IFn$_invoke$arity$1 = G__8556__1;
    G__8556.cljs$core$IFn$_invoke$arity$2 = G__8556__2;
    G__8556.cljs$core$IFn$_invoke$arity$3 = G__8556__3;
    G__8556.cljs$core$IFn$_invoke$arity$variadic = G__8556__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8556;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__8562__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__8562 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8563__i = 0, G__8563__a = new Array(arguments.length - 0);
        while (G__8563__i < G__8563__a.length) {
          G__8563__a[G__8563__i] = arguments[G__8563__i + 0];
          ++G__8563__i;
        }
        args = new cljs.core.IndexedSeq(G__8563__a, 0);
      }
      return G__8562__delegate.call(this, args);
    };
    G__8562.cljs$lang$maxFixedArity = 0;
    G__8562.cljs$lang$applyTo = function(arglist__8564) {
      var args = cljs.core.seq(arglist__8564);
      return G__8562__delegate(args);
    };
    G__8562.cljs$core$IFn$_invoke$arity$variadic = G__8562__delegate;
    return G__8562;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq8494) {
  var G__8495 = cljs.core.first(seq8494);
  var seq8494__$1 = cljs.core.next(seq8494);
  var G__8496 = cljs.core.first(seq8494__$1);
  var seq8494__$2 = cljs.core.next(seq8494__$1);
  var G__8497 = cljs.core.first(seq8494__$2);
  var seq8494__$3 = cljs.core.next(seq8494__$2);
  var G__8498 = cljs.core.first(seq8494__$3);
  var seq8494__$4 = cljs.core.next(seq8494__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__8495, G__8496, G__8497, G__8498, seq8494__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var G__8566 = arguments.length;
  switch(G__8566) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__8584 = null;
    var G__8584__1 = function(a) {
      var G__8567 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8567) : f.call(null, G__8567);
    };
    var G__8584__2 = function(a, b) {
      var G__8568 = a == null ? x : a;
      var G__8569 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8568, G__8569) : f.call(null, G__8568, G__8569);
    };
    var G__8584__3 = function(a, b, c) {
      var G__8570 = a == null ? x : a;
      var G__8571 = b;
      var G__8572 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8570, G__8571, G__8572) : f.call(null, G__8570, G__8571, G__8572);
    };
    var G__8584__4 = function() {
      var G__8585__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__8585 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8586__i = 0, G__8586__a = new Array(arguments.length - 3);
          while (G__8586__i < G__8586__a.length) {
            G__8586__a[G__8586__i] = arguments[G__8586__i + 3];
            ++G__8586__i;
          }
          ds = new cljs.core.IndexedSeq(G__8586__a, 0);
        }
        return G__8585__delegate.call(this, a, b, c, ds);
      };
      G__8585.cljs$lang$maxFixedArity = 3;
      G__8585.cljs$lang$applyTo = function(arglist__8587) {
        var a = cljs.core.first(arglist__8587);
        arglist__8587 = cljs.core.next(arglist__8587);
        var b = cljs.core.first(arglist__8587);
        arglist__8587 = cljs.core.next(arglist__8587);
        var c = cljs.core.first(arglist__8587);
        var ds = cljs.core.rest(arglist__8587);
        return G__8585__delegate(a, b, c, ds);
      };
      G__8585.cljs$core$IFn$_invoke$arity$variadic = G__8585__delegate;
      return G__8585;
    }();
    G__8584 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__8584__1.call(this, a);
        case 2:
          return G__8584__2.call(this, a, b);
        case 3:
          return G__8584__3.call(this, a, b, c);
        default:
          var G__8588 = null;
          if (arguments.length > 3) {
            var G__8589__i = 0, G__8589__a = new Array(arguments.length - 3);
            while (G__8589__i < G__8589__a.length) {
              G__8589__a[G__8589__i] = arguments[G__8589__i + 3];
              ++G__8589__i;
            }
            G__8588 = new cljs.core.IndexedSeq(G__8589__a, 0);
          }
          return G__8584__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8588);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8584.cljs$lang$maxFixedArity = 3;
    G__8584.cljs$lang$applyTo = G__8584__4.cljs$lang$applyTo;
    G__8584.cljs$core$IFn$_invoke$arity$1 = G__8584__1;
    G__8584.cljs$core$IFn$_invoke$arity$2 = G__8584__2;
    G__8584.cljs$core$IFn$_invoke$arity$3 = G__8584__3;
    G__8584.cljs$core$IFn$_invoke$arity$variadic = G__8584__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8584;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__8590 = null;
    var G__8590__2 = function(a, b) {
      var G__8573 = a == null ? x : a;
      var G__8574 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8573, G__8574) : f.call(null, G__8573, G__8574);
    };
    var G__8590__3 = function(a, b, c) {
      var G__8575 = a == null ? x : a;
      var G__8576 = b == null ? y : b;
      var G__8577 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8575, G__8576, G__8577) : f.call(null, G__8575, G__8576, G__8577);
    };
    var G__8590__4 = function() {
      var G__8591__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__8591 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8592__i = 0, G__8592__a = new Array(arguments.length - 3);
          while (G__8592__i < G__8592__a.length) {
            G__8592__a[G__8592__i] = arguments[G__8592__i + 3];
            ++G__8592__i;
          }
          ds = new cljs.core.IndexedSeq(G__8592__a, 0);
        }
        return G__8591__delegate.call(this, a, b, c, ds);
      };
      G__8591.cljs$lang$maxFixedArity = 3;
      G__8591.cljs$lang$applyTo = function(arglist__8593) {
        var a = cljs.core.first(arglist__8593);
        arglist__8593 = cljs.core.next(arglist__8593);
        var b = cljs.core.first(arglist__8593);
        arglist__8593 = cljs.core.next(arglist__8593);
        var c = cljs.core.first(arglist__8593);
        var ds = cljs.core.rest(arglist__8593);
        return G__8591__delegate(a, b, c, ds);
      };
      G__8591.cljs$core$IFn$_invoke$arity$variadic = G__8591__delegate;
      return G__8591;
    }();
    G__8590 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__8590__2.call(this, a, b);
        case 3:
          return G__8590__3.call(this, a, b, c);
        default:
          var G__8594 = null;
          if (arguments.length > 3) {
            var G__8595__i = 0, G__8595__a = new Array(arguments.length - 3);
            while (G__8595__i < G__8595__a.length) {
              G__8595__a[G__8595__i] = arguments[G__8595__i + 3];
              ++G__8595__i;
            }
            G__8594 = new cljs.core.IndexedSeq(G__8595__a, 0);
          }
          return G__8590__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8594);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8590.cljs$lang$maxFixedArity = 3;
    G__8590.cljs$lang$applyTo = G__8590__4.cljs$lang$applyTo;
    G__8590.cljs$core$IFn$_invoke$arity$2 = G__8590__2;
    G__8590.cljs$core$IFn$_invoke$arity$3 = G__8590__3;
    G__8590.cljs$core$IFn$_invoke$arity$variadic = G__8590__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8590;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__8596 = null;
    var G__8596__2 = function(a, b) {
      var G__8578 = a == null ? x : a;
      var G__8579 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8578, G__8579) : f.call(null, G__8578, G__8579);
    };
    var G__8596__3 = function(a, b, c) {
      var G__8580 = a == null ? x : a;
      var G__8581 = b == null ? y : b;
      var G__8582 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8580, G__8581, G__8582) : f.call(null, G__8580, G__8581, G__8582);
    };
    var G__8596__4 = function() {
      var G__8597__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__8597 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8598__i = 0, G__8598__a = new Array(arguments.length - 3);
          while (G__8598__i < G__8598__a.length) {
            G__8598__a[G__8598__i] = arguments[G__8598__i + 3];
            ++G__8598__i;
          }
          ds = new cljs.core.IndexedSeq(G__8598__a, 0);
        }
        return G__8597__delegate.call(this, a, b, c, ds);
      };
      G__8597.cljs$lang$maxFixedArity = 3;
      G__8597.cljs$lang$applyTo = function(arglist__8599) {
        var a = cljs.core.first(arglist__8599);
        arglist__8599 = cljs.core.next(arglist__8599);
        var b = cljs.core.first(arglist__8599);
        arglist__8599 = cljs.core.next(arglist__8599);
        var c = cljs.core.first(arglist__8599);
        var ds = cljs.core.rest(arglist__8599);
        return G__8597__delegate(a, b, c, ds);
      };
      G__8597.cljs$core$IFn$_invoke$arity$variadic = G__8597__delegate;
      return G__8597;
    }();
    G__8596 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__8596__2.call(this, a, b);
        case 3:
          return G__8596__3.call(this, a, b, c);
        default:
          var G__8600 = null;
          if (arguments.length > 3) {
            var G__8601__i = 0, G__8601__a = new Array(arguments.length - 3);
            while (G__8601__i < G__8601__a.length) {
              G__8601__a[G__8601__i] = arguments[G__8601__i + 3];
              ++G__8601__i;
            }
            G__8600 = new cljs.core.IndexedSeq(G__8601__a, 0);
          }
          return G__8596__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8600);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8596.cljs$lang$maxFixedArity = 3;
    G__8596.cljs$lang$applyTo = G__8596__4.cljs$lang$applyTo;
    G__8596.cljs$core$IFn$_invoke$arity$2 = G__8596__2;
    G__8596.cljs$core$IFn$_invoke$arity$3 = G__8596__3;
    G__8596.cljs$core$IFn$_invoke$arity$variadic = G__8596__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8596;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var G__8603 = arguments.length;
  switch(G__8603) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = function() {
      var G__8604 = -1;
      return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__8604) : cljs.core.volatile_BANG_.call(null, G__8604);
    }();
    return function(i) {
      return function() {
        var G__8635 = null;
        var G__8635__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8635__1 = function(result) {
          var G__8605 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8605) : rf.call(null, G__8605);
        };
        var G__8635__2 = function(result, input) {
          var G__8606 = result;
          var G__8607 = function() {
            var G__8608 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__8609 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8608, G__8609) : f.call(null, G__8608, G__8609);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8606, G__8607) : rf.call(null, G__8606, G__8607);
        };
        G__8635 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8635__0.call(this);
            case 1:
              return G__8635__1.call(this, result);
            case 2:
              return G__8635__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8635.cljs$core$IFn$_invoke$arity$0 = G__8635__0;
        G__8635.cljs$core$IFn$_invoke$arity$1 = G__8635__1;
        G__8635.cljs$core$IFn$_invoke$arity$2 = G__8635__2;
        return G__8635;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4422__auto__ = cljs.core.seq(coll__$1);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5100__auto___8636 = size;
          var i_8637 = 0;
          while (true) {
            if (i_8637 < n__5100__auto___8636) {
              cljs.core.chunk_append(b, function() {
                var G__8630 = idx + i_8637;
                var G__8631 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8637);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8630, G__8631) : f.call(null, G__8630, G__8631);
              }());
              var G__8638 = i_8637 + 1;
              i_8637 = G__8638;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__8632 = idx;
            var G__8633 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8632, G__8633) : f.call(null, G__8632, G__8633);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var G__8640 = arguments.length;
  switch(G__8640) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__8648 = null;
      var G__8648__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__8648__1 = function(result) {
        var G__8641 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8641) : rf.call(null, G__8641);
      };
      var G__8648__2 = function(result, input) {
        var v = function() {
          var G__8642 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8642) : f.call(null, G__8642);
        }();
        if (v == null) {
          return result;
        } else {
          var G__8643 = result;
          var G__8644 = v;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8643, G__8644) : rf.call(null, G__8643, G__8644);
        }
      };
      G__8648 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__8648__0.call(this);
          case 1:
            return G__8648__1.call(this, result);
          case 2:
            return G__8648__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8648.cljs$core$IFn$_invoke$arity$0 = G__8648__0;
      G__8648.cljs$core$IFn$_invoke$arity$1 = G__8648__1;
      G__8648.cljs$core$IFn$_invoke$arity$2 = G__8648__2;
      return G__8648;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5100__auto___8649 = size;
        var i_8650 = 0;
        while (true) {
          if (i_8650 < n__5100__auto___8649) {
            var x_8651 = function() {
              var G__8645 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8650);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8645) : f.call(null, G__8645);
            }();
            if (x_8651 == null) {
            } else {
              cljs.core.chunk_append(b, x_8651);
            }
            var G__8652 = i_8650 + 1;
            i_8650 = G__8652;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__8646 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8646) : f.call(null, G__8646);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__8653 = cljs.core.seq(self__.watches);
  var chunk__8654 = null;
  var count__8655 = 0;
  var i__8656 = 0;
  while (true) {
    if (i__8656 < count__8655) {
      var vec__8657 = chunk__8654.cljs$core$IIndexed$_nth$arity$2(null, i__8656);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8657, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8657, 1, null);
      var G__8658_8668 = key;
      var G__8659_8669 = this$__$1;
      var G__8660_8670 = oldval;
      var G__8661_8671 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8658_8668, G__8659_8669, G__8660_8670, G__8661_8671) : f.call(null, G__8658_8668, G__8659_8669, G__8660_8670, G__8661_8671);
      var G__8672 = seq__8653;
      var G__8673 = chunk__8654;
      var G__8674 = count__8655;
      var G__8675 = i__8656 + 1;
      seq__8653 = G__8672;
      chunk__8654 = G__8673;
      count__8655 = G__8674;
      i__8656 = G__8675;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__8653);
      if (temp__4422__auto__) {
        var seq__8653__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8653__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__8653__$1);
          var G__8676 = cljs.core.chunk_rest(seq__8653__$1);
          var G__8677 = c__5000__auto__;
          var G__8678 = cljs.core.count(c__5000__auto__);
          var G__8679 = 0;
          seq__8653 = G__8676;
          chunk__8654 = G__8677;
          count__8655 = G__8678;
          i__8656 = G__8679;
          continue;
        } else {
          var vec__8662 = cljs.core.first(seq__8653__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8662, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8662, 1, null);
          var G__8663_8680 = key;
          var G__8664_8681 = this$__$1;
          var G__8665_8682 = oldval;
          var G__8666_8683 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8663_8680, G__8664_8681, G__8665_8682, G__8666_8683) : f.call(null, G__8663_8680, G__8664_8681, G__8665_8682, G__8666_8683);
          var G__8684 = cljs.core.next(seq__8653__$1);
          var G__8685 = null;
          var G__8686 = 0;
          var G__8687 = 0;
          seq__8653 = G__8684;
          chunk__8654 = G__8685;
          count__8655 = G__8686;
          i__8656 = G__8687;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__8667 = this$__$1;
  return goog.getUid(G__8667);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var G__8691 = arguments.length;
  switch(G__8691) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5266__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__8692) {
  var map__8693 = p__8692;
  var map__8693__$1 = cljs.core.seq_QMARK_(map__8693) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__8693) : map__8693;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8693__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8693__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq8688) {
  var G__8689 = cljs.core.first(seq8688);
  var seq8688__$1 = cljs.core.next(seq8688);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__8689, seq8688__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__8697 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__8697) : validate.call(null, G__8697);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__8698 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8698) : cljs.core.pr_str.call(null, G__8698);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var G__8705 = arguments.length;
  switch(G__8705) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5266__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8706 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8706) : f.call(null, G__8706);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8707 = a.state;
      var G__8708 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8707, G__8708) : f.call(null, G__8707, G__8708);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8709 = a.state;
      var G__8710 = x;
      var G__8711 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8709, G__8710, G__8711) : f.call(null, G__8709, G__8710, G__8711);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq8699) {
  var G__8700 = cljs.core.first(seq8699);
  var seq8699__$1 = cljs.core.next(seq8699);
  var G__8701 = cljs.core.first(seq8699__$1);
  var seq8699__$2 = cljs.core.next(seq8699__$1);
  var G__8702 = cljs.core.first(seq8699__$2);
  var seq8699__$3 = cljs.core.next(seq8699__$2);
  var G__8703 = cljs.core.first(seq8699__$3);
  var seq8699__$4 = cljs.core.next(seq8699__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8700, G__8701, G__8702, G__8703, seq8699__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var G__8714 = arguments.length;
  switch(G__8714) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__8749 = null;
        var G__8749__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8749__1 = function(result) {
          var G__8715 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8715) : rf.call(null, G__8715);
        };
        var G__8749__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = function() {
            var G__8716 = i;
            var G__8717 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8716, G__8717) : f.call(null, G__8716, G__8717);
          }();
          if (v == null) {
            return result;
          } else {
            var G__8718 = result;
            var G__8719 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8718, G__8719) : rf.call(null, G__8718, G__8719);
          }
        };
        G__8749 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8749__0.call(this);
            case 1:
              return G__8749__1.call(this, result);
            case 2:
              return G__8749__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8749.cljs$core$IFn$_invoke$arity$0 = G__8749__0;
        G__8749.cljs$core$IFn$_invoke$arity$1 = G__8749__1;
        G__8749.cljs$core$IFn$_invoke$arity$2 = G__8749__2;
        return G__8749;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4422__auto__ = cljs.core.seq(coll__$1);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5100__auto___8750 = size;
          var i_8751 = 0;
          while (true) {
            if (i_8751 < n__5100__auto___8750) {
              var x_8752 = function() {
                var G__8744 = idx + i_8751;
                var G__8745 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8751);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8744, G__8745) : f.call(null, G__8744, G__8745);
              }();
              if (x_8752 == null) {
              } else {
                cljs.core.chunk_append(b, x_8752);
              }
              var G__8753 = i_8751 + 1;
              i_8751 = G__8753;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__8746 = idx;
            var G__8747 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8746, G__8747) : f.call(null, G__8746, G__8747);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var G__8765 = arguments.length;
  switch(G__8765) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(function() {
        var G__8781 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8781) : p.call(null, G__8781);
      }());
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8783 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8783) : p.call(null, G__8783);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var G__8784 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8784) : p.call(null, G__8784);
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8786 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8786) : p.call(null, G__8786);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = function() {
            var G__8788 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8788) : p.call(null, G__8788);
          }();
          if (cljs.core.truth_(and__4203__auto____$1)) {
            var G__8789 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8789) : p.call(null, G__8789);
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__8951__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4203__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4203__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4203__auto__;
          }
        }());
      };
      var G__8951 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8952__i = 0, G__8952__a = new Array(arguments.length - 3);
          while (G__8952__i < G__8952__a.length) {
            G__8952__a[G__8952__i] = arguments[G__8952__i + 3];
            ++G__8952__i;
          }
          args = new cljs.core.IndexedSeq(G__8952__a, 0);
        }
        return G__8951__delegate.call(this, x, y, z, args);
      };
      G__8951.cljs$lang$maxFixedArity = 3;
      G__8951.cljs$lang$applyTo = function(arglist__8953) {
        var x = cljs.core.first(arglist__8953);
        arglist__8953 = cljs.core.next(arglist__8953);
        var y = cljs.core.first(arglist__8953);
        arglist__8953 = cljs.core.next(arglist__8953);
        var z = cljs.core.first(arglist__8953);
        var args = cljs.core.rest(arglist__8953);
        return G__8951__delegate(x, y, z, args);
      };
      G__8951.cljs$core$IFn$_invoke$arity$variadic = G__8951__delegate;
      return G__8951;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__8954 = null;
          if (arguments.length > 3) {
            var G__8955__i = 0, G__8955__a = new Array(arguments.length - 3);
            while (G__8955__i < G__8955__a.length) {
              G__8955__a[G__8955__i] = arguments[G__8955__i + 3];
              ++G__8955__i;
            }
            G__8954 = new cljs.core.IndexedSeq(G__8955__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8954);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8821 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8821) : p1.call(null, G__8821);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var G__8822 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8822) : p2.call(null, G__8822);
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8824 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8824) : p1.call(null, G__8824);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = function() {
            var G__8826 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8826) : p1.call(null, G__8826);
          }();
          if (cljs.core.truth_(and__4203__auto____$1)) {
            var and__4203__auto____$2 = function() {
              var G__8828 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8828) : p2.call(null, G__8828);
            }();
            if (cljs.core.truth_(and__4203__auto____$2)) {
              var G__8829 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8829) : p2.call(null, G__8829);
            } else {
              return and__4203__auto____$2;
            }
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8831 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8831) : p1.call(null, G__8831);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = function() {
            var G__8833 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8833) : p1.call(null, G__8833);
          }();
          if (cljs.core.truth_(and__4203__auto____$1)) {
            var and__4203__auto____$2 = function() {
              var G__8835 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8835) : p1.call(null, G__8835);
            }();
            if (cljs.core.truth_(and__4203__auto____$2)) {
              var and__4203__auto____$3 = function() {
                var G__8837 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8837) : p2.call(null, G__8837);
              }();
              if (cljs.core.truth_(and__4203__auto____$3)) {
                var and__4203__auto____$4 = function() {
                  var G__8839 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8839) : p2.call(null, G__8839);
                }();
                if (cljs.core.truth_(and__4203__auto____$4)) {
                  var G__8840 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8840) : p2.call(null, G__8840);
                } else {
                  return and__4203__auto____$4;
                }
              } else {
                return and__4203__auto____$3;
              }
            } else {
              return and__4203__auto____$2;
            }
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__8956__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4203__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4203__auto__)) {
            return cljs.core.every_QMARK_(function(and__4203__auto__) {
              return function(p1__8754_SHARP_) {
                var and__4203__auto____$1 = function() {
                  var G__8842 = p1__8754_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8842) : p1.call(null, G__8842);
                }();
                if (cljs.core.truth_(and__4203__auto____$1)) {
                  var G__8843 = p1__8754_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8843) : p2.call(null, G__8843);
                } else {
                  return and__4203__auto____$1;
                }
              };
            }(and__4203__auto__), args);
          } else {
            return and__4203__auto__;
          }
        }());
      };
      var G__8956 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8957__i = 0, G__8957__a = new Array(arguments.length - 3);
          while (G__8957__i < G__8957__a.length) {
            G__8957__a[G__8957__i] = arguments[G__8957__i + 3];
            ++G__8957__i;
          }
          args = new cljs.core.IndexedSeq(G__8957__a, 0);
        }
        return G__8956__delegate.call(this, x, y, z, args);
      };
      G__8956.cljs$lang$maxFixedArity = 3;
      G__8956.cljs$lang$applyTo = function(arglist__8958) {
        var x = cljs.core.first(arglist__8958);
        arglist__8958 = cljs.core.next(arglist__8958);
        var y = cljs.core.first(arglist__8958);
        arglist__8958 = cljs.core.next(arglist__8958);
        var z = cljs.core.first(arglist__8958);
        var args = cljs.core.rest(arglist__8958);
        return G__8956__delegate(x, y, z, args);
      };
      G__8956.cljs$core$IFn$_invoke$arity$variadic = G__8956__delegate;
      return G__8956;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__8959 = null;
          if (arguments.length > 3) {
            var G__8960__i = 0, G__8960__a = new Array(arguments.length - 3);
            while (G__8960__i < G__8960__a.length) {
              G__8960__a[G__8960__i] = arguments[G__8960__i + 3];
              ++G__8960__i;
            }
            G__8959 = new cljs.core.IndexedSeq(G__8960__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8959);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8889 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8889) : p1.call(null, G__8889);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = function() {
            var G__8891 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8891) : p2.call(null, G__8891);
          }();
          if (cljs.core.truth_(and__4203__auto____$1)) {
            var G__8892 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8892) : p3.call(null, G__8892);
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8894 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8894) : p1.call(null, G__8894);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = function() {
            var G__8896 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8896) : p2.call(null, G__8896);
          }();
          if (cljs.core.truth_(and__4203__auto____$1)) {
            var and__4203__auto____$2 = function() {
              var G__8898 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8898) : p3.call(null, G__8898);
            }();
            if (cljs.core.truth_(and__4203__auto____$2)) {
              var and__4203__auto____$3 = function() {
                var G__8900 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8900) : p1.call(null, G__8900);
              }();
              if (cljs.core.truth_(and__4203__auto____$3)) {
                var and__4203__auto____$4 = function() {
                  var G__8902 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8902) : p2.call(null, G__8902);
                }();
                if (cljs.core.truth_(and__4203__auto____$4)) {
                  var G__8903 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8903) : p3.call(null, G__8903);
                } else {
                  return and__4203__auto____$4;
                }
              } else {
                return and__4203__auto____$3;
              }
            } else {
              return and__4203__auto____$2;
            }
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4203__auto__ = function() {
          var G__8905 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8905) : p1.call(null, G__8905);
        }();
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = function() {
            var G__8907 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8907) : p2.call(null, G__8907);
          }();
          if (cljs.core.truth_(and__4203__auto____$1)) {
            var and__4203__auto____$2 = function() {
              var G__8909 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8909) : p3.call(null, G__8909);
            }();
            if (cljs.core.truth_(and__4203__auto____$2)) {
              var and__4203__auto____$3 = function() {
                var G__8911 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8911) : p1.call(null, G__8911);
              }();
              if (cljs.core.truth_(and__4203__auto____$3)) {
                var and__4203__auto____$4 = function() {
                  var G__8913 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8913) : p2.call(null, G__8913);
                }();
                if (cljs.core.truth_(and__4203__auto____$4)) {
                  var and__4203__auto____$5 = function() {
                    var G__8915 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8915) : p3.call(null, G__8915);
                  }();
                  if (cljs.core.truth_(and__4203__auto____$5)) {
                    var and__4203__auto____$6 = function() {
                      var G__8917 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8917) : p1.call(null, G__8917);
                    }();
                    if (cljs.core.truth_(and__4203__auto____$6)) {
                      var and__4203__auto____$7 = function() {
                        var G__8919 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8919) : p2.call(null, G__8919);
                      }();
                      if (cljs.core.truth_(and__4203__auto____$7)) {
                        var G__8920 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8920) : p3.call(null, G__8920);
                      } else {
                        return and__4203__auto____$7;
                      }
                    } else {
                      return and__4203__auto____$6;
                    }
                  } else {
                    return and__4203__auto____$5;
                  }
                } else {
                  return and__4203__auto____$4;
                }
              } else {
                return and__4203__auto____$3;
              }
            } else {
              return and__4203__auto____$2;
            }
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__8961__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4203__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4203__auto__)) {
            return cljs.core.every_QMARK_(function(and__4203__auto__) {
              return function(p1__8755_SHARP_) {
                var and__4203__auto____$1 = function() {
                  var G__8922 = p1__8755_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8922) : p1.call(null, G__8922);
                }();
                if (cljs.core.truth_(and__4203__auto____$1)) {
                  var and__4203__auto____$2 = function() {
                    var G__8924 = p1__8755_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8924) : p2.call(null, G__8924);
                  }();
                  if (cljs.core.truth_(and__4203__auto____$2)) {
                    var G__8925 = p1__8755_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8925) : p3.call(null, G__8925);
                  } else {
                    return and__4203__auto____$2;
                  }
                } else {
                  return and__4203__auto____$1;
                }
              };
            }(and__4203__auto__), args);
          } else {
            return and__4203__auto__;
          }
        }());
      };
      var G__8961 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8962__i = 0, G__8962__a = new Array(arguments.length - 3);
          while (G__8962__i < G__8962__a.length) {
            G__8962__a[G__8962__i] = arguments[G__8962__i + 3];
            ++G__8962__i;
          }
          args = new cljs.core.IndexedSeq(G__8962__a, 0);
        }
        return G__8961__delegate.call(this, x, y, z, args);
      };
      G__8961.cljs$lang$maxFixedArity = 3;
      G__8961.cljs$lang$applyTo = function(arglist__8963) {
        var x = cljs.core.first(arglist__8963);
        arglist__8963 = cljs.core.next(arglist__8963);
        var y = cljs.core.first(arglist__8963);
        arglist__8963 = cljs.core.next(arglist__8963);
        var z = cljs.core.first(arglist__8963);
        var args = cljs.core.rest(arglist__8963);
        return G__8961__delegate(x, y, z, args);
      };
      G__8961.cljs$core$IFn$_invoke$arity$variadic = G__8961__delegate;
      return G__8961;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__8964 = null;
          if (arguments.length > 3) {
            var G__8965__i = 0, G__8965__a = new Array(arguments.length - 3);
            while (G__8965__i < G__8965__a.length) {
              G__8965__a[G__8965__i] = arguments[G__8965__i + 3];
              ++G__8965__i;
            }
            G__8964 = new cljs.core.IndexedSeq(G__8965__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8964);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8756_SHARP_) {
            var G__8941 = x;
            return p1__8756_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8756_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8941) : p1__8756_SHARP_.call(null, G__8941);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8757_SHARP_) {
            var and__4203__auto__ = function() {
              var G__8943 = x;
              return p1__8757_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8757_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8943) : p1__8757_SHARP_.call(null, G__8943);
            }();
            if (cljs.core.truth_(and__4203__auto__)) {
              var G__8944 = y;
              return p1__8757_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8757_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8944) : p1__8757_SHARP_.call(null, G__8944);
            } else {
              return and__4203__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8758_SHARP_) {
            var and__4203__auto__ = function() {
              var G__8946 = x;
              return p1__8758_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8758_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8946) : p1__8758_SHARP_.call(null, G__8946);
            }();
            if (cljs.core.truth_(and__4203__auto__)) {
              var and__4203__auto____$1 = function() {
                var G__8948 = y;
                return p1__8758_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8758_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8948) : p1__8758_SHARP_.call(null, G__8948);
              }();
              if (cljs.core.truth_(and__4203__auto____$1)) {
                var G__8949 = z;
                return p1__8758_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8758_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8949) : p1__8758_SHARP_.call(null, G__8949);
              } else {
                return and__4203__auto____$1;
              }
            } else {
              return and__4203__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__8966__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4203__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4203__auto__)) {
              return cljs.core.every_QMARK_(function(and__4203__auto__, ps__$1) {
                return function(p1__8759_SHARP_) {
                  return cljs.core.every_QMARK_(p1__8759_SHARP_, args);
                };
              }(and__4203__auto__, ps__$1), ps__$1);
            } else {
              return and__4203__auto__;
            }
          }());
        };
        var G__8966 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8967__i = 0, G__8967__a = new Array(arguments.length - 3);
            while (G__8967__i < G__8967__a.length) {
              G__8967__a[G__8967__i] = arguments[G__8967__i + 3];
              ++G__8967__i;
            }
            args = new cljs.core.IndexedSeq(G__8967__a, 0);
          }
          return G__8966__delegate.call(this, x, y, z, args);
        };
        G__8966.cljs$lang$maxFixedArity = 3;
        G__8966.cljs$lang$applyTo = function(arglist__8968) {
          var x = cljs.core.first(arglist__8968);
          arglist__8968 = cljs.core.next(arglist__8968);
          var y = cljs.core.first(arglist__8968);
          arglist__8968 = cljs.core.next(arglist__8968);
          var z = cljs.core.first(arglist__8968);
          var args = cljs.core.rest(arglist__8968);
          return G__8966__delegate(x, y, z, args);
        };
        G__8966.cljs$core$IFn$_invoke$arity$variadic = G__8966__delegate;
        return G__8966;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__8969 = null;
            if (arguments.length > 3) {
              var G__8970__i = 0, G__8970__a = new Array(arguments.length - 3);
              while (G__8970__i < G__8970__a.length) {
                G__8970__a[G__8970__i] = arguments[G__8970__i + 3];
                ++G__8970__i;
              }
              G__8969 = new cljs.core.IndexedSeq(G__8970__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8969);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq8760) {
  var G__8761 = cljs.core.first(seq8760);
  var seq8760__$1 = cljs.core.next(seq8760);
  var G__8762 = cljs.core.first(seq8760__$1);
  var seq8760__$2 = cljs.core.next(seq8760__$1);
  var G__8763 = cljs.core.first(seq8760__$2);
  var seq8760__$3 = cljs.core.next(seq8760__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__8761, G__8762, G__8763, seq8760__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var G__8982 = arguments.length;
  switch(G__8982) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      var G__8998 = x;
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8998) : p.call(null, G__8998);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4215__auto__ = function() {
        var G__9000 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9000) : p.call(null, G__9000);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var G__9001 = y;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9001) : p.call(null, G__9001);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4215__auto__ = function() {
        var G__9003 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9003) : p.call(null, G__9003);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = function() {
          var G__9005 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9005) : p.call(null, G__9005);
        }();
        if (cljs.core.truth_(or__4215__auto____$1)) {
          return or__4215__auto____$1;
        } else {
          var G__9006 = z;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9006) : p.call(null, G__9006);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__9168__delegate = function(x, y, z, args) {
        var or__4215__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4215__auto__)) {
          return or__4215__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__9168 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9169__i = 0, G__9169__a = new Array(arguments.length - 3);
          while (G__9169__i < G__9169__a.length) {
            G__9169__a[G__9169__i] = arguments[G__9169__i + 3];
            ++G__9169__i;
          }
          args = new cljs.core.IndexedSeq(G__9169__a, 0);
        }
        return G__9168__delegate.call(this, x, y, z, args);
      };
      G__9168.cljs$lang$maxFixedArity = 3;
      G__9168.cljs$lang$applyTo = function(arglist__9170) {
        var x = cljs.core.first(arglist__9170);
        arglist__9170 = cljs.core.next(arglist__9170);
        var y = cljs.core.first(arglist__9170);
        arglist__9170 = cljs.core.next(arglist__9170);
        var z = cljs.core.first(arglist__9170);
        var args = cljs.core.rest(arglist__9170);
        return G__9168__delegate(x, y, z, args);
      };
      G__9168.cljs$core$IFn$_invoke$arity$variadic = G__9168__delegate;
      return G__9168;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__9171 = null;
          if (arguments.length > 3) {
            var G__9172__i = 0, G__9172__a = new Array(arguments.length - 3);
            while (G__9172__i < G__9172__a.length) {
              G__9172__a[G__9172__i] = arguments[G__9172__i + 3];
              ++G__9172__i;
            }
            G__9171 = new cljs.core.IndexedSeq(G__9172__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9171);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4215__auto__ = function() {
        var G__9038 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9038) : p1.call(null, G__9038);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var G__9039 = x;
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9039) : p2.call(null, G__9039);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4215__auto__ = function() {
        var G__9041 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9041) : p1.call(null, G__9041);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = function() {
          var G__9043 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9043) : p1.call(null, G__9043);
        }();
        if (cljs.core.truth_(or__4215__auto____$1)) {
          return or__4215__auto____$1;
        } else {
          var or__4215__auto____$2 = function() {
            var G__9045 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9045) : p2.call(null, G__9045);
          }();
          if (cljs.core.truth_(or__4215__auto____$2)) {
            return or__4215__auto____$2;
          } else {
            var G__9046 = y;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9046) : p2.call(null, G__9046);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4215__auto__ = function() {
        var G__9048 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9048) : p1.call(null, G__9048);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = function() {
          var G__9050 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9050) : p1.call(null, G__9050);
        }();
        if (cljs.core.truth_(or__4215__auto____$1)) {
          return or__4215__auto____$1;
        } else {
          var or__4215__auto____$2 = function() {
            var G__9052 = z;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9052) : p1.call(null, G__9052);
          }();
          if (cljs.core.truth_(or__4215__auto____$2)) {
            return or__4215__auto____$2;
          } else {
            var or__4215__auto____$3 = function() {
              var G__9054 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9054) : p2.call(null, G__9054);
            }();
            if (cljs.core.truth_(or__4215__auto____$3)) {
              return or__4215__auto____$3;
            } else {
              var or__4215__auto____$4 = function() {
                var G__9056 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9056) : p2.call(null, G__9056);
              }();
              if (cljs.core.truth_(or__4215__auto____$4)) {
                return or__4215__auto____$4;
              } else {
                var G__9057 = z;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9057) : p2.call(null, G__9057);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__9173__delegate = function(x, y, z, args) {
        var or__4215__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4215__auto__)) {
          return or__4215__auto__;
        } else {
          return cljs.core.some(function(or__4215__auto__) {
            return function(p1__8971_SHARP_) {
              var or__4215__auto____$1 = function() {
                var G__9059 = p1__8971_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9059) : p1.call(null, G__9059);
              }();
              if (cljs.core.truth_(or__4215__auto____$1)) {
                return or__4215__auto____$1;
              } else {
                var G__9060 = p1__8971_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9060) : p2.call(null, G__9060);
              }
            };
          }(or__4215__auto__), args);
        }
      };
      var G__9173 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9174__i = 0, G__9174__a = new Array(arguments.length - 3);
          while (G__9174__i < G__9174__a.length) {
            G__9174__a[G__9174__i] = arguments[G__9174__i + 3];
            ++G__9174__i;
          }
          args = new cljs.core.IndexedSeq(G__9174__a, 0);
        }
        return G__9173__delegate.call(this, x, y, z, args);
      };
      G__9173.cljs$lang$maxFixedArity = 3;
      G__9173.cljs$lang$applyTo = function(arglist__9175) {
        var x = cljs.core.first(arglist__9175);
        arglist__9175 = cljs.core.next(arglist__9175);
        var y = cljs.core.first(arglist__9175);
        arglist__9175 = cljs.core.next(arglist__9175);
        var z = cljs.core.first(arglist__9175);
        var args = cljs.core.rest(arglist__9175);
        return G__9173__delegate(x, y, z, args);
      };
      G__9173.cljs$core$IFn$_invoke$arity$variadic = G__9173__delegate;
      return G__9173;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__9176 = null;
          if (arguments.length > 3) {
            var G__9177__i = 0, G__9177__a = new Array(arguments.length - 3);
            while (G__9177__i < G__9177__a.length) {
              G__9177__a[G__9177__i] = arguments[G__9177__i + 3];
              ++G__9177__i;
            }
            G__9176 = new cljs.core.IndexedSeq(G__9177__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9176);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4215__auto__ = function() {
        var G__9106 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9106) : p1.call(null, G__9106);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = function() {
          var G__9108 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9108) : p2.call(null, G__9108);
        }();
        if (cljs.core.truth_(or__4215__auto____$1)) {
          return or__4215__auto____$1;
        } else {
          var G__9109 = x;
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9109) : p3.call(null, G__9109);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4215__auto__ = function() {
        var G__9111 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9111) : p1.call(null, G__9111);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = function() {
          var G__9113 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9113) : p2.call(null, G__9113);
        }();
        if (cljs.core.truth_(or__4215__auto____$1)) {
          return or__4215__auto____$1;
        } else {
          var or__4215__auto____$2 = function() {
            var G__9115 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9115) : p3.call(null, G__9115);
          }();
          if (cljs.core.truth_(or__4215__auto____$2)) {
            return or__4215__auto____$2;
          } else {
            var or__4215__auto____$3 = function() {
              var G__9117 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9117) : p1.call(null, G__9117);
            }();
            if (cljs.core.truth_(or__4215__auto____$3)) {
              return or__4215__auto____$3;
            } else {
              var or__4215__auto____$4 = function() {
                var G__9119 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9119) : p2.call(null, G__9119);
              }();
              if (cljs.core.truth_(or__4215__auto____$4)) {
                return or__4215__auto____$4;
              } else {
                var G__9120 = y;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9120) : p3.call(null, G__9120);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4215__auto__ = function() {
        var G__9122 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9122) : p1.call(null, G__9122);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = function() {
          var G__9124 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9124) : p2.call(null, G__9124);
        }();
        if (cljs.core.truth_(or__4215__auto____$1)) {
          return or__4215__auto____$1;
        } else {
          var or__4215__auto____$2 = function() {
            var G__9126 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9126) : p3.call(null, G__9126);
          }();
          if (cljs.core.truth_(or__4215__auto____$2)) {
            return or__4215__auto____$2;
          } else {
            var or__4215__auto____$3 = function() {
              var G__9128 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9128) : p1.call(null, G__9128);
            }();
            if (cljs.core.truth_(or__4215__auto____$3)) {
              return or__4215__auto____$3;
            } else {
              var or__4215__auto____$4 = function() {
                var G__9130 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9130) : p2.call(null, G__9130);
              }();
              if (cljs.core.truth_(or__4215__auto____$4)) {
                return or__4215__auto____$4;
              } else {
                var or__4215__auto____$5 = function() {
                  var G__9132 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9132) : p3.call(null, G__9132);
                }();
                if (cljs.core.truth_(or__4215__auto____$5)) {
                  return or__4215__auto____$5;
                } else {
                  var or__4215__auto____$6 = function() {
                    var G__9134 = z;
                    return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9134) : p1.call(null, G__9134);
                  }();
                  if (cljs.core.truth_(or__4215__auto____$6)) {
                    return or__4215__auto____$6;
                  } else {
                    var or__4215__auto____$7 = function() {
                      var G__9136 = z;
                      return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9136) : p2.call(null, G__9136);
                    }();
                    if (cljs.core.truth_(or__4215__auto____$7)) {
                      return or__4215__auto____$7;
                    } else {
                      var G__9137 = z;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9137) : p3.call(null, G__9137);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__9178__delegate = function(x, y, z, args) {
        var or__4215__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4215__auto__)) {
          return or__4215__auto__;
        } else {
          return cljs.core.some(function(or__4215__auto__) {
            return function(p1__8972_SHARP_) {
              var or__4215__auto____$1 = function() {
                var G__9139 = p1__8972_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9139) : p1.call(null, G__9139);
              }();
              if (cljs.core.truth_(or__4215__auto____$1)) {
                return or__4215__auto____$1;
              } else {
                var or__4215__auto____$2 = function() {
                  var G__9141 = p1__8972_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9141) : p2.call(null, G__9141);
                }();
                if (cljs.core.truth_(or__4215__auto____$2)) {
                  return or__4215__auto____$2;
                } else {
                  var G__9142 = p1__8972_SHARP_;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9142) : p3.call(null, G__9142);
                }
              }
            };
          }(or__4215__auto__), args);
        }
      };
      var G__9178 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9179__i = 0, G__9179__a = new Array(arguments.length - 3);
          while (G__9179__i < G__9179__a.length) {
            G__9179__a[G__9179__i] = arguments[G__9179__i + 3];
            ++G__9179__i;
          }
          args = new cljs.core.IndexedSeq(G__9179__a, 0);
        }
        return G__9178__delegate.call(this, x, y, z, args);
      };
      G__9178.cljs$lang$maxFixedArity = 3;
      G__9178.cljs$lang$applyTo = function(arglist__9180) {
        var x = cljs.core.first(arglist__9180);
        arglist__9180 = cljs.core.next(arglist__9180);
        var y = cljs.core.first(arglist__9180);
        arglist__9180 = cljs.core.next(arglist__9180);
        var z = cljs.core.first(arglist__9180);
        var args = cljs.core.rest(arglist__9180);
        return G__9178__delegate(x, y, z, args);
      };
      G__9178.cljs$core$IFn$_invoke$arity$variadic = G__9178__delegate;
      return G__9178;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__9181 = null;
          if (arguments.length > 3) {
            var G__9182__i = 0, G__9182__a = new Array(arguments.length - 3);
            while (G__9182__i < G__9182__a.length) {
              G__9182__a[G__9182__i] = arguments[G__9182__i + 3];
              ++G__9182__i;
            }
            G__9181 = new cljs.core.IndexedSeq(G__9182__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9181);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__8973_SHARP_) {
            var G__9158 = x;
            return p1__8973_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8973_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9158) : p1__8973_SHARP_.call(null, G__9158);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__8974_SHARP_) {
            var or__4215__auto__ = function() {
              var G__9160 = x;
              return p1__8974_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8974_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9160) : p1__8974_SHARP_.call(null, G__9160);
            }();
            if (cljs.core.truth_(or__4215__auto__)) {
              return or__4215__auto__;
            } else {
              var G__9161 = y;
              return p1__8974_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8974_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9161) : p1__8974_SHARP_.call(null, G__9161);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__8975_SHARP_) {
            var or__4215__auto__ = function() {
              var G__9163 = x;
              return p1__8975_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8975_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9163) : p1__8975_SHARP_.call(null, G__9163);
            }();
            if (cljs.core.truth_(or__4215__auto__)) {
              return or__4215__auto__;
            } else {
              var or__4215__auto____$1 = function() {
                var G__9165 = y;
                return p1__8975_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8975_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9165) : p1__8975_SHARP_.call(null, G__9165);
              }();
              if (cljs.core.truth_(or__4215__auto____$1)) {
                return or__4215__auto____$1;
              } else {
                var G__9166 = z;
                return p1__8975_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8975_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9166) : p1__8975_SHARP_.call(null, G__9166);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__9183__delegate = function(x, y, z, args) {
          var or__4215__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4215__auto__)) {
            return or__4215__auto__;
          } else {
            return cljs.core.some(function(or__4215__auto__, ps__$1) {
              return function(p1__8976_SHARP_) {
                return cljs.core.some(p1__8976_SHARP_, args);
              };
            }(or__4215__auto__, ps__$1), ps__$1);
          }
        };
        var G__9183 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9184__i = 0, G__9184__a = new Array(arguments.length - 3);
            while (G__9184__i < G__9184__a.length) {
              G__9184__a[G__9184__i] = arguments[G__9184__i + 3];
              ++G__9184__i;
            }
            args = new cljs.core.IndexedSeq(G__9184__a, 0);
          }
          return G__9183__delegate.call(this, x, y, z, args);
        };
        G__9183.cljs$lang$maxFixedArity = 3;
        G__9183.cljs$lang$applyTo = function(arglist__9185) {
          var x = cljs.core.first(arglist__9185);
          arglist__9185 = cljs.core.next(arglist__9185);
          var y = cljs.core.first(arglist__9185);
          arglist__9185 = cljs.core.next(arglist__9185);
          var z = cljs.core.first(arglist__9185);
          var args = cljs.core.rest(arglist__9185);
          return G__9183__delegate(x, y, z, args);
        };
        G__9183.cljs$core$IFn$_invoke$arity$variadic = G__9183__delegate;
        return G__9183;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__9186 = null;
            if (arguments.length > 3) {
              var G__9187__i = 0, G__9187__a = new Array(arguments.length - 3);
              while (G__9187__i < G__9187__a.length) {
                G__9187__a[G__9187__i] = arguments[G__9187__i + 3];
                ++G__9187__i;
              }
              G__9186 = new cljs.core.IndexedSeq(G__9187__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9186);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq8977) {
  var G__8978 = cljs.core.first(seq8977);
  var seq8977__$1 = cljs.core.next(seq8977);
  var G__8979 = cljs.core.first(seq8977__$1);
  var seq8977__$2 = cljs.core.next(seq8977__$1);
  var G__8980 = cljs.core.first(seq8977__$2);
  var seq8977__$3 = cljs.core.next(seq8977__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__8978, G__8979, G__8980, seq8977__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var G__9195 = arguments.length;
  switch(G__9195) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5266__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9211 = null;
      var G__9211__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9211__1 = function(result) {
        var G__9196 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9196) : rf.call(null, G__9196);
      };
      var G__9211__2 = function(result, input) {
        var G__9197 = result;
        var G__9198 = function() {
          var G__9199 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9199) : f.call(null, G__9199);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9197, G__9198) : rf.call(null, G__9197, G__9198);
      };
      var G__9211__3 = function() {
        var G__9212__delegate = function(result, input, inputs) {
          var G__9200 = result;
          var G__9201 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9200, G__9201) : rf.call(null, G__9200, G__9201);
        };
        var G__9212 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__9213__i = 0, G__9213__a = new Array(arguments.length - 2);
            while (G__9213__i < G__9213__a.length) {
              G__9213__a[G__9213__i] = arguments[G__9213__i + 2];
              ++G__9213__i;
            }
            inputs = new cljs.core.IndexedSeq(G__9213__a, 0);
          }
          return G__9212__delegate.call(this, result, input, inputs);
        };
        G__9212.cljs$lang$maxFixedArity = 2;
        G__9212.cljs$lang$applyTo = function(arglist__9214) {
          var result = cljs.core.first(arglist__9214);
          arglist__9214 = cljs.core.next(arglist__9214);
          var input = cljs.core.first(arglist__9214);
          var inputs = cljs.core.rest(arglist__9214);
          return G__9212__delegate(result, input, inputs);
        };
        G__9212.cljs$core$IFn$_invoke$arity$variadic = G__9212__delegate;
        return G__9212;
      }();
      G__9211 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__9211__0.call(this);
          case 1:
            return G__9211__1.call(this, result);
          case 2:
            return G__9211__2.call(this, result, input);
          default:
            var G__9215 = null;
            if (arguments.length > 2) {
              var G__9216__i = 0, G__9216__a = new Array(arguments.length - 2);
              while (G__9216__i < G__9216__a.length) {
                G__9216__a[G__9216__i] = arguments[G__9216__i + 2];
                ++G__9216__i;
              }
              G__9215 = new cljs.core.IndexedSeq(G__9216__a, 0);
            }
            return G__9211__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9215);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9211.cljs$lang$maxFixedArity = 2;
      G__9211.cljs$lang$applyTo = G__9211__3.cljs$lang$applyTo;
      G__9211.cljs$core$IFn$_invoke$arity$0 = G__9211__0;
      G__9211.cljs$core$IFn$_invoke$arity$1 = G__9211__1;
      G__9211.cljs$core$IFn$_invoke$arity$2 = G__9211__2;
      G__9211.cljs$core$IFn$_invoke$arity$variadic = G__9211__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__9211;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5100__auto___9217 = size;
        var i_9218 = 0;
        while (true) {
          if (i_9218 < n__5100__auto___9217) {
            cljs.core.chunk_append(b, function() {
              var G__9202 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9218);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9202) : f.call(null, G__9202);
            }());
            var G__9219 = i_9218 + 1;
            i_9218 = G__9219;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__9203 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9203) : f.call(null, G__9203);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__9204 = cljs.core.first(s1);
        var G__9205 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9204, G__9205) : f.call(null, G__9204, G__9205);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__9206 = cljs.core.first(s1);
        var G__9207 = cljs.core.first(s2);
        var G__9208 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9206, G__9207, G__9208) : f.call(null, G__9206, G__9207, G__9208);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__9188_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9188_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq9189) {
  var G__9190 = cljs.core.first(seq9189);
  var seq9189__$1 = cljs.core.next(seq9189);
  var G__9191 = cljs.core.first(seq9189__$1);
  var seq9189__$2 = cljs.core.next(seq9189__$1);
  var G__9192 = cljs.core.first(seq9189__$2);
  var seq9189__$3 = cljs.core.next(seq9189__$2);
  var G__9193 = cljs.core.first(seq9189__$3);
  var seq9189__$4 = cljs.core.next(seq9189__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__9190, G__9191, G__9192, G__9193, seq9189__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var G__9221 = arguments.length;
  switch(G__9221) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9226 = null;
        var G__9226__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9226__1 = function(result) {
          var G__9222 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9222) : rf.call(null, G__9222);
        };
        var G__9226__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? function() {
            var G__9223 = result;
            var G__9224 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9223, G__9224) : rf.call(null, G__9223, G__9224);
          }() : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__9226 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9226__0.call(this);
            case 1:
              return G__9226__1.call(this, result);
            case 2:
              return G__9226__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9226.cljs$core$IFn$_invoke$arity$0 = G__9226__0;
        G__9226.cljs$core$IFn$_invoke$arity$1 = G__9226__1;
        G__9226.cljs$core$IFn$_invoke$arity$2 = G__9226__2;
        return G__9226;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4422__auto__ = cljs.core.seq(coll);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var G__9228 = arguments.length;
  switch(G__9228) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9233 = null;
        var G__9233__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9233__1 = function(result) {
          var G__9229 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9229) : rf.call(null, G__9229);
        };
        var G__9233__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            var G__9230 = result;
            var G__9231 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9230, G__9231) : rf.call(null, G__9230, G__9231);
          }
        };
        G__9233 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9233__0.call(this);
            case 1:
              return G__9233__1.call(this, result);
            case 2:
              return G__9233__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9233.cljs$core$IFn$_invoke$arity$0 = G__9233__0;
        G__9233.cljs$core$IFn$_invoke$arity$1 = G__9233__1;
        G__9233.cljs$core$IFn$_invoke$arity$2 = G__9233__2;
        return G__9233;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__9234 = n__$1 - 1;
        var G__9235 = cljs.core.rest(s);
        n__$1 = G__9234;
        coll__$1 = G__9235;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var G__9237 = arguments.length;
  switch(G__9237) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9239 = cljs.core.next(s);
      var G__9240 = cljs.core.next(lead);
      s = G__9239;
      lead = G__9240;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var G__9242 = arguments.length;
  switch(G__9242) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__9250 = null;
        var G__9250__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9250__1 = function(result) {
          var G__9243 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9243) : rf.call(null, G__9243);
        };
        var G__9250__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4203__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4203__auto__)) {
              var G__9244 = input;
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9244) : pred.call(null, G__9244);
            } else {
              return and__4203__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            var G__9245 = result;
            var G__9246 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9245, G__9246) : rf.call(null, G__9245, G__9246);
          }
        };
        G__9250 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9250__0.call(this);
            case 1:
              return G__9250__1.call(this, result);
            case 2:
              return G__9250__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9250.cljs$core$IFn$_invoke$arity$0 = G__9250__0;
        G__9250.cljs$core$IFn$_invoke$arity$1 = G__9250__1;
        G__9250.cljs$core$IFn$_invoke$arity$2 = G__9250__2;
        return G__9250;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4203__auto__ = s;
        if (and__4203__auto__) {
          var G__9248 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9248) : pred__$1.call(null, G__9248);
        } else {
          return and__4203__auto__;
        }
      }())) {
        var G__9251 = pred__$1;
        var G__9252 = cljs.core.rest(s);
        pred__$1 = G__9251;
        coll__$1 = G__9252;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var G__9255 = arguments.length;
  switch(G__9255) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var G__9258 = arguments.length;
  switch(G__9258) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__9263 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9263) : f.call(null, G__9263);
    }());
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var G__9268 = arguments.length;
  switch(G__9268) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5266__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq9264) {
  var G__9265 = cljs.core.first(seq9264);
  var seq9264__$1 = cljs.core.next(seq9264);
  var G__9266 = cljs.core.first(seq9264__$1);
  var seq9264__$2 = cljs.core.next(seq9264__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__9265, G__9266, seq9264__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var G__9271 = arguments.length;
  switch(G__9271) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__9280 = null;
        var G__9280__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9280__1 = function(result) {
          var G__9272 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9272) : rf.call(null, G__9272);
        };
        var G__9280__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = function() {
              var G__9273 = result;
              var G__9274 = sep;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9273, G__9274) : rf.call(null, G__9273, G__9274);
            }();
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              var G__9275 = sepr;
              var G__9276 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9275, G__9276) : rf.call(null, G__9275, G__9276);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            var G__9277 = result;
            var G__9278 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9277, G__9278) : rf.call(null, G__9277, G__9278);
          }
        };
        G__9280 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9280__0.call(this);
            case 1:
              return G__9280__1.call(this, result);
            case 2:
              return G__9280__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9280.cljs$core$IFn$_invoke$arity$0 = G__9280__0;
        G__9280.cljs$core$IFn$_invoke$arity$1 = G__9280__1;
        G__9280.cljs$core$IFn$_invoke$arity$2 = G__9280__2;
        return G__9280;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4420__auto__ = cljs.core.seq(coll);
      if (temp__4420__auto__) {
        var coll__$1 = temp__4420__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var G__9292 = arguments.length;
  switch(G__9292) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5266__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq9289) {
  var G__9290 = cljs.core.first(seq9289);
  var seq9289__$1 = cljs.core.next(seq9289);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__9290, seq9289__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var G__9295 = arguments.length;
  switch(G__9295) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__9303 = null;
      var G__9303__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9303__1 = function(result) {
        var G__9296 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9296) : rf.call(null, G__9296);
      };
      var G__9303__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__9297 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9297) : pred.call(null, G__9297);
        }())) {
          var G__9298 = result;
          var G__9299 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9298, G__9299) : rf.call(null, G__9298, G__9299);
        } else {
          return result;
        }
      };
      G__9303 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9303__0.call(this);
          case 1:
            return G__9303__1.call(this, result);
          case 2:
            return G__9303__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9303.cljs$core$IFn$_invoke$arity$0 = G__9303__0;
      G__9303.cljs$core$IFn$_invoke$arity$1 = G__9303__1;
      G__9303.cljs$core$IFn$_invoke$arity$2 = G__9303__2;
      return G__9303;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5100__auto___9304 = size;
        var i_9305 = 0;
        while (true) {
          if (i_9305 < n__5100__auto___9304) {
            if (cljs.core.truth_(function() {
              var G__9300 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9305);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9300) : pred.call(null, G__9300);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9305));
            } else {
            }
            var G__9306 = i_9305 + 1;
            i_9305 = G__9306;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(function() {
          var G__9301 = f;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9301) : pred.call(null, G__9301);
        }())) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var G__9308 = arguments.length;
  switch(G__9308) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__9316 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__9316) : branch_QMARK_.call(null, G__9316);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__9317 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__9317) : children.call(null, G__9317);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9318_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__9318_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var G__9320 = arguments.length;
  switch(G__9320) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__9321 = to;
      if (G__9321) {
        var bit__4882__auto__ = G__9321.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4882__auto__ || G__9321.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (function() {
    var G__9322 = to;
    if (G__9322) {
      var bit__4882__auto__ = G__9322.cljs$lang$protocol_mask$partition1$ & 4;
      if (bit__4882__auto__ || G__9322.cljs$core$IEditableCollection$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var G__9330 = arguments.length;
  switch(G__9330) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5266__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
      var G__9331 = o;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9331) : f.call(null, G__9331);
    }());
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq9324) {
  var G__9325 = cljs.core.first(seq9324);
  var seq9324__$1 = cljs.core.next(seq9324);
  var G__9326 = cljs.core.first(seq9324__$1);
  var seq9324__$2 = cljs.core.next(seq9324__$1);
  var G__9327 = cljs.core.first(seq9324__$2);
  var seq9324__$3 = cljs.core.next(seq9324__$2);
  var G__9328 = cljs.core.first(seq9324__$3);
  var seq9324__$4 = cljs.core.next(seq9324__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__9325, G__9326, G__9327, G__9328, seq9324__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__9334 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9334) : pred.call(null, G__9334);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var G__9336 = arguments.length;
  switch(G__9336) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var G__9339 = arguments.length;
  switch(G__9339) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!function() {
        var G__9340 = m__$1;
        if (G__9340) {
          var bit__4889__auto__ = G__9340.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4889__auto__ || G__9340.cljs$core$ILookup$) {
            return true;
          } else {
            if (!G__9340.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9340);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9340);
        }
      }()) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__9342 = sentinel;
          var G__9343 = m__$2;
          var G__9344 = cljs.core.next(ks__$1);
          sentinel = G__9342;
          m__$1 = G__9343;
          ks__$1 = G__9344;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__9345, v) {
  var vec__9350 = p__9345;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9350, 0, null);
  var ks = cljs.core.nthnext(vec__9350, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var G__9359 = arguments.length;
  switch(G__9359) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5266__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__9360, f) {
  var vec__9361 = p__9360;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9361, 0, null);
  var ks = cljs.core.nthnext(vec__9361, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9362 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9362) : f.call(null, G__9362);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__9363, f, a) {
  var vec__9364 = p__9363;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9364, 0, null);
  var ks = cljs.core.nthnext(vec__9364, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9365 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9366 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9365, G__9366) : f.call(null, G__9365, G__9366);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__9367, f, a, b) {
  var vec__9368 = p__9367;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9368, 0, null);
  var ks = cljs.core.nthnext(vec__9368, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9369 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9370 = a;
      var G__9371 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9369, G__9370, G__9371) : f.call(null, G__9369, G__9370, G__9371);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__9372, f, a, b, c) {
  var vec__9373 = p__9372;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9373, 0, null);
  var ks = cljs.core.nthnext(vec__9373, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9374 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9375 = a;
      var G__9376 = b;
      var G__9377 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9374, G__9375, G__9376, G__9377) : f.call(null, G__9374, G__9375, G__9376, G__9377);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__9378, f, a, b, c, args) {
  var vec__9379 = p__9378;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9379, 0, null);
  var ks = cljs.core.nthnext(vec__9379, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq9351) {
  var G__9352 = cljs.core.first(seq9351);
  var seq9351__$1 = cljs.core.next(seq9351);
  var G__9353 = cljs.core.first(seq9351__$1);
  var seq9351__$2 = cljs.core.next(seq9351__$1);
  var G__9354 = cljs.core.first(seq9351__$2);
  var seq9351__$3 = cljs.core.next(seq9351__$2);
  var G__9355 = cljs.core.first(seq9351__$3);
  var seq9351__$4 = cljs.core.next(seq9351__$3);
  var G__9356 = cljs.core.first(seq9351__$4);
  var seq9351__$5 = cljs.core.next(seq9351__$4);
  var G__9357 = cljs.core.first(seq9351__$5);
  var seq9351__$6 = cljs.core.next(seq9351__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__9352, G__9353, G__9354, G__9355, G__9356, G__9357, seq9351__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var G__9389 = arguments.length;
  switch(G__9389) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5266__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9390 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9390) : f.call(null, G__9390);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9391 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9392 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9391, G__9392) : f.call(null, G__9391, G__9392);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9393 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9394 = x;
    var G__9395 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9393, G__9394, G__9395) : f.call(null, G__9393, G__9394, G__9395);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9396 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9397 = x;
    var G__9398 = y;
    var G__9399 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9396, G__9397, G__9398, G__9399) : f.call(null, G__9396, G__9397, G__9398, G__9399);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq9381) {
  var G__9382 = cljs.core.first(seq9381);
  var seq9381__$1 = cljs.core.next(seq9381);
  var G__9383 = cljs.core.first(seq9381__$1);
  var seq9381__$2 = cljs.core.next(seq9381__$1);
  var G__9384 = cljs.core.first(seq9381__$2);
  var seq9381__$3 = cljs.core.next(seq9381__$2);
  var G__9385 = cljs.core.first(seq9381__$3);
  var seq9381__$4 = cljs.core.next(seq9381__$3);
  var G__9386 = cljs.core.first(seq9381__$4);
  var seq9381__$5 = cljs.core.next(seq9381__$4);
  var G__9387 = cljs.core.first(seq9381__$5);
  var seq9381__$6 = cljs.core.next(seq9381__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__9382, G__9383, G__9384, G__9385, G__9386, G__9387, seq9381__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__9401 = ll - 5;
      var G__9402 = r;
      ll = G__9401;
      ret = G__9402;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9407 = cljs.core.pv_aget(node, 0);
      var G__9408 = level - 5;
      node = G__9407;
      level = G__9408;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9409 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__9410 = level - 5;
        node = G__9409;
        level = G__9410;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9420 = init__$2;
              var G__9421 = j + i;
              var G__9422 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9420, G__9421, G__9422) : f.call(null, G__9420, G__9421, G__9422);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9433 = j + 1;
              var G__9434 = init__$3;
              j = G__9433;
              init__$2 = G__9434;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9423 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9423) : cljs.core.deref.call(null, G__9423);
      } else {
        var G__9435 = i + len;
        var G__9436 = init__$2;
        i = G__9435;
        init__$1 = G__9436;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__9424 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__9424) : cljs.core.tv_editable_root.call(null, G__9424);
  }(), function() {
    var G__9425 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__9425) : cljs.core.tv_editable_tail.call(null, G__9425);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9426 = init__$2;
              var G__9427 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9426, G__9427) : f.call(null, G__9426, G__9427);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9437 = j + 1;
              var G__9438 = init__$3;
              j = G__9437;
              init__$2 = G__9438;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9428 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9428) : cljs.core.deref.call(null, G__9428);
      } else {
        var G__9439 = i + len;
        var G__9440 = init__$2;
        i = G__9439;
        init__$1 = G__9440;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__9429 = coll__$1;
      var G__9430 = cljs.core.first_array_for_longvec(coll__$1);
      var G__9431 = 0;
      var G__9432 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9429, G__9430, G__9431, G__9432) : cljs.core.chunked_seq.call(null, G__9429, G__9430, G__9431, G__9432);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5100__auto___9441 = len;
    var i_9442 = 0;
    while (true) {
      if (i_9442 < n__5100__auto___9441) {
        new_tail[i_9442] = self__.tail[i_9442];
        var G__9443 = i_9442 + 1;
        i_9442 = G__9443;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9444 = null;
  var G__9444__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9444__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9444 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9444__2.call(this, self__, k);
      case 3:
        return G__9444__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9444.cljs$core$IFn$_invoke$arity$2 = G__9444__2;
  G__9444.cljs$core$IFn$_invoke$arity$3 = G__9444__3;
  return G__9444;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9419) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9419)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__9445 = i + 1;
        var G__9446 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__9445;
        out = G__9446;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq9447) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9447));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9448 = self__.vec;
      var G__9449 = self__.node;
      var G__9450 = self__.i;
      var G__9451 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9448, G__9449, G__9450, G__9451) : cljs.core.chunked_seq.call(null, G__9448, G__9449, G__9450, G__9451);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9452 = self__.vec;
    var G__9453 = self__.i + self__.off;
    var G__9454 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9452, G__9453, G__9454) : cljs.core.subvec.call(null, G__9452, G__9453, G__9454);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__9455 = self__.vec;
    var G__9456 = self__.i + self__.off;
    var G__9457 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9455, G__9456, G__9457) : cljs.core.subvec.call(null, G__9455, G__9456, G__9457);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9458 = self__.vec;
      var G__9459 = self__.node;
      var G__9460 = self__.i;
      var G__9461 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9458, G__9459, G__9460, G__9461) : cljs.core.chunked_seq.call(null, G__9458, G__9459, G__9460, G__9461);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9462 = self__.vec;
    var G__9463 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9464 = end;
    var G__9465 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9462, G__9463, G__9464, G__9465) : cljs.core.chunked_seq.call(null, G__9462, G__9463, G__9464, G__9465);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__9466 = self__.vec;
  var G__9467 = self__.node;
  var G__9468 = self__.i;
  var G__9469 = self__.off;
  var G__9470 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__9466, G__9467, G__9468, G__9469, G__9470) : cljs.core.chunked_seq.call(null, G__9466, G__9467, G__9468, G__9469, G__9470);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9471 = self__.vec;
    var G__9472 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9473 = end;
    var G__9474 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9471, G__9472, G__9473, G__9474) : cljs.core.chunked_seq.call(null, G__9471, G__9472, G__9473, G__9474);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var G__9476 = arguments.length;
  switch(G__9476) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__9479 = init__$1;
        var G__9480 = j;
        var G__9481 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9479, G__9480, G__9481) : f.call(null, G__9479, G__9480, G__9481);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9482 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9482) : cljs.core.deref.call(null, G__9482);
      } else {
        var G__9504 = i + 1;
        var G__9505 = j + 1;
        var G__9506 = init__$2;
        i = G__9504;
        j = G__9505;
        init__$1 = G__9506;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__9483 = self__.meta;
  var G__9484 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__9485 = self__.start;
  var G__9486 = function() {
    var x__4527__auto__ = self__.end;
    var y__4528__auto__ = v_pos + 1;
    return x__4527__auto__ > y__4528__auto__ ? x__4527__auto__ : y__4528__auto__;
  }();
  var G__9487 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9483, G__9484, G__9485, G__9486, G__9487) : cljs.core.build_subvec.call(null, G__9483, G__9484, G__9485, G__9486, G__9487);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__9488 = self__.meta;
    var G__9489 = self__.v;
    var G__9490 = self__.start;
    var G__9491 = self__.end - 1;
    var G__9492 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9488, G__9489, G__9490, G__9491, G__9492) : cljs.core.build_subvec.call(null, G__9488, G__9489, G__9490, G__9491, G__9492);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__9494 = meta__$1;
  var G__9495 = self__.v;
  var G__9496 = self__.start;
  var G__9497 = self__.end;
  var G__9498 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9494, G__9495, G__9496, G__9497, G__9498) : cljs.core.build_subvec.call(null, G__9494, G__9495, G__9496, G__9497, G__9498);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__9499 = self__.meta;
  var G__9500 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__9501 = self__.start;
  var G__9502 = self__.end + 1;
  var G__9503 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9499, G__9500, G__9501, G__9502, G__9503) : cljs.core.build_subvec.call(null, G__9499, G__9500, G__9501, G__9502, G__9503);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9507 = null;
  var G__9507__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9507__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9507 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9507__2.call(this, self__, k);
      case 3:
        return G__9507__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9507.cljs$core$IFn$_invoke$arity$2 = G__9507__2;
  G__9507.cljs$core$IFn$_invoke$arity$3 = G__9507__3;
  return G__9507;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9478) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9478)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9508 = meta;
      var G__9509 = v.v;
      var G__9510 = v.start + start;
      var G__9511 = v.start + end;
      var G__9512 = __hash;
      meta = G__9508;
      v = G__9509;
      start = G__9510;
      end = G__9511;
      __hash = G__9512;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var G__9514 = arguments.length;
  switch(G__9514) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj9519 = {};
    return obj9519;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__9527 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__9528 = level - 5;
        node = G__9527;
        level = G__9528;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9532 = null;
  var G__9532__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9532__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9532 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9532__2.call(this, self__, k);
      case 3:
        return G__9532__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9532.cljs$core$IFn$_invoke$arity$2 = G__9532__2;
  G__9532.cljs$core$IFn$_invoke$arity$3 = G__9532__3;
  return G__9532;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9529) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9529)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4420__auto__ = cljs.core.next(self__.front);
  if (temp__4420__auto__) {
    var f1 = temp__4420__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4420__auto__ = cljs.core.next(self__.front);
    if (temp__4420__auto__) {
      var f1 = temp__4420__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4215__auto__ = self__.front;
    if (cljs.core.truth_(or__4215__auto__)) {
      return or__4215__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4215__auto__ = self__.rear;
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9533 = i + incr;
        i = G__9533;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9534 = i + 1;
      var G__9535 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__9534;
      out = G__9535;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj9539 = {};
    return obj9539;
  }();
  var l = ks.length;
  var i_9540 = 0;
  while (true) {
    if (i_9540 < l) {
      var k_9541 = ks[i_9540];
      new_obj[k_9541] = obj[k_9541];
      var G__9542 = i_9540 + 1;
      i_9540 = G__9542;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = function() {
      var G__9546 = k;
      return goog.isString(G__9546);
    }();
    if (cljs.core.truth_(and__4203__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4203__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__9547 = init__$1;
        var G__9548 = k;
        var G__9549 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9547, G__9548, G__9549) : f.call(null, G__9547, G__9548, G__9549);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9550 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9550) : cljs.core.deref.call(null, G__9550);
      } else {
        var G__9556 = cljs.core.rest(keys__$1);
        var G__9557 = init__$2;
        keys__$1 = G__9556;
        init__$1 = G__9557;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = function() {
      var G__9552 = k;
      return goog.isString(G__9552);
    }();
    if (cljs.core.truth_(and__4203__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4203__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__9553 = k;
    return goog.isString(G__9553);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = function() {
      var G__9555 = k;
      return goog.isString(G__9555);
    }();
    if (cljs.core.truth_(and__4203__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4203__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__9543_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9543_SHARP_, self__.strobj[p1__9543_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9558 = null;
  var G__9558__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9558__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9558 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9558__2.call(this, self__, k);
      case 3:
        return G__9558__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9558.cljs$core$IFn$_invoke$arity$2 = G__9558__2;
  G__9558.cljs$core$IFn$_invoke$arity$3 = G__9558__3;
  return G__9558;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9544) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9544)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj9560 = {};
  return obj9560;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__9561 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9561, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9561, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"value":[k, v], "done":false};
  } else {
    return{"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"value":[x, x], "done":false};
  } else {
    return{"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__9562 = i + 2;
        i = G__9562;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__9563 = i + 2;
        i = G__9563;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__9564 = i + 2;
        i = G__9564;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__9565 = i + 2;
        i = G__9565;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__9566 = i + 2;
        i = G__9566;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4215__auto__ = function() {
        var G__9570 = k;
        return goog.isString(G__9570);
      }();
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9571 = 0;
  while (true) {
    if (i_9571 < l) {
      narr[i_9571] = arr[i_9571];
      var G__9572 = i_9571 + 1;
      i_9571 = G__9572;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9574 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9574) : cljs.core.keys.call(null, G__9574);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9575 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9575) : cljs.core.vals.call(null, G__9575);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9576 = cljs.core.seq(coll);
  var chunk__9577 = null;
  var count__9578 = 0;
  var i__9579 = 0;
  while (true) {
    if (i__9579 < count__9578) {
      var vec__9580 = chunk__9577.cljs$core$IIndexed$_nth$arity$2(null, i__9579);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9580, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9580, 1, null);
      var G__9581_9594 = v;
      var G__9582_9595 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9581_9594, G__9582_9595) : f.call(null, G__9581_9594, G__9582_9595);
      var G__9596 = seq__9576;
      var G__9597 = chunk__9577;
      var G__9598 = count__9578;
      var G__9599 = i__9579 + 1;
      seq__9576 = G__9596;
      chunk__9577 = G__9597;
      count__9578 = G__9598;
      i__9579 = G__9599;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9576);
      if (temp__4422__auto__) {
        var seq__9576__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9576__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__9576__$1);
          var G__9600 = cljs.core.chunk_rest(seq__9576__$1);
          var G__9601 = c__5000__auto__;
          var G__9602 = cljs.core.count(c__5000__auto__);
          var G__9603 = 0;
          seq__9576 = G__9600;
          chunk__9577 = G__9601;
          count__9578 = G__9602;
          i__9579 = G__9603;
          continue;
        } else {
          var vec__9583 = cljs.core.first(seq__9576__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9583, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9583, 1, null);
          var G__9584_9604 = v;
          var G__9585_9605 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9584_9604, G__9585_9605) : f.call(null, G__9584_9604, G__9585_9605);
          var G__9606 = cljs.core.next(seq__9576__$1);
          var G__9607 = null;
          var G__9608 = 0;
          var G__9609 = 0;
          seq__9576 = G__9606;
          chunk__9577 = G__9607;
          count__9578 = G__9608;
          i__9579 = G__9609;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__9586 = init__$1;
        var G__9587 = self__.arr[i];
        var G__9588 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9586, G__9587, G__9588) : f.call(null, G__9586, G__9587, G__9588);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9589 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9589) : cljs.core.deref.call(null, G__9589);
      } else {
        var G__9610 = i + 2;
        var G__9611 = init__$2;
        i = G__9610;
        init__$1 = G__9611;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__9590 = other;
    if (G__9590) {
      var bit__4882__auto__ = G__9590.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4882__auto__ || G__9590.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__9612 = i + 2;
              i = G__9612;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj9592 = {};
    return obj9592;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__9613 = s + 2;
            var G__9614 = d;
            s = G__9613;
            d = G__9614;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__9615 = s + 2;
            var G__9616 = d + 2;
            s = G__9615;
            d = G__9616;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__9593 = cljs.core.aclone(self__.arr);
        G__9593[idx + 1] = v;
        return G__9593;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9617 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9618 = cljs.core.next(es);
          ret = G__9617;
          es = G__9618;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9619 = null;
  var G__9619__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9619__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9619 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9619__2.call(this, self__, k);
      case 3:
        return G__9619__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9619.cljs$core$IFn$_invoke$arity$2 = G__9619__2;
  G__9619.cljs$core$IFn$_invoke$arity$3 = G__9619__3;
  return G__9619;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9573) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9573)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_9620 = 0;
    while (true) {
      if (i_9620 < arr__$1.length) {
        var k_9621 = arr__$1[i_9620];
        var v_9622 = arr__$1[i_9620 + 1];
        var idx_9623 = cljs.core.array_index_of(ret, k_9621);
        if (idx_9623 === -1) {
          ret.push(k_9621);
          ret.push(v_9622);
        } else {
        }
        var G__9624 = i_9620 + 2;
        i_9620 = G__9624;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__9625 = o;
      if (G__9625) {
        var bit__4889__auto__ = G__9625.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4889__auto__ || G__9625.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9625.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9625);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9625);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__9626 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9626) : cljs.core.key.call(null, G__9626);
      }(), function() {
        var G__9627 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9627) : cljs.core.val.call(null, G__9627);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4420__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          var G__9633 = cljs.core.next(es);
          var G__9634 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__9628 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9628) : cljs.core.key.call(null, G__9628);
          }(), function() {
            var G__9629 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9629) : cljs.core.val.call(null, G__9629);
          }());
          es = G__9633;
          tcoll__$2 = G__9634;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__9630 = self__.len;
          var G__9631 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__9630, G__9631) : cljs.core.array__GT_transient_hash_map.call(null, G__9630, G__9631);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9632_9635 = self__.arr;
      G__9632_9635.pop();
      G__9632_9635.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9636 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__9637 = i + 2;
      out = G__9636;
      i = G__9637;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var G__9639 = arguments.length;
  switch(G__9639) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__9640 = cljs.core.aclone(arr);
  G__9640[i] = a;
  return G__9640;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__9641 = cljs.core.aclone(arr);
  G__9641[i] = a;
  G__9641[j] = b;
  return G__9641;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var G__9644 = arguments.length;
  switch(G__9644) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__9650 = init__$1;
          var G__9651 = k;
          var G__9652 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9650, G__9651, G__9652) : f.call(null, G__9650, G__9651, G__9652);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9653 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9653) : cljs.core.deref.call(null, G__9653);
      } else {
        var G__9654 = i + 2;
        var G__9655 = init__$2;
        i = G__9654;
        init__$1 = G__9655;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9656 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9656) : cljs.core.create_inode_seq.call(null, G__9656);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9670 = 0;
        var j_9671 = 0;
        while (true) {
          if (i_9670 < 32) {
            if ((self__.bitmap >>> i_9670 & 1) === 0) {
              var G__9672 = i_9670 + 1;
              var G__9673 = j_9671;
              i_9670 = G__9672;
              j_9671 = G__9673;
              continue;
            } else {
              nodes[i_9670] = !(self__.arr[j_9671] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_9671]), self__.arr[j_9671], self__.arr[j_9671 + 1], added_leaf_QMARK_) : self__.arr[j_9671 + 1];
              var G__9674 = i_9670 + 1;
              var G__9675 = j_9671 + 2;
              i_9670 = G__9674;
              j_9671 = G__9675;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__9657 = edit__$1;
          var G__9658 = shift + 5;
          var G__9659 = key_or_nil;
          var G__9660 = val_or_node;
          var G__9661 = hash;
          var G__9662 = key;
          var G__9663 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__9657, G__9658, G__9659, G__9660, G__9661, G__9662, G__9663) : cljs.core.create_node.call(null, G__9657, G__9658, G__9659, G__9660, G__9661, G__9662, G__9663);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9676 = 0;
      var j_9677 = 0;
      while (true) {
        if (i_9676 < 32) {
          if ((self__.bitmap >>> i_9676 & 1) === 0) {
            var G__9678 = i_9676 + 1;
            var G__9679 = j_9677;
            i_9676 = G__9678;
            j_9677 = G__9679;
            continue;
          } else {
            nodes[i_9676] = !(self__.arr[j_9677] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_9677]), self__.arr[j_9677], self__.arr[j_9677 + 1], added_leaf_QMARK_) : self__.arr[j_9677 + 1];
            var G__9680 = i_9676 + 1;
            var G__9681 = j_9677 + 2;
            i_9676 = G__9680;
            j_9677 = G__9681;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__9664 = shift + 5;
          var G__9665 = key_or_nil;
          var G__9666 = val_or_node;
          var G__9667 = hash;
          var G__9668 = key;
          var G__9669 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__9664, G__9665, G__9666, G__9667, G__9668, G__9669) : cljs.core.create_node.call(null, G__9664, G__9665, G__9666, G__9667, G__9668, G__9669);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9682 = i + 1;
        var G__9683 = j + 2;
        var G__9684 = bitmap | 1 << i;
        i = G__9682;
        j = G__9683;
        bitmap = G__9684;
        continue;
      } else {
        var G__9685 = i + 1;
        var G__9686 = j;
        var G__9687 = bitmap;
        i = G__9685;
        j = G__9686;
        bitmap = G__9687;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9688 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__9688) : cljs.core.create_array_node_seq.call(null, G__9688);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__9689 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9689) : cljs.core.deref.call(null, G__9689);
        } else {
          var G__9690 = i + 1;
          var G__9691 = init__$2;
          i = G__9690;
          init__$1 = G__9691;
          continue;
        }
      } else {
        var G__9692 = i + 1;
        var G__9693 = init__$1;
        i = G__9692;
        init__$1 = G__9693;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__9694 = i + 2;
        i = G__9694;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9695 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9695) : cljs.core.create_inode_seq.call(null, G__9695);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var G__9697 = arguments.length;
  switch(G__9697) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__9699 = self__.nodes;
    var G__9700 = self__.i + 2;
    var G__9701 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9699, G__9700, G__9701) : cljs.core.create_inode_seq.call(null, G__9699, G__9700, G__9701);
  } else {
    var G__9702 = self__.nodes;
    var G__9703 = self__.i;
    var G__9704 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9702, G__9703, G__9704) : cljs.core.create_inode_seq.call(null, G__9702, G__9703, G__9704);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var G__9706 = arguments.length;
  switch(G__9706) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4420__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4420__auto__)) {
            var node = temp__4420__auto__;
            var temp__4420__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4420__auto____$1)) {
              var node_seq = temp__4420__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__9708 = j + 2;
              j = G__9708;
              continue;
            }
          } else {
            var G__9709 = j + 2;
            j = G__9709;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__9710 = null;
  var G__9711 = self__.nodes;
  var G__9712 = self__.i;
  var G__9713 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__9710, G__9711, G__9712, G__9713) : cljs.core.create_array_node_seq.call(null, G__9710, G__9711, G__9712, G__9713);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var G__9715 = arguments.length;
  switch(G__9715) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4420__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4420__auto__)) {
          var nj = temp__4420__auto__;
          var temp__4420__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4420__auto____$1)) {
            var ns = temp__4420__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__9717 = j + 1;
            j = G__9717;
            continue;
          }
        } else {
          var G__9718 = j + 1;
          j = G__9718;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9720 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9720) : cljs.core.keys.call(null, G__9720);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9721 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9721) : cljs.core.vals.call(null, G__9721);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9722 = cljs.core.seq(coll);
  var chunk__9723 = null;
  var count__9724 = 0;
  var i__9725 = 0;
  while (true) {
    if (i__9725 < count__9724) {
      var vec__9726 = chunk__9723.cljs$core$IIndexed$_nth$arity$2(null, i__9725);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9726, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9726, 1, null);
      var G__9727_9738 = v;
      var G__9728_9739 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9727_9738, G__9728_9739) : f.call(null, G__9727_9738, G__9728_9739);
      var G__9740 = seq__9722;
      var G__9741 = chunk__9723;
      var G__9742 = count__9724;
      var G__9743 = i__9725 + 1;
      seq__9722 = G__9740;
      chunk__9723 = G__9741;
      count__9724 = G__9742;
      i__9725 = G__9743;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9722);
      if (temp__4422__auto__) {
        var seq__9722__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9722__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__9722__$1);
          var G__9744 = cljs.core.chunk_rest(seq__9722__$1);
          var G__9745 = c__5000__auto__;
          var G__9746 = cljs.core.count(c__5000__auto__);
          var G__9747 = 0;
          seq__9722 = G__9744;
          chunk__9723 = G__9745;
          count__9724 = G__9746;
          i__9725 = G__9747;
          continue;
        } else {
          var vec__9729 = cljs.core.first(seq__9722__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9729, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9729, 1, null);
          var G__9730_9748 = v;
          var G__9731_9749 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9730_9748, G__9731_9749) : f.call(null, G__9730_9748, G__9731_9749);
          var G__9750 = cljs.core.next(seq__9722__$1);
          var G__9751 = null;
          var G__9752 = 0;
          var G__9753 = 0;
          seq__9722 = G__9750;
          chunk__9723 = G__9751;
          count__9724 = G__9752;
          i__9725 = G__9753;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__9732 = init;
    var G__9733 = null;
    var G__9734 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9732, G__9733, G__9734) : f.call(null, G__9732, G__9733, G__9734);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9735 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9735) : cljs.core.deref.call(null, G__9735);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj9737 = {};
    return obj9737;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9754 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9755 = cljs.core.next(es);
          ret = G__9754;
          es = G__9755;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9756 = null;
  var G__9756__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9756__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9756 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9756__2.call(this, self__, k);
      case 3:
        return G__9756__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9756.cljs$core$IFn$_invoke$arity$2 = G__9756__2;
  G__9756.cljs$core$IFn$_invoke$arity$3 = G__9756__3;
  return G__9756;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9719) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9719)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9757 = i + 2;
      var G__9758 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__9757;
      ret = G__9758;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9759 = i + 1;
      var G__9760 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__9759;
      out = G__9760;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__9761 = o;
      if (G__9761) {
        var bit__4889__auto__ = G__9761.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4889__auto__ || G__9761.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9761.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9761);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9761);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__9762 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9762) : cljs.core.key.call(null, G__9762);
      }(), function() {
        var G__9763 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9763) : cljs.core.val.call(null, G__9763);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4420__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          var G__9766 = cljs.core.next(es);
          var G__9767 = tcoll__$1.assoc_BANG_(function() {
            var G__9764 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9764) : cljs.core.key.call(null, G__9764);
          }(), function() {
            var G__9765 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9765) : cljs.core.val.call(null, G__9765);
          }());
          es = G__9766;
          tcoll__$1 = G__9767;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9768 = ascending_QMARK_ ? t.left : t.right;
      var G__9769 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__9768;
      stack__$1 = G__9769;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9782 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9782) : cljs.core.deref.call(null, G__9782);
  } else {
    var init__$2 = function() {
      var G__9783 = init__$1;
      var G__9784 = node.key;
      var G__9785 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9783, G__9784, G__9785) : f.call(null, G__9783, G__9784, G__9785);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__9786 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9786) : cljs.core.deref.call(null, G__9786);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__9787 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9787) : cljs.core.deref.call(null, G__9787);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9789 = null;
  var G__9789__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9789__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9789 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9789__2.call(this, self__, k);
      case 3:
        return G__9789__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9789.cljs$core$IFn$_invoke$arity$2 = G__9789__2;
  G__9789.cljs$core$IFn$_invoke$arity$3 = G__9789__3;
  return G__9789;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9788) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9788)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9791 = null;
  var G__9791__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9791__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9791 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9791__2.call(this, self__, k);
      case 3:
        return G__9791__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9791.cljs$core$IFn$_invoke$arity$2 = G__9791__2;
  G__9791.cljs$core$IFn$_invoke$arity$3 = G__9791__3;
  return G__9791;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9790) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9790)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__9804 = k;
      var G__9805 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9804, G__9805) : comp.call(null, G__9804, G__9805);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__9824 = k;
      var G__9825 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9824, G__9825) : comp.call(null, G__9824, G__9825);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__9836 = k;
    var G__9837 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9836, G__9837) : comp.call(null, G__9836, G__9837);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9839 = cljs.core.seq(coll);
  var chunk__9840 = null;
  var count__9841 = 0;
  var i__9842 = 0;
  while (true) {
    if (i__9842 < count__9841) {
      var vec__9843 = chunk__9840.cljs$core$IIndexed$_nth$arity$2(null, i__9842);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9843, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9843, 1, null);
      var G__9844_9856 = v;
      var G__9845_9857 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9844_9856, G__9845_9857) : f.call(null, G__9844_9856, G__9845_9857);
      var G__9858 = seq__9839;
      var G__9859 = chunk__9840;
      var G__9860 = count__9841;
      var G__9861 = i__9842 + 1;
      seq__9839 = G__9858;
      chunk__9840 = G__9859;
      count__9841 = G__9860;
      i__9842 = G__9861;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9839);
      if (temp__4422__auto__) {
        var seq__9839__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9839__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__9839__$1);
          var G__9862 = cljs.core.chunk_rest(seq__9839__$1);
          var G__9863 = c__5000__auto__;
          var G__9864 = cljs.core.count(c__5000__auto__);
          var G__9865 = 0;
          seq__9839 = G__9862;
          chunk__9840 = G__9863;
          count__9841 = G__9864;
          i__9842 = G__9865;
          continue;
        } else {
          var vec__9846 = cljs.core.first(seq__9839__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9846, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9846, 1, null);
          var G__9847_9866 = v;
          var G__9848_9867 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9847_9866, G__9848_9867) : f.call(null, G__9847_9866, G__9848_9867);
          var G__9868 = cljs.core.next(seq__9839__$1);
          var G__9869 = null;
          var G__9870 = 0;
          var G__9871 = 0;
          seq__9839 = G__9868;
          chunk__9840 = G__9869;
          count__9841 = G__9870;
          i__9842 = G__9871;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9849 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9849) : cljs.core.keys.call(null, G__9849);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9850 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9850) : cljs.core.vals.call(null, G__9850);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__9851 = k;
        var G__9852 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9851, G__9852) : self__.comp.call(null, G__9851, G__9852);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9872 = t.left;
          t = G__9872;
          continue;
        } else {
          var G__9873 = t.right;
          t = G__9873;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9874 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9875 = cljs.core.next(es);
          ret = G__9874;
          es = G__9875;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9876 = null;
  var G__9876__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9876__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9876 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9876__2.call(this, self__, k);
      case 3:
        return G__9876__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9876.cljs$core$IFn$_invoke$arity$2 = G__9876__2;
  G__9876.cljs$core$IFn$_invoke$arity$3 = G__9876__3;
  return G__9876;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9838) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9838)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__9853 = k;
          var G__9854 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9853, G__9854) : self__.comp.call(null, G__9853, G__9854);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9877 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9878 = t.left;
              stack = G__9877;
              t = G__9878;
              continue;
            } else {
              var G__9879 = stack;
              var G__9880 = t.right;
              stack = G__9879;
              t = G__9880;
              continue;
            }
          } else {
            if (c > 0) {
              var G__9881 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9882 = t.right;
              stack = G__9881;
              t = G__9882;
              continue;
            } else {
              var G__9883 = stack;
              var G__9884 = t.left;
              stack = G__9883;
              t = G__9884;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__9855 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9855) : cljs.core.key.call(null, G__9855);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__9886 = cljs.core.nnext(in$);
      var G__9887 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__9886;
      out = G__9887;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq9885) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9885));
};
cljs.core.array_map = function cljs$core$array_map() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq9888) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9888));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = function() {
    var obj9891 = {};
    return obj9891;
  }();
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__9892 = cljs.core.nnext(kvs);
      kvs = G__9892;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq9889) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9889));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__9894 = cljs.core.nnext(in$);
      var G__9895 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__9894;
      out = G__9895;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq9893) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9893));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__9898 = cljs.core.nnext(in$);
      var G__9899 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__9898;
      out = G__9899;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq9896) {
  var G__9897 = cljs.core.first(seq9896);
  var seq9896__$1 = cljs.core.next(seq9896);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__9897, seq9896__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9900 = self__.mseq;
    if (G__9900) {
      var bit__4889__auto__ = G__9900.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4889__auto__ || G__9900.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9900.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9900);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9900);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9901 = self__.mseq;
    if (G__9901) {
      var bit__4889__auto__ = G__9901.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4889__auto__ || G__9901.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9901.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9901);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9901);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4422__auto__ = cljs.core.seq(hash_map);
  if (temp__4422__auto__) {
    var mseq = temp__4422__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9902 = self__.mseq;
    if (G__9902) {
      var bit__4889__auto__ = G__9902.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4889__auto__ || G__9902.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9902.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9902);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9902);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9903 = self__.mseq;
    if (G__9903) {
      var bit__4889__auto__ = G__9903.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4889__auto__ || G__9903.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9903.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9903);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9903);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4422__auto__ = cljs.core.seq(hash_map);
  if (temp__4422__auto__) {
    var mseq = temp__4422__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__9904_SHARP_, p2__9905_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4215__auto__ = p1__9904_SHARP_;
        if (cljs.core.truth_(or__4215__auto__)) {
          return or__4215__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__9905_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq9906) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9906));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__9909 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__9910 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9909, G__9910) : f.call(null, G__9909, G__9910);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4215__auto__ = m1;
          if (cljs.core.truth_(or__4215__auto__)) {
            return or__4215__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq9907) {
  var G__9908 = cljs.core.first(seq9907);
  var seq9907__$1 = cljs.core.next(seq9907);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__9908, seq9907__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__9911 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__9912 = cljs.core.next(keys);
      ret = G__9911;
      keys = G__9912;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9915 = cljs.core.seq(coll);
  var chunk__9916 = null;
  var count__9917 = 0;
  var i__9918 = 0;
  while (true) {
    if (i__9918 < count__9917) {
      var vec__9919 = chunk__9916.cljs$core$IIndexed$_nth$arity$2(null, i__9918);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9919, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9919, 1, null);
      var G__9920_9925 = v;
      var G__9921_9926 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9920_9925, G__9921_9926) : f.call(null, G__9920_9925, G__9921_9926);
      var G__9927 = seq__9915;
      var G__9928 = chunk__9916;
      var G__9929 = count__9917;
      var G__9930 = i__9918 + 1;
      seq__9915 = G__9927;
      chunk__9916 = G__9928;
      count__9917 = G__9929;
      i__9918 = G__9930;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9915);
      if (temp__4422__auto__) {
        var seq__9915__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9915__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__9915__$1);
          var G__9931 = cljs.core.chunk_rest(seq__9915__$1);
          var G__9932 = c__5000__auto__;
          var G__9933 = cljs.core.count(c__5000__auto__);
          var G__9934 = 0;
          seq__9915 = G__9931;
          chunk__9916 = G__9932;
          count__9917 = G__9933;
          i__9918 = G__9934;
          continue;
        } else {
          var vec__9922 = cljs.core.first(seq__9915__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9922, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9922, 1, null);
          var G__9923_9935 = v;
          var G__9924_9936 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9923_9935, G__9924_9936) : f.call(null, G__9923_9935, G__9924_9936);
          var G__9937 = cljs.core.next(seq__9915__$1);
          var G__9938 = null;
          var G__9939 = 0;
          var G__9940 = 0;
          seq__9915 = G__9937;
          chunk__9916 = G__9938;
          count__9917 = G__9939;
          i__9918 = G__9940;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__9913_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__9913_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__9941 = null;
  var G__9941__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9941__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9941 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9941__2.call(this, self__, k);
      case 3:
        return G__9941__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9941.cljs$core$IFn$_invoke$arity$2 = G__9941__2;
  G__9941.cljs$core$IFn$_invoke$arity$3 = G__9941__3;
  return G__9941;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args9914) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9914)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9942 = i + 1;
        var G__9943 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__9942;
        out = G__9943;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__9944 = i + 1;
        var G__9945 = cljs.core._conj_BANG_(out, items[i]);
        i = G__9944;
        out = G__9945;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__9947 = null;
  var G__9947__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__9947__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__9947 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9947__2.call(this, self__, k);
      case 3:
        return G__9947__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9947.cljs$core$IFn$_invoke$arity$2 = G__9947__2;
  G__9947.cljs$core$IFn$_invoke$arity$3 = G__9947__3;
  return G__9947;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args9946) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9946)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9950 = cljs.core.seq(coll);
  var chunk__9951 = null;
  var count__9952 = 0;
  var i__9953 = 0;
  while (true) {
    if (i__9953 < count__9952) {
      var vec__9954 = chunk__9951.cljs$core$IIndexed$_nth$arity$2(null, i__9953);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9954, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9954, 1, null);
      var G__9955_9960 = v;
      var G__9956_9961 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9955_9960, G__9956_9961) : f.call(null, G__9955_9960, G__9956_9961);
      var G__9962 = seq__9950;
      var G__9963 = chunk__9951;
      var G__9964 = count__9952;
      var G__9965 = i__9953 + 1;
      seq__9950 = G__9962;
      chunk__9951 = G__9963;
      count__9952 = G__9964;
      i__9953 = G__9965;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9950);
      if (temp__4422__auto__) {
        var seq__9950__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9950__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__9950__$1);
          var G__9966 = cljs.core.chunk_rest(seq__9950__$1);
          var G__9967 = c__5000__auto__;
          var G__9968 = cljs.core.count(c__5000__auto__);
          var G__9969 = 0;
          seq__9950 = G__9966;
          chunk__9951 = G__9967;
          count__9952 = G__9968;
          i__9953 = G__9969;
          continue;
        } else {
          var vec__9957 = cljs.core.first(seq__9950__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9957, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9957, 1, null);
          var G__9958_9970 = v;
          var G__9959_9971 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9958_9970, G__9959_9971) : f.call(null, G__9958_9970, G__9959_9971);
          var G__9972 = cljs.core.next(seq__9950__$1);
          var G__9973 = null;
          var G__9974 = 0;
          var G__9975 = 0;
          seq__9950 = G__9972;
          chunk__9951 = G__9973;
          count__9952 = G__9974;
          i__9953 = G__9975;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__9948_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__9948_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__9976 = null;
  var G__9976__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9976__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9976 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9976__2.call(this, self__, k);
      case 3:
        return G__9976__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9976.cljs$core$IFn$_invoke$arity$2 = G__9976__2;
  G__9976.cljs$core$IFn$_invoke$arity$3 = G__9976__3;
  return G__9976;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args9949) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9949)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5094__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5094__auto__.length) {
        var G__9977 = i + 1;
        var G__9978 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__9977;
        res = G__9978;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__9979 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__9980 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__9979;
          out = G__9980;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var G__9983 = arguments.length;
  switch(G__9983) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5266__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq9981) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9981));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq9985) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9985));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq9986) {
  var G__9987 = cljs.core.first(seq9986);
  var seq9986__$1 = cljs.core.next(seq9986);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__9987, seq9986__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var G__9991 = arguments.length;
  switch(G__9991) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__9988_SHARP_) {
    var temp__4420__auto__ = cljs.core.find(smap, p1__9988_SHARP_);
    if (cljs.core.truth_(temp__4420__auto__)) {
      var e = temp__4420__auto__;
      return cljs.core.val(e);
    } else {
      return p1__9988_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4420__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__9989_SHARP_) {
      var temp__4420__auto__ = cljs.core.find(smap, p1__9989_SHARP_);
      if (cljs.core.truth_(temp__4420__auto__)) {
        var e = temp__4420__auto__;
        return cljs.core.second(e);
      } else {
        return p1__9989_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var G__9994 = arguments.length;
  switch(G__9994) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__10006 = null;
        var G__10006__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10006__1 = function(result) {
          var G__9995 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9995) : rf.call(null, G__9995);
        };
        var G__10006__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(function() {
            var G__9996 = seen;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9996) : cljs.core.deref.call(null, G__9996);
          }(), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            var G__9997 = result;
            var G__9998 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9997, G__9998) : rf.call(null, G__9997, G__9998);
          }
        };
        G__10006 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10006__0.call(this);
            case 1:
              return G__10006__1.call(this, result);
            case 2:
              return G__10006__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10006.cljs$core$IFn$_invoke$arity$0 = G__10006__0;
        G__10006.cljs$core$IFn$_invoke$arity$1 = G__10006__1;
        G__10006.cljs$core$IFn$_invoke$arity$2 = G__10006__2;
        return G__10006;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__10003, seen__$1) {
        while (true) {
          var vec__10004 = p__10003;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10004, 0, null);
          var xs__$1 = vec__10004;
          var temp__4422__auto__ = cljs.core.seq(xs__$1);
          if (temp__4422__auto__) {
            var s = temp__4422__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__10007 = cljs.core.rest(s);
              var G__10008 = seen__$1;
              p__10003 = G__10007;
              seen__$1 = G__10008;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__10009 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__10010 = cljs.core.next(s__$1);
      ret = G__10009;
      s__$1 = G__10010;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__10012 = x;
    if (G__10012) {
      var bit__4882__auto__ = G__10012.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4882__auto__ || G__10012.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__10013 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__10014 = cljs.core.next(ks);
      var G__10015 = cljs.core.next(vs);
      map = G__10013;
      ks = G__10014;
      vs = G__10015;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var G__10023 = arguments.length;
  switch(G__10023) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__10024 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10024) : k.call(null, G__10024);
  }() > function() {
    var G__10025 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10025) : k.call(null, G__10025);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10016_SHARP_, p2__10017_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__10016_SHARP_, p2__10017_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq10018) {
  var G__10019 = cljs.core.first(seq10018);
  var seq10018__$1 = cljs.core.next(seq10018);
  var G__10020 = cljs.core.first(seq10018__$1);
  var seq10018__$2 = cljs.core.next(seq10018__$1);
  var G__10021 = cljs.core.first(seq10018__$2);
  var seq10018__$3 = cljs.core.next(seq10018__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__10019, G__10020, G__10021, seq10018__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var G__10034 = arguments.length;
  switch(G__10034) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__10035 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10035) : k.call(null, G__10035);
  }() < function() {
    var G__10036 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10036) : k.call(null, G__10036);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10027_SHARP_, p2__10028_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10027_SHARP_, p2__10028_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq10029) {
  var G__10030 = cljs.core.first(seq10029);
  var seq10029__$1 = cljs.core.next(seq10029);
  var G__10031 = cljs.core.first(seq10029__$1);
  var seq10029__$2 = cljs.core.next(seq10029__$1);
  var G__10032 = cljs.core.first(seq10029__$2);
  var seq10029__$3 = cljs.core.next(seq10029__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__10030, G__10031, G__10032, seq10029__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var G__10039 = arguments.length;
  switch(G__10039) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__10046 = null;
        var G__10046__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10046__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__10040 = result;
              var G__10041 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10040, G__10041) : rf.call(null, G__10040, G__10041);
            }());
          }();
          var G__10042 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10042) : rf.call(null, G__10042);
        };
        var G__10046__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var G__10043 = result;
            var G__10044 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10043, G__10044) : rf.call(null, G__10043, G__10044);
          } else {
            return result;
          }
        };
        G__10046 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10046__0.call(this);
            case 1:
              return G__10046__1.call(this, result);
            case 2:
              return G__10046__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10046.cljs$core$IFn$_invoke$arity$0 = G__10046__0;
        G__10046.cljs$core$IFn$_invoke$arity$1 = G__10046__1;
        G__10046.cljs$core$IFn$_invoke$arity$2 = G__10046__2;
        return G__10046;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var G__10048 = arguments.length;
  switch(G__10048) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__10055 = null;
      var G__10055__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10055__1 = function(result) {
        var G__10049 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10049) : rf.call(null, G__10049);
      };
      var G__10055__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__10050 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10050) : pred.call(null, G__10050);
        }())) {
          var G__10051 = result;
          var G__10052 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10051, G__10052) : rf.call(null, G__10051, G__10052);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__10055 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10055__0.call(this);
          case 1:
            return G__10055__1.call(this, result);
          case 2:
            return G__10055__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10055.cljs$core$IFn$_invoke$arity$0 = G__10055__0;
      G__10055.cljs$core$IFn$_invoke$arity$1 = G__10055__1;
      G__10055.cljs$core$IFn$_invoke$arity$2 = G__10055__2;
      return G__10055;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.truth_(function() {
        var G__10053 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10053) : pred.call(null, G__10053);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10060 = function() {
      var G__10062 = cljs.core._entry_key(sc, e);
      var G__10063 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10062, G__10063) : comp.call(null, G__10062, G__10063);
    }();
    var G__10061 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10060, G__10061) : test.call(null, G__10060, G__10061);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var G__10065 = arguments.length;
  switch(G__10065) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var vec__10066 = temp__4422__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10066, 0, null);
      var s = vec__10066;
      if (cljs.core.truth_(function() {
        var G__10067 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10067) : include.call(null, G__10067);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var vec__10068 = temp__4422__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10068, 0, null);
    var s = vec__10068;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var G__10071 = arguments.length;
  switch(G__10071) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var vec__10072 = temp__4422__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10072, 0, null);
      var s = vec__10072;
      if (cljs.core.truth_(function() {
        var G__10073 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10073) : include.call(null, G__10073);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var vec__10074 = temp__4422__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10074, 0, null);
    var s = vec__10074;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10076 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__10076) : Math.ceil.call(null, G__10076);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__10077 = ret;
        var G__10078 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10077, G__10078) : f.call(null, G__10077, G__10078);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__10079 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10079) : cljs.core.deref.call(null, G__10079);
      } else {
        var G__10080 = i + self__.step;
        var G__10081 = ret__$1;
        i = G__10080;
        ret = G__10081;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.range = function cljs$core$range() {
  var G__10083 = arguments.length;
  switch(G__10083) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var G__10086 = arguments.length;
  switch(G__10086) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__10091 = null;
        var G__10091__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10091__1 = function(result) {
          var G__10087 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10087) : rf.call(null, G__10087);
        };
        var G__10091__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            var G__10088 = result;
            var G__10089 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10088, G__10089) : rf.call(null, G__10088, G__10089);
          } else {
            return result;
          }
        };
        G__10091 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10091__0.call(this);
            case 1:
              return G__10091__1.call(this, result);
            case 2:
              return G__10091__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10091.cljs$core$IFn$_invoke$arity$0 = G__10091__0;
        G__10091.cljs$core$IFn$_invoke$arity$1 = G__10091__1;
        G__10091.cljs$core$IFn$_invoke$arity$2 = G__10091__2;
        return G__10091;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var G__10094 = arguments.length;
  switch(G__10094) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__10105 = null;
        var G__10105__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10105__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__10095 = result;
              var G__10096 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10095, G__10096) : rf.call(null, G__10095, G__10096);
            }());
          }();
          var G__10097 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10097) : rf.call(null, G__10097);
        };
        var G__10105__2 = function(result, input) {
          var pval = function() {
            var G__10098 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10098) : cljs.core.deref.call(null, G__10098);
          }();
          var val = function() {
            var G__10099 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10099) : f.call(null, G__10099);
          }();
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = function() {
              var G__10100 = result;
              var G__10101 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10100, G__10101) : rf.call(null, G__10100, G__10101);
            }();
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__10105 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10105__0.call(this);
            case 1:
              return G__10105__1.call(this, result);
            case 2:
              return G__10105__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10105.cljs$core$IFn$_invoke$arity$0 = G__10105__0;
        G__10105.cljs$core$IFn$_invoke$arity$1 = G__10105__1;
        G__10105.cljs$core$IFn$_invoke$arity$2 = G__10105__2;
        return G__10105;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var fst = cljs.core.first(s);
      var fv = function() {
        var G__10102 = fst;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10102) : f.call(null, G__10102);
      }();
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4422__auto__) {
        return function(p1__10092_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
            var G__10103 = p1__10092_SHARP_;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10103) : f.call(null, G__10103);
          }());
        };
      }(fst, fv, s, temp__4422__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var G__10107 = arguments.length;
  switch(G__10107) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4420__auto__ = cljs.core.seq(coll);
    if (temp__4420__auto__) {
      var s = temp__4420__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__10108 = init;
        var G__10109 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10108, G__10109) : f.call(null, G__10108, G__10109);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var G__10126 = arguments.length;
  switch(G__10126) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__10170 = null;
    var G__10170__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }()], null);
    };
    var G__10170__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10127 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10127) : f.call(null, G__10127);
      }()], null);
    };
    var G__10170__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10128 = x;
        var G__10129 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10128, G__10129) : f.call(null, G__10128, G__10129);
      }()], null);
    };
    var G__10170__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10130 = x;
        var G__10131 = y;
        var G__10132 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10130, G__10131, G__10132) : f.call(null, G__10130, G__10131, G__10132);
      }()], null);
    };
    var G__10170__4 = function() {
      var G__10171__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__10171 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10172__i = 0, G__10172__a = new Array(arguments.length - 3);
          while (G__10172__i < G__10172__a.length) {
            G__10172__a[G__10172__i] = arguments[G__10172__i + 3];
            ++G__10172__i;
          }
          args = new cljs.core.IndexedSeq(G__10172__a, 0);
        }
        return G__10171__delegate.call(this, x, y, z, args);
      };
      G__10171.cljs$lang$maxFixedArity = 3;
      G__10171.cljs$lang$applyTo = function(arglist__10173) {
        var x = cljs.core.first(arglist__10173);
        arglist__10173 = cljs.core.next(arglist__10173);
        var y = cljs.core.first(arglist__10173);
        arglist__10173 = cljs.core.next(arglist__10173);
        var z = cljs.core.first(arglist__10173);
        var args = cljs.core.rest(arglist__10173);
        return G__10171__delegate(x, y, z, args);
      };
      G__10171.cljs$core$IFn$_invoke$arity$variadic = G__10171__delegate;
      return G__10171;
    }();
    G__10170 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10170__0.call(this);
        case 1:
          return G__10170__1.call(this, x);
        case 2:
          return G__10170__2.call(this, x, y);
        case 3:
          return G__10170__3.call(this, x, y, z);
        default:
          var G__10174 = null;
          if (arguments.length > 3) {
            var G__10175__i = 0, G__10175__a = new Array(arguments.length - 3);
            while (G__10175__i < G__10175__a.length) {
              G__10175__a[G__10175__i] = arguments[G__10175__i + 3];
              ++G__10175__i;
            }
            G__10174 = new cljs.core.IndexedSeq(G__10175__a, 0);
          }
          return G__10170__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10174);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10170.cljs$lang$maxFixedArity = 3;
    G__10170.cljs$lang$applyTo = G__10170__4.cljs$lang$applyTo;
    G__10170.cljs$core$IFn$_invoke$arity$0 = G__10170__0;
    G__10170.cljs$core$IFn$_invoke$arity$1 = G__10170__1;
    G__10170.cljs$core$IFn$_invoke$arity$2 = G__10170__2;
    G__10170.cljs$core$IFn$_invoke$arity$3 = G__10170__3;
    G__10170.cljs$core$IFn$_invoke$arity$variadic = G__10170__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10170;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__10176 = null;
    var G__10176__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }()], null);
    };
    var G__10176__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10133 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10133) : f.call(null, G__10133);
      }(), function() {
        var G__10134 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10134) : g.call(null, G__10134);
      }()], null);
    };
    var G__10176__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10135 = x;
        var G__10136 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10135, G__10136) : f.call(null, G__10135, G__10136);
      }(), function() {
        var G__10137 = x;
        var G__10138 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10137, G__10138) : g.call(null, G__10137, G__10138);
      }()], null);
    };
    var G__10176__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10139 = x;
        var G__10140 = y;
        var G__10141 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10139, G__10140, G__10141) : f.call(null, G__10139, G__10140, G__10141);
      }(), function() {
        var G__10142 = x;
        var G__10143 = y;
        var G__10144 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10142, G__10143, G__10144) : g.call(null, G__10142, G__10143, G__10144);
      }()], null);
    };
    var G__10176__4 = function() {
      var G__10177__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__10177 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10178__i = 0, G__10178__a = new Array(arguments.length - 3);
          while (G__10178__i < G__10178__a.length) {
            G__10178__a[G__10178__i] = arguments[G__10178__i + 3];
            ++G__10178__i;
          }
          args = new cljs.core.IndexedSeq(G__10178__a, 0);
        }
        return G__10177__delegate.call(this, x, y, z, args);
      };
      G__10177.cljs$lang$maxFixedArity = 3;
      G__10177.cljs$lang$applyTo = function(arglist__10179) {
        var x = cljs.core.first(arglist__10179);
        arglist__10179 = cljs.core.next(arglist__10179);
        var y = cljs.core.first(arglist__10179);
        arglist__10179 = cljs.core.next(arglist__10179);
        var z = cljs.core.first(arglist__10179);
        var args = cljs.core.rest(arglist__10179);
        return G__10177__delegate(x, y, z, args);
      };
      G__10177.cljs$core$IFn$_invoke$arity$variadic = G__10177__delegate;
      return G__10177;
    }();
    G__10176 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10176__0.call(this);
        case 1:
          return G__10176__1.call(this, x);
        case 2:
          return G__10176__2.call(this, x, y);
        case 3:
          return G__10176__3.call(this, x, y, z);
        default:
          var G__10180 = null;
          if (arguments.length > 3) {
            var G__10181__i = 0, G__10181__a = new Array(arguments.length - 3);
            while (G__10181__i < G__10181__a.length) {
              G__10181__a[G__10181__i] = arguments[G__10181__i + 3];
              ++G__10181__i;
            }
            G__10180 = new cljs.core.IndexedSeq(G__10181__a, 0);
          }
          return G__10176__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10180);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10176.cljs$lang$maxFixedArity = 3;
    G__10176.cljs$lang$applyTo = G__10176__4.cljs$lang$applyTo;
    G__10176.cljs$core$IFn$_invoke$arity$0 = G__10176__0;
    G__10176.cljs$core$IFn$_invoke$arity$1 = G__10176__1;
    G__10176.cljs$core$IFn$_invoke$arity$2 = G__10176__2;
    G__10176.cljs$core$IFn$_invoke$arity$3 = G__10176__3;
    G__10176.cljs$core$IFn$_invoke$arity$variadic = G__10176__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10176;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__10182 = null;
    var G__10182__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }(), function() {
        return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
      }()], null);
    };
    var G__10182__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10145 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10145) : f.call(null, G__10145);
      }(), function() {
        var G__10146 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10146) : g.call(null, G__10146);
      }(), function() {
        var G__10147 = x;
        return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__10147) : h.call(null, G__10147);
      }()], null);
    };
    var G__10182__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10148 = x;
        var G__10149 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10148, G__10149) : f.call(null, G__10148, G__10149);
      }(), function() {
        var G__10150 = x;
        var G__10151 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10150, G__10151) : g.call(null, G__10150, G__10151);
      }(), function() {
        var G__10152 = x;
        var G__10153 = y;
        return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__10152, G__10153) : h.call(null, G__10152, G__10153);
      }()], null);
    };
    var G__10182__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10154 = x;
        var G__10155 = y;
        var G__10156 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10154, G__10155, G__10156) : f.call(null, G__10154, G__10155, G__10156);
      }(), function() {
        var G__10157 = x;
        var G__10158 = y;
        var G__10159 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10157, G__10158, G__10159) : g.call(null, G__10157, G__10158, G__10159);
      }(), function() {
        var G__10160 = x;
        var G__10161 = y;
        var G__10162 = z;
        return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__10160, G__10161, G__10162) : h.call(null, G__10160, G__10161, G__10162);
      }()], null);
    };
    var G__10182__4 = function() {
      var G__10183__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__10183 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10184__i = 0, G__10184__a = new Array(arguments.length - 3);
          while (G__10184__i < G__10184__a.length) {
            G__10184__a[G__10184__i] = arguments[G__10184__i + 3];
            ++G__10184__i;
          }
          args = new cljs.core.IndexedSeq(G__10184__a, 0);
        }
        return G__10183__delegate.call(this, x, y, z, args);
      };
      G__10183.cljs$lang$maxFixedArity = 3;
      G__10183.cljs$lang$applyTo = function(arglist__10185) {
        var x = cljs.core.first(arglist__10185);
        arglist__10185 = cljs.core.next(arglist__10185);
        var y = cljs.core.first(arglist__10185);
        arglist__10185 = cljs.core.next(arglist__10185);
        var z = cljs.core.first(arglist__10185);
        var args = cljs.core.rest(arglist__10185);
        return G__10183__delegate(x, y, z, args);
      };
      G__10183.cljs$core$IFn$_invoke$arity$variadic = G__10183__delegate;
      return G__10183;
    }();
    G__10182 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10182__0.call(this);
        case 1:
          return G__10182__1.call(this, x);
        case 2:
          return G__10182__2.call(this, x, y);
        case 3:
          return G__10182__3.call(this, x, y, z);
        default:
          var G__10186 = null;
          if (arguments.length > 3) {
            var G__10187__i = 0, G__10187__a = new Array(arguments.length - 3);
            while (G__10187__i < G__10187__a.length) {
              G__10187__a[G__10187__i] = arguments[G__10187__i + 3];
              ++G__10187__i;
            }
            G__10186 = new cljs.core.IndexedSeq(G__10187__a, 0);
          }
          return G__10182__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10186);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10182.cljs$lang$maxFixedArity = 3;
    G__10182.cljs$lang$applyTo = G__10182__4.cljs$lang$applyTo;
    G__10182.cljs$core$IFn$_invoke$arity$0 = G__10182__0;
    G__10182.cljs$core$IFn$_invoke$arity$1 = G__10182__1;
    G__10182.cljs$core$IFn$_invoke$arity$2 = G__10182__2;
    G__10182.cljs$core$IFn$_invoke$arity$3 = G__10182__3;
    G__10182.cljs$core$IFn$_invoke$arity$variadic = G__10182__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10182;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__10188 = null;
      var G__10188__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10111_SHARP_, p2__10112_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10111_SHARP_, function() {
              return p2__10112_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10112_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10112_SHARP_.call(null);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10188__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10113_SHARP_, p2__10114_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10113_SHARP_, function() {
              var G__10163 = x;
              return p2__10114_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10114_SHARP_.cljs$core$IFn$_invoke$arity$1(G__10163) : p2__10114_SHARP_.call(null, G__10163);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10188__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10115_SHARP_, p2__10116_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10115_SHARP_, function() {
              var G__10164 = x;
              var G__10165 = y;
              return p2__10116_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10116_SHARP_.cljs$core$IFn$_invoke$arity$2(G__10164, G__10165) : p2__10116_SHARP_.call(null, G__10164, G__10165);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10188__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10117_SHARP_, p2__10118_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10117_SHARP_, function() {
              var G__10166 = x;
              var G__10167 = y;
              var G__10168 = z;
              return p2__10118_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10118_SHARP_.cljs$core$IFn$_invoke$arity$3(G__10166, G__10167, G__10168) : p2__10118_SHARP_.call(null, G__10166, G__10167, G__10168);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10188__4 = function() {
        var G__10189__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__10119_SHARP_, p2__10120_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10119_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10120_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__10189 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10190__i = 0, G__10190__a = new Array(arguments.length - 3);
            while (G__10190__i < G__10190__a.length) {
              G__10190__a[G__10190__i] = arguments[G__10190__i + 3];
              ++G__10190__i;
            }
            args = new cljs.core.IndexedSeq(G__10190__a, 0);
          }
          return G__10189__delegate.call(this, x, y, z, args);
        };
        G__10189.cljs$lang$maxFixedArity = 3;
        G__10189.cljs$lang$applyTo = function(arglist__10191) {
          var x = cljs.core.first(arglist__10191);
          arglist__10191 = cljs.core.next(arglist__10191);
          var y = cljs.core.first(arglist__10191);
          arglist__10191 = cljs.core.next(arglist__10191);
          var z = cljs.core.first(arglist__10191);
          var args = cljs.core.rest(arglist__10191);
          return G__10189__delegate(x, y, z, args);
        };
        G__10189.cljs$core$IFn$_invoke$arity$variadic = G__10189__delegate;
        return G__10189;
      }();
      G__10188 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10188__0.call(this);
          case 1:
            return G__10188__1.call(this, x);
          case 2:
            return G__10188__2.call(this, x, y);
          case 3:
            return G__10188__3.call(this, x, y, z);
          default:
            var G__10192 = null;
            if (arguments.length > 3) {
              var G__10193__i = 0, G__10193__a = new Array(arguments.length - 3);
              while (G__10193__i < G__10193__a.length) {
                G__10193__a[G__10193__i] = arguments[G__10193__i + 3];
                ++G__10193__i;
              }
              G__10192 = new cljs.core.IndexedSeq(G__10193__a, 0);
            }
            return G__10188__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10192);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10188.cljs$lang$maxFixedArity = 3;
      G__10188.cljs$lang$applyTo = G__10188__4.cljs$lang$applyTo;
      G__10188.cljs$core$IFn$_invoke$arity$0 = G__10188__0;
      G__10188.cljs$core$IFn$_invoke$arity$1 = G__10188__1;
      G__10188.cljs$core$IFn$_invoke$arity$2 = G__10188__2;
      G__10188.cljs$core$IFn$_invoke$arity$3 = G__10188__3;
      G__10188.cljs$core$IFn$_invoke$arity$variadic = G__10188__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10188;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq10121) {
  var G__10122 = cljs.core.first(seq10121);
  var seq10121__$1 = cljs.core.next(seq10121);
  var G__10123 = cljs.core.first(seq10121__$1);
  var seq10121__$2 = cljs.core.next(seq10121__$1);
  var G__10124 = cljs.core.first(seq10121__$2);
  var seq10121__$3 = cljs.core.next(seq10121__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__10122, G__10123, G__10124, seq10121__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var G__10195 = arguments.length;
  switch(G__10195) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__10197 = cljs.core.next(coll);
      coll = G__10197;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__10198 = n - 1;
      var G__10199 = cljs.core.next(coll);
      n = G__10198;
      coll = G__10199;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var G__10201 = arguments.length;
  switch(G__10201) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10206 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10206, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10206, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4215__auto__ = flags;
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10214 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4215__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4215__auto__)) {
              return or__4215__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10215_10221 = cljs.core.first(coll);
          var G__10216_10222 = writer;
          var G__10217_10223 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10215_10221, G__10216_10222, G__10217_10223) : print_one.call(null, G__10215_10221, G__10216_10222, G__10217_10223);
        } else {
        }
        var coll_10224__$1 = cljs.core.next(coll);
        var n_10225 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10224__$1 && (n_10225 == null || !(n_10225 === 0))) {
            cljs.core._write(writer, sep);
            var G__10218_10226 = cljs.core.first(coll_10224__$1);
            var G__10219_10227 = writer;
            var G__10220_10228 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10218_10226, G__10219_10227, G__10220_10228) : print_one.call(null, G__10218_10226, G__10219_10227, G__10220_10228);
            var G__10229 = cljs.core.next(coll_10224__$1);
            var G__10230 = n_10225 - 1;
            coll_10224__$1 = G__10229;
            n_10225 = G__10230;
            continue;
          } else {
            if (cljs.core.seq(coll_10224__$1) && n_10225 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4215__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4215__auto__)) {
                  return or__4215__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10214;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__10233 = cljs.core.seq(ss);
  var chunk__10234 = null;
  var count__10235 = 0;
  var i__10236 = 0;
  while (true) {
    if (i__10236 < count__10235) {
      var s = chunk__10234.cljs$core$IIndexed$_nth$arity$2(null, i__10236);
      cljs.core._write(writer, s);
      var G__10237 = seq__10233;
      var G__10238 = chunk__10234;
      var G__10239 = count__10235;
      var G__10240 = i__10236 + 1;
      seq__10233 = G__10237;
      chunk__10234 = G__10238;
      count__10235 = G__10239;
      i__10236 = G__10240;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__10233);
      if (temp__4422__auto__) {
        var seq__10233__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10233__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__10233__$1);
          var G__10241 = cljs.core.chunk_rest(seq__10233__$1);
          var G__10242 = c__5000__auto__;
          var G__10243 = cljs.core.count(c__5000__auto__);
          var G__10244 = 0;
          seq__10233 = G__10241;
          chunk__10234 = G__10242;
          count__10235 = G__10243;
          i__10236 = G__10244;
          continue;
        } else {
          var s = cljs.core.first(seq__10233__$1);
          cljs.core._write(writer, s);
          var G__10245 = cljs.core.next(seq__10233__$1);
          var G__10246 = null;
          var G__10247 = 0;
          var G__10248 = 0;
          seq__10233 = G__10245;
          chunk__10234 = G__10246;
          count__10235 = G__10247;
          i__10236 = G__10248;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq10231) {
  var G__10232 = cljs.core.first(seq10231);
  var seq10231__$1 = cljs.core.next(seq10231);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__10232, seq10231__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10250 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10250;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__10253 = '[\\\\"\b\f\n\r\t]';
    var G__10254 = "g";
    return RegExp(G__10253, G__10254);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4203__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = function() {
            var G__10268 = obj;
            if (G__10268) {
              var bit__4889__auto__ = G__10268.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4889__auto__ || G__10268.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__10268.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10268);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10268);
            }
          }();
          if (and__4203__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__10269_10279 = cljs.core.meta(obj);
        var G__10270_10280 = writer;
        var G__10271_10281 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__10269_10279, G__10270_10280, G__10271_10281) : cljs.core.pr_writer.call(null, G__10269_10279, G__10270_10280, G__10271_10281);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__10272 = obj;
            if (G__10272) {
              var bit__4882__auto__ = G__10272.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4882__auto__ || G__10272.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__10273 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__10274 = cljs.core.pr_writer;
                var G__10275 = writer;
                var G__10276 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10273, G__10274, G__10275, G__10276) : cljs.core.print_map.call(null, G__10273, G__10274, G__10275, G__10276);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__10277 = obj;
                    return goog.isString(G__10277);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__10282 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__10282;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.truth_(cljs.core.regexp_QMARK_(obj))) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__10278 = obj;
                            if (G__10278) {
                              var bit__4889__auto__ = G__10278.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4889__auto__ || G__10278.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__10278.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10278);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10278);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4420__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var alt_impl = temp__4420__auto__;
    var G__10286 = obj;
    var G__10287 = writer;
    var G__10288 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__10286, G__10287, G__10288) : alt_impl.call(null, G__10286, G__10287, G__10288);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10293 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10294 = null;
  var count__10295 = 0;
  var i__10296 = 0;
  while (true) {
    if (i__10296 < count__10295) {
      var obj = chunk__10294.cljs$core$IIndexed$_nth$arity$2(null, i__10296);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10297 = seq__10293;
      var G__10298 = chunk__10294;
      var G__10299 = count__10295;
      var G__10300 = i__10296 + 1;
      seq__10293 = G__10297;
      chunk__10294 = G__10298;
      count__10295 = G__10299;
      i__10296 = G__10300;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__10293);
      if (temp__4422__auto__) {
        var seq__10293__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10293__$1)) {
          var c__5000__auto__ = cljs.core.chunk_first(seq__10293__$1);
          var G__10301 = cljs.core.chunk_rest(seq__10293__$1);
          var G__10302 = c__5000__auto__;
          var G__10303 = cljs.core.count(c__5000__auto__);
          var G__10304 = 0;
          seq__10293 = G__10301;
          chunk__10294 = G__10302;
          count__10295 = G__10303;
          i__10296 = G__10304;
          continue;
        } else {
          var obj = cljs.core.first(seq__10293__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10305 = cljs.core.next(seq__10293__$1);
          var G__10306 = null;
          var G__10307 = 0;
          var G__10308 = 0;
          seq__10293 = G__10305;
          chunk__10294 = G__10306;
          count__10295 = G__10307;
          i__10296 = G__10308;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function cljs$core$pr_str() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq10309) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10309));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq10310) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10310));
};
cljs.core.pr = function cljs$core$pr() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq10311) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10311));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10312__i = 0, G__10312__a = new Array(arguments.length - 0);
      while (G__10312__i < G__10312__a.length) {
        G__10312__a[G__10312__i] = arguments[G__10312__i + 0];
        ++G__10312__i;
      }
      objs = new cljs.core.IndexedSeq(G__10312__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__10313) {
    var objs = cljs.core.seq(arglist__10313);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq10314) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10314));
};
cljs.core.println = function cljs$core$println() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq10315) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10315));
};
cljs.core.println_str = function cljs$core$println_str() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq10316) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10316));
};
cljs.core.prn = function cljs$core$prn() {
  var argseq__5255__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5255__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq10317) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10317));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10324_10330 = cljs.core.key(e);
    var G__10325_10331 = w;
    var G__10326_10332 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10324_10330, G__10325_10331, G__10326_10332) : print_one.call(null, G__10324_10330, G__10325_10331, G__10326_10332);
    cljs.core._write(w, " ");
    var G__10327 = cljs.core.val(e);
    var G__10328 = w;
    var G__10329 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10327, G__10328, G__10329) : print_one.call(null, G__10327, G__10328, G__10329);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var argseq__5255__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5255__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq10333) {
  var G__10334 = cljs.core.first(seq10333);
  var seq10333__$1 = cljs.core.next(seq10333);
  var G__10335 = cljs.core.first(seq10333__$1);
  var seq10333__$2 = cljs.core.next(seq10333__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10334, G__10335, seq10333__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var G__10337 = arguments.length;
  switch(G__10337) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = function() {
      var G__10338 = 0;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10338) : cljs.core.atom.call(null, G__10338);
    }();
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__10341 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10341) : cljs.core.deref.call(null, G__10341);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__10342_SHARP_, p2__10343_SHARP_) {
    var ret = function() {
      var G__10346 = p1__10342_SHARP_;
      var G__10347 = p2__10343_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10346, G__10347) : rf.call(null, G__10346, G__10347);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__10350 = null;
      var G__10350__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10350__1 = function(result) {
        var G__10349 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10349) : rf.call(null, G__10349);
      };
      var G__10350__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__10350 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10350__0.call(this);
          case 1:
            return G__10350__1.call(this, result);
          case 2:
            return G__10350__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10350.cljs$core$IFn$_invoke$arity$0 = G__10350__0;
      G__10350.cljs$core$IFn$_invoke$arity$1 = G__10350__1;
      G__10350.cljs$core$IFn$_invoke$arity$2 = G__10350__2;
      return G__10350;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var G__10352 = arguments.length;
  switch(G__10352) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__10358 = null;
        var G__10358__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10358__1 = function(result) {
          var G__10353 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10353) : rf.call(null, G__10353);
        };
        var G__10358__2 = function(result, input) {
          var prior = function() {
            var G__10354 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10354) : cljs.core.deref.call(null, G__10354);
          }();
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            var G__10355 = result;
            var G__10356 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10355, G__10356) : rf.call(null, G__10355, G__10356);
          }
        };
        G__10358 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10358__0.call(this);
            case 1:
              return G__10358__1.call(this, result);
            case 2:
              return G__10358__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10358.cljs$core$IFn$_invoke$arity$0 = G__10358__0;
        G__10358.cljs$core$IFn$_invoke$arity$1 = G__10358__1;
        G__10358.cljs$core$IFn$_invoke$arity$2 = G__10358__2;
        return G__10358;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var G__10360 = arguments.length;
  switch(G__10360) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5191__auto__ = this;
  return cljs.core.es6_iterator(this__5191__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10363_SHARP_, p2__10362_SHARP_) {
    var G__10365 = p2__10362_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__10365) : proc.call(null, G__10365);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj10367 = {};
  return obj10367;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4203__auto__ = x;
    if (and__4203__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4851__auto__ = x == null ? null : x;
    return function() {
      var or__4215__auto__ = cljs.core._clj__GT_js[function() {
        var G__10371 = x__4851__auto__;
        return goog.typeOf(G__10371);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4203__auto__ = x;
    if (and__4203__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4851__auto__ = x == null ? null : x;
    return function() {
      var or__4215__auto__ = cljs.core._key__GT_js[function() {
        var G__10375 = x__4851__auto__;
        return goog.typeOf(G__10375);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__10378 = k;
    if (G__10378) {
      var bit__4889__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4215__auto__ = bit__4889__auto__;
        if (cljs.core.truth_(or__4215__auto__)) {
          return or__4215__auto__;
        } else {
          return G__10378.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__10378.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10378);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10378);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__10379 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__10379) : cljs.core.clj__GT_js.call(null, G__10379);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__10395 = x;
      if (G__10395) {
        var bit__4889__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4215__auto__ = bit__4889__auto__;
          if (cljs.core.truth_(or__4215__auto__)) {
            return or__4215__auto__;
          } else {
            return G__10395.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__10395.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10395);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10395);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj10397 = {};
              return obj10397;
            }();
            var seq__10398_10408 = cljs.core.seq(x);
            var chunk__10399_10409 = null;
            var count__10400_10410 = 0;
            var i__10401_10411 = 0;
            while (true) {
              if (i__10401_10411 < count__10400_10410) {
                var vec__10402_10412 = chunk__10399_10409.cljs$core$IIndexed$_nth$arity$2(null, i__10401_10411);
                var k_10413 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10402_10412, 0, null);
                var v_10414 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10402_10412, 1, null);
                m[cljs.core.key__GT_js(k_10413)] = cljs$core$clj__GT_js(v_10414);
                var G__10415 = seq__10398_10408;
                var G__10416 = chunk__10399_10409;
                var G__10417 = count__10400_10410;
                var G__10418 = i__10401_10411 + 1;
                seq__10398_10408 = G__10415;
                chunk__10399_10409 = G__10416;
                count__10400_10410 = G__10417;
                i__10401_10411 = G__10418;
                continue;
              } else {
                var temp__4422__auto___10419 = cljs.core.seq(seq__10398_10408);
                if (temp__4422__auto___10419) {
                  var seq__10398_10420__$1 = temp__4422__auto___10419;
                  if (cljs.core.chunked_seq_QMARK_(seq__10398_10420__$1)) {
                    var c__5000__auto___10421 = cljs.core.chunk_first(seq__10398_10420__$1);
                    var G__10422 = cljs.core.chunk_rest(seq__10398_10420__$1);
                    var G__10423 = c__5000__auto___10421;
                    var G__10424 = cljs.core.count(c__5000__auto___10421);
                    var G__10425 = 0;
                    seq__10398_10408 = G__10422;
                    chunk__10399_10409 = G__10423;
                    count__10400_10410 = G__10424;
                    i__10401_10411 = G__10425;
                    continue;
                  } else {
                    var vec__10403_10426 = cljs.core.first(seq__10398_10420__$1);
                    var k_10427 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10403_10426, 0, null);
                    var v_10428 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10403_10426, 1, null);
                    m[cljs.core.key__GT_js(k_10427)] = cljs$core$clj__GT_js(v_10428);
                    var G__10429 = cljs.core.next(seq__10398_10420__$1);
                    var G__10430 = null;
                    var G__10431 = 0;
                    var G__10432 = 0;
                    seq__10398_10408 = G__10429;
                    chunk__10399_10409 = G__10430;
                    count__10400_10410 = G__10431;
                    i__10401_10411 = G__10432;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__10404_10433 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__10405_10434 = null;
              var count__10406_10435 = 0;
              var i__10407_10436 = 0;
              while (true) {
                if (i__10407_10436 < count__10406_10435) {
                  var x_10437__$1 = chunk__10405_10434.cljs$core$IIndexed$_nth$arity$2(null, i__10407_10436);
                  arr.push(x_10437__$1);
                  var G__10438 = seq__10404_10433;
                  var G__10439 = chunk__10405_10434;
                  var G__10440 = count__10406_10435;
                  var G__10441 = i__10407_10436 + 1;
                  seq__10404_10433 = G__10438;
                  chunk__10405_10434 = G__10439;
                  count__10406_10435 = G__10440;
                  i__10407_10436 = G__10441;
                  continue;
                } else {
                  var temp__4422__auto___10442 = cljs.core.seq(seq__10404_10433);
                  if (temp__4422__auto___10442) {
                    var seq__10404_10443__$1 = temp__4422__auto___10442;
                    if (cljs.core.chunked_seq_QMARK_(seq__10404_10443__$1)) {
                      var c__5000__auto___10444 = cljs.core.chunk_first(seq__10404_10443__$1);
                      var G__10445 = cljs.core.chunk_rest(seq__10404_10443__$1);
                      var G__10446 = c__5000__auto___10444;
                      var G__10447 = cljs.core.count(c__5000__auto___10444);
                      var G__10448 = 0;
                      seq__10404_10433 = G__10445;
                      chunk__10405_10434 = G__10446;
                      count__10406_10435 = G__10447;
                      i__10407_10436 = G__10448;
                      continue;
                    } else {
                      var x_10449__$1 = cljs.core.first(seq__10404_10443__$1);
                      arr.push(x_10449__$1);
                      var G__10450 = cljs.core.next(seq__10404_10443__$1);
                      var G__10451 = null;
                      var G__10452 = 0;
                      var G__10453 = 0;
                      seq__10404_10433 = G__10450;
                      chunk__10405_10434 = G__10451;
                      count__10406_10435 = G__10452;
                      i__10407_10436 = G__10453;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj10455 = {};
  return obj10455;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4203__auto__ = x;
    if (and__4203__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4851__auto__ = x == null ? null : x;
    return function() {
      var or__4215__auto__ = cljs.core._js__GT_clj[function() {
        var G__10459 = x__4851__auto__;
        return goog.typeOf(G__10459);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var G__10463 = arguments.length;
  switch(G__10463) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5266__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__10464 = opts;
  var map__10464__$1 = cljs.core.seq_QMARK_(map__10464) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__10464) : map__10464;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10464__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__10464, map__10464__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (function() {
        var G__10480 = x__$1;
        if (G__10480) {
          var bit__4889__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4215__auto__ = bit__4889__auto__;
            if (cljs.core.truth_(or__4215__auto__)) {
              return or__4215__auto__;
            } else {
              return G__10480.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__10480.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10480);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10480);
        }
      }()) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__4969__auto__ = function(map__10464, map__10464__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__10481(s__10482) {
                      return new cljs.core.LazySeq(null, function(map__10464, map__10464__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__10482__$1 = s__10482;
                          while (true) {
                            var temp__4422__auto__ = cljs.core.seq(s__10482__$1);
                            if (temp__4422__auto__) {
                              var s__10482__$2 = temp__4422__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__10482__$2)) {
                                var c__4967__auto__ = cljs.core.chunk_first(s__10482__$2);
                                var size__4968__auto__ = cljs.core.count(c__4967__auto__);
                                var b__10484 = cljs.core.chunk_buffer(size__4968__auto__);
                                if (function() {
                                  var i__10483 = 0;
                                  while (true) {
                                    if (i__10483 < size__4968__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4967__auto__, i__10483);
                                      cljs.core.chunk_append(b__10484, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                        var G__10489 = k;
                                        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10489) : keyfn.call(null, G__10489);
                                      }(), cljs$core$thisfn(x__$1[k])], null));
                                      var G__10492 = i__10483 + 1;
                                      i__10483 = G__10492;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__10484), cljs$core$thisfn_$_iter__10481(cljs.core.chunk_rest(s__10482__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__10484), null);
                                }
                              } else {
                                var k = cljs.core.first(s__10482__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                  var G__10490 = k;
                                  return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10490) : keyfn.call(null, G__10490);
                                }(), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__10481(cljs.core.rest(s__10482__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__10464, map__10464__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__10464, map__10464__$1, keywordize_keys, keyfn);
                  return iter__4969__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__10464, map__10464__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq10460) {
  var G__10461 = cljs.core.first(seq10460);
  var seq10460__$1 = cljs.core.next(seq10460);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__10461, seq10460__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__10495 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10495) : cljs.core.atom.call(null, G__10495);
  }();
  return function(mem) {
    return function() {
      var G__10497__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__10496 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10496) : cljs.core.deref.call(null, G__10496);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__10497 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__10498__i = 0, G__10498__a = new Array(arguments.length - 0);
          while (G__10498__i < G__10498__a.length) {
            G__10498__a[G__10498__i] = arguments[G__10498__i + 0];
            ++G__10498__i;
          }
          args = new cljs.core.IndexedSeq(G__10498__a, 0);
        }
        return G__10497__delegate.call(this, args);
      };
      G__10497.cljs$lang$maxFixedArity = 0;
      G__10497.cljs$lang$applyTo = function(arglist__10499) {
        var args = cljs.core.seq(arglist__10499);
        return G__10497__delegate(args);
      };
      G__10497.cljs$core$IFn$_invoke$arity$variadic = G__10497__delegate;
      return G__10497;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var G__10503 = arguments.length;
  switch(G__10503) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5266__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }();
    if (cljs.core.fn_QMARK_(ret)) {
      var G__10505 = ret;
      f = G__10505;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq10500) {
  var G__10501 = cljs.core.first(seq10500);
  var seq10500__$1 = cljs.core.next(seq10500);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__10501, seq10500__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var G__10507 = arguments.length;
  switch(G__10507) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__10510 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__10510) : Math.floor.call(null, G__10510);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__10512 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10512) : f.call(null, G__10512);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__10514 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10514) : cljs.core.atom.call(null, G__10514);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq10515) {
  var G__10516 = cljs.core.first(seq10515);
  var seq10515__$1 = cljs.core.next(seq10515);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10516, seq10515__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var G__10518 = arguments.length;
  switch(G__10518) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__10519 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10519) : cljs.core.deref.call(null, G__10519);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4215__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4215__auto__) {
    return or__4215__auto__;
  } else {
    var or__4215__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4215__auto____$1) {
      return or__4215__auto____$1;
    } else {
      var and__4203__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4203__auto__) {
        var and__4203__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4203__auto____$1) {
          var and__4203__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4203__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__10545 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                  var G__10542 = i;
                  return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__10542) : child.call(null, G__10542);
                }(), function() {
                  var G__10543 = i;
                  return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__10543) : parent.call(null, G__10543);
                }());
                var G__10546 = i + 1;
                ret = G__10545;
                i = G__10546;
                continue;
              }
              break;
            }
          } else {
            return and__4203__auto____$2;
          }
        } else {
          return and__4203__auto____$1;
        }
      } else {
        return and__4203__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var G__10548 = arguments.length;
  switch(G__10548) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10549 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10549) : cljs.core.deref.call(null, G__10549);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var G__10552 = arguments.length;
  switch(G__10552) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10553 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10553) : cljs.core.deref.call(null, G__10553);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var G__10556 = arguments.length;
  switch(G__10556) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10557 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10557) : cljs.core.deref.call(null, G__10557);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var G__10560 = arguments.length;
  switch(G__10560) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
            var G__10561 = target;
            return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__10561) : targets.call(null, G__10561);
          }())));
        };
      }(tp, td, ta), m, cljs.core.cons(source, function() {
        var G__10562 = source;
        return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__10562) : sources.call(null, G__10562);
      }()));
    };
  }(tp, td, ta);
  var or__4215__auto__ = cljs.core.contains_QMARK_(function() {
    var G__10566 = tag;
    return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__10566) : tp.call(null, G__10566);
  }(), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(function() {
      var G__10567 = tag;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10567) : ta.call(null, G__10567);
    }(), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(function() {
      var G__10568 = parent;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10568) : ta.call(null, G__10568);
    }(), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var G__10574 = arguments.length;
  switch(G__10574) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(function() {
    var G__10575 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10575) : parentMap.call(null, G__10575);
  }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10576 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10576) : parentMap.call(null, G__10576);
  }(), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__10570_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__10570_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__10570_SHARP_), cljs.core.second(p1__10570_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(function() {
    var G__10577 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10577) : parentMap.call(null, G__10577);
  }(), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__10571_SHARP_, p2__10572_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__10571_SHARP_, p2__10572_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__10581 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10581) : cljs.core.deref.call(null, G__10581);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__10582 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10582) : cljs.core.deref.call(null, G__10582);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__10598 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10598) : cljs.core.deref.call(null, G__10598);
  }().call(null, x);
  var or__4215__auto__ = cljs.core.truth_(function() {
    var and__4203__auto__ = xprefs;
    if (cljs.core.truth_(and__4203__auto__)) {
      var G__10600 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__10600) : xprefs.call(null, G__10600);
    } else {
      return and__4203__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    var or__4215__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__10601 = cljs.core.rest(ps);
          ps = G__10601;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4215__auto____$1)) {
      return or__4215__auto____$1;
    } else {
      var or__4215__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__10602 = cljs.core.rest(ps);
            ps = G__10602;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4215__auto____$2)) {
        return or__4215__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4215__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__10616) {
    var vec__10617 = p__10616;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10617, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10617, 1, null);
    var e = vec__10617;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__10618 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10618) : cljs.core.deref.call(null, G__10618);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4215__auto__ = be == null;
        if (or__4215__auto__) {
          return or__4215__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__10619 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10619) : cljs.core.deref.call(null, G__10619);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10620 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10620) : cljs.core.deref.call(null, G__10620);
    }(), function() {
      var G__10621 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10621) : cljs.core.deref.call(null, G__10621);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj10623 = {};
  return obj10623;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._reset[function() {
        var G__10627 = x__4851__auto__;
        return goog.typeOf(G__10627);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._reset["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._add_method[function() {
        var G__10631 = x__4851__auto__;
        return goog.typeOf(G__10631);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._add_method["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._remove_method[function() {
        var G__10635 = x__4851__auto__;
        return goog.typeOf(G__10635);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._remove_method["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._prefer_method[function() {
        var G__10639 = x__4851__auto__;
        return goog.typeOf(G__10639);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._get_method[function() {
        var G__10643 = x__4851__auto__;
        return goog.typeOf(G__10643);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._get_method["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._methods[function() {
        var G__10647 = x__4851__auto__;
        return goog.typeOf(G__10647);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._methods["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._prefers[function() {
        var G__10651 = x__4851__auto__;
        return goog.typeOf(G__10651);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._prefers["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._default_dispatch_val[function() {
        var G__10655 = x__4851__auto__;
        return goog.typeOf(G__10655);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._default_dispatch_val["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (function() {
    var and__4203__auto__ = mf;
    if (and__4203__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4851__auto__ = mf == null ? null : mf;
    return function() {
      var or__4215__auto__ = cljs.core._dispatch_fn[function() {
        var G__10659 = x__4851__auto__;
        return goog.typeOf(G__10659);
      }()];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core._dispatch_fn["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__11508 = null;
  var G__11508__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__11508__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10661 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__10661) : self__.dispatch_fn.call(null, G__10661);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10662 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__10662) : target_fn.call(null, G__10662);
  };
  var G__11508__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10663 = a;
      var G__10664 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__10663, G__10664) : self__.dispatch_fn.call(null, G__10663, G__10664);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10665 = a;
    var G__10666 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__10665, G__10666) : target_fn.call(null, G__10665, G__10666);
  };
  var G__11508__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10667 = a;
      var G__10668 = b;
      var G__10669 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__10667, G__10668, G__10669) : self__.dispatch_fn.call(null, G__10667, G__10668, G__10669);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10670 = a;
    var G__10671 = b;
    var G__10672 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__10670, G__10671, G__10672) : target_fn.call(null, G__10670, G__10671, G__10672);
  };
  var G__11508__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10673 = a;
      var G__10674 = b;
      var G__10675 = c;
      var G__10676 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__10673, G__10674, G__10675, G__10676) : self__.dispatch_fn.call(null, G__10673, G__10674, G__10675, G__10676);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10677 = a;
    var G__10678 = b;
    var G__10679 = c;
    var G__10680 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__10677, G__10678, G__10679, G__10680) : target_fn.call(null, G__10677, G__10678, G__10679, G__10680);
  };
  var G__11508__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10681 = a;
      var G__10682 = b;
      var G__10683 = c;
      var G__10684 = d;
      var G__10685 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__10681, G__10682, G__10683, G__10684, G__10685) : self__.dispatch_fn.call(null, G__10681, G__10682, G__10683, G__10684, G__10685);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10686 = a;
    var G__10687 = b;
    var G__10688 = c;
    var G__10689 = d;
    var G__10690 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__10686, G__10687, G__10688, G__10689, G__10690) : target_fn.call(null, G__10686, G__10687, G__10688, G__10689, G__10690);
  };
  var G__11508__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10691 = a;
      var G__10692 = b;
      var G__10693 = c;
      var G__10694 = d;
      var G__10695 = e;
      var G__10696 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__10691, G__10692, G__10693, G__10694, G__10695, G__10696) : self__.dispatch_fn.call(null, G__10691, G__10692, G__10693, G__10694, G__10695, G__10696);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10697 = a;
    var G__10698 = b;
    var G__10699 = c;
    var G__10700 = d;
    var G__10701 = e;
    var G__10702 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__10697, G__10698, G__10699, G__10700, G__10701, G__10702) : target_fn.call(null, G__10697, G__10698, G__10699, G__10700, G__10701, G__10702);
  };
  var G__11508__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10703 = a;
      var G__10704 = b;
      var G__10705 = c;
      var G__10706 = d;
      var G__10707 = e;
      var G__10708 = f;
      var G__10709 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__10703, G__10704, G__10705, G__10706, G__10707, G__10708, G__10709) : self__.dispatch_fn.call(null, G__10703, G__10704, G__10705, G__10706, G__10707, G__10708, G__10709);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10710 = a;
    var G__10711 = b;
    var G__10712 = c;
    var G__10713 = d;
    var G__10714 = e;
    var G__10715 = f;
    var G__10716 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__10710, G__10711, G__10712, G__10713, G__10714, G__10715, G__10716) : target_fn.call(null, G__10710, G__10711, G__10712, G__10713, G__10714, G__10715, G__10716);
  };
  var G__11508__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10717 = a;
      var G__10718 = b;
      var G__10719 = c;
      var G__10720 = d;
      var G__10721 = e;
      var G__10722 = f;
      var G__10723 = g;
      var G__10724 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__10717, G__10718, G__10719, G__10720, G__10721, G__10722, G__10723, G__10724) : self__.dispatch_fn.call(null, G__10717, G__10718, G__10719, G__10720, G__10721, G__10722, G__10723, G__10724);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10725 = a;
    var G__10726 = b;
    var G__10727 = c;
    var G__10728 = d;
    var G__10729 = e;
    var G__10730 = f;
    var G__10731 = g;
    var G__10732 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__10725, G__10726, G__10727, G__10728, G__10729, G__10730, G__10731, G__10732) : target_fn.call(null, G__10725, G__10726, G__10727, G__10728, G__10729, G__10730, G__10731, G__10732);
  };
  var G__11508__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10733 = a;
      var G__10734 = b;
      var G__10735 = c;
      var G__10736 = d;
      var G__10737 = e;
      var G__10738 = f;
      var G__10739 = g;
      var G__10740 = h;
      var G__10741 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__10733, G__10734, G__10735, G__10736, G__10737, G__10738, G__10739, G__10740, G__10741) : self__.dispatch_fn.call(null, G__10733, G__10734, G__10735, G__10736, G__10737, G__10738, G__10739, G__10740, G__10741);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10742 = a;
    var G__10743 = b;
    var G__10744 = c;
    var G__10745 = d;
    var G__10746 = e;
    var G__10747 = f;
    var G__10748 = g;
    var G__10749 = h;
    var G__10750 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__10742, G__10743, G__10744, G__10745, G__10746, G__10747, G__10748, G__10749, G__10750) : target_fn.call(null, G__10742, G__10743, G__10744, G__10745, G__10746, G__10747, G__10748, G__10749, G__10750);
  };
  var G__11508__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10751 = a;
      var G__10752 = b;
      var G__10753 = c;
      var G__10754 = d;
      var G__10755 = e;
      var G__10756 = f;
      var G__10757 = g;
      var G__10758 = h;
      var G__10759 = i;
      var G__10760 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__10751, G__10752, G__10753, G__10754, G__10755, G__10756, G__10757, G__10758, G__10759, G__10760) : self__.dispatch_fn.call(null, G__10751, G__10752, G__10753, G__10754, G__10755, G__10756, G__10757, G__10758, G__10759, G__10760);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10761 = a;
    var G__10762 = b;
    var G__10763 = c;
    var G__10764 = d;
    var G__10765 = e;
    var G__10766 = f;
    var G__10767 = g;
    var G__10768 = h;
    var G__10769 = i;
    var G__10770 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__10761, G__10762, G__10763, G__10764, G__10765, G__10766, G__10767, G__10768, G__10769, G__10770) : target_fn.call(null, G__10761, G__10762, G__10763, G__10764, G__10765, G__10766, G__10767, G__10768, G__10769, G__10770);
  };
  var G__11508__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10771 = a;
      var G__10772 = b;
      var G__10773 = c;
      var G__10774 = d;
      var G__10775 = e;
      var G__10776 = f;
      var G__10777 = g;
      var G__10778 = h;
      var G__10779 = i;
      var G__10780 = j;
      var G__10781 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__10771, G__10772, G__10773, G__10774, G__10775, G__10776, G__10777, G__10778, G__10779, G__10780, G__10781) : self__.dispatch_fn.call(null, G__10771, G__10772, G__10773, G__10774, G__10775, G__10776, G__10777, G__10778, G__10779, G__10780, G__10781);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10782 = a;
    var G__10783 = b;
    var G__10784 = c;
    var G__10785 = d;
    var G__10786 = e;
    var G__10787 = f;
    var G__10788 = g;
    var G__10789 = h;
    var G__10790 = i;
    var G__10791 = j;
    var G__10792 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__10782, G__10783, G__10784, G__10785, G__10786, G__10787, G__10788, G__10789, G__10790, G__10791, G__10792) : target_fn.call(null, G__10782, G__10783, G__10784, G__10785, G__10786, G__10787, G__10788, G__10789, G__10790, G__10791, G__10792);
  };
  var G__11508__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10793 = a;
      var G__10794 = b;
      var G__10795 = c;
      var G__10796 = d;
      var G__10797 = e;
      var G__10798 = f;
      var G__10799 = g;
      var G__10800 = h;
      var G__10801 = i;
      var G__10802 = j;
      var G__10803 = k;
      var G__10804 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__10793, G__10794, G__10795, G__10796, G__10797, G__10798, G__10799, G__10800, G__10801, G__10802, G__10803, G__10804) : self__.dispatch_fn.call(null, G__10793, G__10794, G__10795, G__10796, G__10797, G__10798, G__10799, G__10800, G__10801, G__10802, G__10803, G__10804);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10805 = a;
    var G__10806 = b;
    var G__10807 = c;
    var G__10808 = d;
    var G__10809 = e;
    var G__10810 = f;
    var G__10811 = g;
    var G__10812 = h;
    var G__10813 = i;
    var G__10814 = j;
    var G__10815 = k;
    var G__10816 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__10805, G__10806, G__10807, G__10808, G__10809, G__10810, G__10811, G__10812, G__10813, G__10814, G__10815, G__10816) : target_fn.call(null, G__10805, G__10806, G__10807, G__10808, G__10809, G__10810, G__10811, G__10812, G__10813, G__10814, G__10815, G__10816);
  };
  var G__11508__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10817 = a;
      var G__10818 = b;
      var G__10819 = c;
      var G__10820 = d;
      var G__10821 = e;
      var G__10822 = f;
      var G__10823 = g;
      var G__10824 = h;
      var G__10825 = i;
      var G__10826 = j;
      var G__10827 = k;
      var G__10828 = l;
      var G__10829 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__10817, G__10818, G__10819, G__10820, G__10821, G__10822, G__10823, G__10824, G__10825, G__10826, G__10827, G__10828, G__10829) : self__.dispatch_fn.call(null, G__10817, G__10818, G__10819, G__10820, G__10821, G__10822, G__10823, G__10824, G__10825, G__10826, G__10827, G__10828, G__10829);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10830 = a;
    var G__10831 = b;
    var G__10832 = c;
    var G__10833 = d;
    var G__10834 = e;
    var G__10835 = f;
    var G__10836 = g;
    var G__10837 = h;
    var G__10838 = i;
    var G__10839 = j;
    var G__10840 = k;
    var G__10841 = l;
    var G__10842 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__10830, G__10831, G__10832, G__10833, G__10834, G__10835, G__10836, G__10837, G__10838, G__10839, G__10840, G__10841, G__10842) : target_fn.call(null, G__10830, G__10831, G__10832, G__10833, G__10834, G__10835, G__10836, G__10837, G__10838, G__10839, G__10840, G__10841, G__10842);
  };
  var G__11508__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10843 = a;
      var G__10844 = b;
      var G__10845 = c;
      var G__10846 = d;
      var G__10847 = e;
      var G__10848 = f;
      var G__10849 = g;
      var G__10850 = h;
      var G__10851 = i;
      var G__10852 = j;
      var G__10853 = k;
      var G__10854 = l;
      var G__10855 = m;
      var G__10856 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__10843, G__10844, G__10845, G__10846, G__10847, G__10848, G__10849, G__10850, G__10851, G__10852, G__10853, G__10854, G__10855, G__10856) : self__.dispatch_fn.call(null, G__10843, G__10844, G__10845, G__10846, G__10847, G__10848, G__10849, G__10850, G__10851, G__10852, G__10853, G__10854, G__10855, G__10856);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10857 = a;
    var G__10858 = b;
    var G__10859 = c;
    var G__10860 = d;
    var G__10861 = e;
    var G__10862 = f;
    var G__10863 = g;
    var G__10864 = h;
    var G__10865 = i;
    var G__10866 = j;
    var G__10867 = k;
    var G__10868 = l;
    var G__10869 = m;
    var G__10870 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__10857, G__10858, G__10859, G__10860, G__10861, G__10862, G__10863, G__10864, G__10865, G__10866, G__10867, G__10868, G__10869, G__10870) : target_fn.call(null, G__10857, G__10858, G__10859, G__10860, G__10861, G__10862, G__10863, G__10864, G__10865, G__10866, G__10867, G__10868, G__10869, G__10870);
  };
  var G__11508__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10871 = a;
      var G__10872 = b;
      var G__10873 = c;
      var G__10874 = d;
      var G__10875 = e;
      var G__10876 = f;
      var G__10877 = g;
      var G__10878 = h;
      var G__10879 = i;
      var G__10880 = j;
      var G__10881 = k;
      var G__10882 = l;
      var G__10883 = m;
      var G__10884 = n;
      var G__10885 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__10871, G__10872, G__10873, G__10874, G__10875, G__10876, G__10877, G__10878, G__10879, G__10880, G__10881, G__10882, G__10883, G__10884, G__10885) : self__.dispatch_fn.call(null, G__10871, G__10872, G__10873, G__10874, G__10875, G__10876, G__10877, G__10878, G__10879, G__10880, G__10881, G__10882, G__10883, G__10884, G__10885);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10886 = a;
    var G__10887 = b;
    var G__10888 = c;
    var G__10889 = d;
    var G__10890 = e;
    var G__10891 = f;
    var G__10892 = g;
    var G__10893 = h;
    var G__10894 = i;
    var G__10895 = j;
    var G__10896 = k;
    var G__10897 = l;
    var G__10898 = m;
    var G__10899 = n;
    var G__10900 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__10886, G__10887, G__10888, G__10889, G__10890, G__10891, G__10892, G__10893, G__10894, G__10895, G__10896, G__10897, G__10898, G__10899, G__10900) : target_fn.call(null, G__10886, G__10887, G__10888, G__10889, G__10890, G__10891, G__10892, G__10893, G__10894, G__10895, G__10896, G__10897, G__10898, G__10899, G__10900);
  };
  var G__11508__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10901 = a;
      var G__10902 = b;
      var G__10903 = c;
      var G__10904 = d;
      var G__10905 = e;
      var G__10906 = f;
      var G__10907 = g;
      var G__10908 = h;
      var G__10909 = i;
      var G__10910 = j;
      var G__10911 = k;
      var G__10912 = l;
      var G__10913 = m;
      var G__10914 = n;
      var G__10915 = o;
      var G__10916 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__10901, G__10902, G__10903, G__10904, G__10905, G__10906, G__10907, G__10908, G__10909, G__10910, G__10911, G__10912, G__10913, G__10914, G__10915, G__10916) : self__.dispatch_fn.call(null, G__10901, G__10902, G__10903, G__10904, G__10905, G__10906, G__10907, G__10908, G__10909, G__10910, G__10911, G__10912, G__10913, G__10914, G__10915, G__10916);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10917 = a;
    var G__10918 = b;
    var G__10919 = c;
    var G__10920 = d;
    var G__10921 = e;
    var G__10922 = f;
    var G__10923 = g;
    var G__10924 = h;
    var G__10925 = i;
    var G__10926 = j;
    var G__10927 = k;
    var G__10928 = l;
    var G__10929 = m;
    var G__10930 = n;
    var G__10931 = o;
    var G__10932 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__10917, G__10918, G__10919, G__10920, G__10921, G__10922, G__10923, G__10924, G__10925, G__10926, G__10927, G__10928, G__10929, G__10930, G__10931, G__10932) : target_fn.call(null, G__10917, G__10918, G__10919, G__10920, G__10921, G__10922, G__10923, G__10924, G__10925, G__10926, G__10927, G__10928, G__10929, G__10930, G__10931, G__10932);
  };
  var G__11508__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10933 = a;
      var G__10934 = b;
      var G__10935 = c;
      var G__10936 = d;
      var G__10937 = e;
      var G__10938 = f;
      var G__10939 = g;
      var G__10940 = h;
      var G__10941 = i;
      var G__10942 = j;
      var G__10943 = k;
      var G__10944 = l;
      var G__10945 = m;
      var G__10946 = n;
      var G__10947 = o;
      var G__10948 = p;
      var G__10949 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__10933, G__10934, G__10935, G__10936, G__10937, G__10938, G__10939, G__10940, G__10941, G__10942, G__10943, G__10944, G__10945, G__10946, G__10947, G__10948, G__10949) : self__.dispatch_fn.call(null, G__10933, G__10934, G__10935, G__10936, G__10937, G__10938, G__10939, G__10940, G__10941, G__10942, G__10943, G__10944, G__10945, G__10946, G__10947, G__10948, G__10949);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10950 = a;
    var G__10951 = b;
    var G__10952 = c;
    var G__10953 = d;
    var G__10954 = e;
    var G__10955 = f;
    var G__10956 = g;
    var G__10957 = h;
    var G__10958 = i;
    var G__10959 = j;
    var G__10960 = k;
    var G__10961 = l;
    var G__10962 = m;
    var G__10963 = n;
    var G__10964 = o;
    var G__10965 = p;
    var G__10966 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__10950, G__10951, G__10952, G__10953, G__10954, G__10955, G__10956, G__10957, G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964, G__10965, G__10966) : target_fn.call(null, G__10950, G__10951, G__10952, G__10953, G__10954, G__10955, G__10956, G__10957, G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964, G__10965, G__10966);
  };
  var G__11508__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10967 = a;
      var G__10968 = b;
      var G__10969 = c;
      var G__10970 = d;
      var G__10971 = e;
      var G__10972 = f;
      var G__10973 = g;
      var G__10974 = h;
      var G__10975 = i;
      var G__10976 = j;
      var G__10977 = k;
      var G__10978 = l;
      var G__10979 = m;
      var G__10980 = n;
      var G__10981 = o;
      var G__10982 = p;
      var G__10983 = q;
      var G__10984 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__10967, G__10968, G__10969, G__10970, G__10971, G__10972, G__10973, G__10974, G__10975, G__10976, G__10977, G__10978, G__10979, G__10980, G__10981, G__10982, G__10983, G__10984) : self__.dispatch_fn.call(null, G__10967, G__10968, G__10969, G__10970, G__10971, G__10972, G__10973, G__10974, G__10975, G__10976, G__10977, G__10978, G__10979, G__10980, G__10981, G__10982, G__10983, G__10984);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10985 = a;
    var G__10986 = b;
    var G__10987 = c;
    var G__10988 = d;
    var G__10989 = e;
    var G__10990 = f;
    var G__10991 = g;
    var G__10992 = h;
    var G__10993 = i;
    var G__10994 = j;
    var G__10995 = k;
    var G__10996 = l;
    var G__10997 = m;
    var G__10998 = n;
    var G__10999 = o;
    var G__11000 = p;
    var G__11001 = q;
    var G__11002 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__10985, G__10986, G__10987, G__10988, G__10989, G__10990, G__10991, G__10992, G__10993, G__10994, G__10995, G__10996, G__10997, G__10998, G__10999, G__11000, G__11001, G__11002) : target_fn.call(null, G__10985, G__10986, G__10987, G__10988, G__10989, G__10990, G__10991, G__10992, G__10993, G__10994, G__10995, G__10996, G__10997, G__10998, G__10999, G__11000, G__11001, G__11002);
  };
  var G__11508__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11003 = a;
      var G__11004 = b;
      var G__11005 = c;
      var G__11006 = d;
      var G__11007 = e;
      var G__11008 = f;
      var G__11009 = g;
      var G__11010 = h;
      var G__11011 = i;
      var G__11012 = j;
      var G__11013 = k;
      var G__11014 = l;
      var G__11015 = m;
      var G__11016 = n;
      var G__11017 = o;
      var G__11018 = p;
      var G__11019 = q;
      var G__11020 = r;
      var G__11021 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11003, G__11004, G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011, G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018, G__11019, G__11020, G__11021) : self__.dispatch_fn.call(null, G__11003, G__11004, G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011, G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018, G__11019, 
      G__11020, G__11021);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11022 = a;
    var G__11023 = b;
    var G__11024 = c;
    var G__11025 = d;
    var G__11026 = e;
    var G__11027 = f;
    var G__11028 = g;
    var G__11029 = h;
    var G__11030 = i;
    var G__11031 = j;
    var G__11032 = k;
    var G__11033 = l;
    var G__11034 = m;
    var G__11035 = n;
    var G__11036 = o;
    var G__11037 = p;
    var G__11038 = q;
    var G__11039 = r;
    var G__11040 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11022, G__11023, G__11024, G__11025, G__11026, G__11027, G__11028, G__11029, G__11030, G__11031, G__11032, G__11033, G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040) : target_fn.call(null, G__11022, G__11023, G__11024, G__11025, G__11026, G__11027, G__11028, G__11029, G__11030, G__11031, G__11032, G__11033, G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040);
  };
  var G__11508__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11041 = a;
      var G__11042 = b;
      var G__11043 = c;
      var G__11044 = d;
      var G__11045 = e;
      var G__11046 = f;
      var G__11047 = g;
      var G__11048 = h;
      var G__11049 = i;
      var G__11050 = j;
      var G__11051 = k;
      var G__11052 = l;
      var G__11053 = m;
      var G__11054 = n;
      var G__11055 = o;
      var G__11056 = p;
      var G__11057 = q;
      var G__11058 = r;
      var G__11059 = s;
      var G__11060 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11041, G__11042, G__11043, G__11044, G__11045, G__11046, G__11047, G__11048, G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, G__11057, G__11058, G__11059, G__11060) : self__.dispatch_fn.call(null, G__11041, G__11042, G__11043, G__11044, G__11045, G__11046, G__11047, G__11048, G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, 
      G__11057, G__11058, G__11059, G__11060);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11061 = a;
    var G__11062 = b;
    var G__11063 = c;
    var G__11064 = d;
    var G__11065 = e;
    var G__11066 = f;
    var G__11067 = g;
    var G__11068 = h;
    var G__11069 = i;
    var G__11070 = j;
    var G__11071 = k;
    var G__11072 = l;
    var G__11073 = m;
    var G__11074 = n;
    var G__11075 = o;
    var G__11076 = p;
    var G__11077 = q;
    var G__11078 = r;
    var G__11079 = s;
    var G__11080 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11061, G__11062, G__11063, G__11064, G__11065, G__11066, G__11067, G__11068, G__11069, G__11070, G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077, G__11078, G__11079, G__11080) : target_fn.call(null, G__11061, G__11062, G__11063, G__11064, G__11065, G__11066, G__11067, G__11068, G__11069, G__11070, G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077, G__11078, G__11079, 
    G__11080);
  };
  var G__11508__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__11508 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11508__1.call(this, self__);
      case 2:
        return G__11508__2.call(this, self__, a);
      case 3:
        return G__11508__3.call(this, self__, a, b);
      case 4:
        return G__11508__4.call(this, self__, a, b, c);
      case 5:
        return G__11508__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11508__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11508__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11508__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11508__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11508__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11508__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11508__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11508__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11508__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11508__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11508__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11508__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11508__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11508__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11508__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11508__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11508__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11508.cljs$core$IFn$_invoke$arity$1 = G__11508__1;
  G__11508.cljs$core$IFn$_invoke$arity$2 = G__11508__2;
  G__11508.cljs$core$IFn$_invoke$arity$3 = G__11508__3;
  G__11508.cljs$core$IFn$_invoke$arity$4 = G__11508__4;
  G__11508.cljs$core$IFn$_invoke$arity$5 = G__11508__5;
  G__11508.cljs$core$IFn$_invoke$arity$6 = G__11508__6;
  G__11508.cljs$core$IFn$_invoke$arity$7 = G__11508__7;
  G__11508.cljs$core$IFn$_invoke$arity$8 = G__11508__8;
  G__11508.cljs$core$IFn$_invoke$arity$9 = G__11508__9;
  G__11508.cljs$core$IFn$_invoke$arity$10 = G__11508__10;
  G__11508.cljs$core$IFn$_invoke$arity$11 = G__11508__11;
  G__11508.cljs$core$IFn$_invoke$arity$12 = G__11508__12;
  G__11508.cljs$core$IFn$_invoke$arity$13 = G__11508__13;
  G__11508.cljs$core$IFn$_invoke$arity$14 = G__11508__14;
  G__11508.cljs$core$IFn$_invoke$arity$15 = G__11508__15;
  G__11508.cljs$core$IFn$_invoke$arity$16 = G__11508__16;
  G__11508.cljs$core$IFn$_invoke$arity$17 = G__11508__17;
  G__11508.cljs$core$IFn$_invoke$arity$18 = G__11508__18;
  G__11508.cljs$core$IFn$_invoke$arity$19 = G__11508__19;
  G__11508.cljs$core$IFn$_invoke$arity$20 = G__11508__20;
  G__11508.cljs$core$IFn$_invoke$arity$21 = G__11508__21;
  G__11508.cljs$core$IFn$_invoke$arity$22 = G__11508__22;
  return G__11508;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args10660) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10660)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11081 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__11081) : self__.dispatch_fn.call(null, G__11081);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11082 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__11082) : target_fn.call(null, G__11082);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11083 = a;
    var G__11084 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__11083, G__11084) : self__.dispatch_fn.call(null, G__11083, G__11084);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11085 = a;
  var G__11086 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__11085, G__11086) : target_fn.call(null, G__11085, G__11086);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11087 = a;
    var G__11088 = b;
    var G__11089 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__11087, G__11088, G__11089) : self__.dispatch_fn.call(null, G__11087, G__11088, G__11089);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11090 = a;
  var G__11091 = b;
  var G__11092 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__11090, G__11091, G__11092) : target_fn.call(null, G__11090, G__11091, G__11092);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11093 = a;
    var G__11094 = b;
    var G__11095 = c;
    var G__11096 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__11093, G__11094, G__11095, G__11096) : self__.dispatch_fn.call(null, G__11093, G__11094, G__11095, G__11096);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11097 = a;
  var G__11098 = b;
  var G__11099 = c;
  var G__11100 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__11097, G__11098, G__11099, G__11100) : target_fn.call(null, G__11097, G__11098, G__11099, G__11100);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11101 = a;
    var G__11102 = b;
    var G__11103 = c;
    var G__11104 = d;
    var G__11105 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__11101, G__11102, G__11103, G__11104, G__11105) : self__.dispatch_fn.call(null, G__11101, G__11102, G__11103, G__11104, G__11105);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11106 = a;
  var G__11107 = b;
  var G__11108 = c;
  var G__11109 = d;
  var G__11110 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__11106, G__11107, G__11108, G__11109, G__11110) : target_fn.call(null, G__11106, G__11107, G__11108, G__11109, G__11110);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11111 = a;
    var G__11112 = b;
    var G__11113 = c;
    var G__11114 = d;
    var G__11115 = e;
    var G__11116 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__11111, G__11112, G__11113, G__11114, G__11115, G__11116) : self__.dispatch_fn.call(null, G__11111, G__11112, G__11113, G__11114, G__11115, G__11116);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11117 = a;
  var G__11118 = b;
  var G__11119 = c;
  var G__11120 = d;
  var G__11121 = e;
  var G__11122 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__11117, G__11118, G__11119, G__11120, G__11121, G__11122) : target_fn.call(null, G__11117, G__11118, G__11119, G__11120, G__11121, G__11122);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11123 = a;
    var G__11124 = b;
    var G__11125 = c;
    var G__11126 = d;
    var G__11127 = e;
    var G__11128 = f;
    var G__11129 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__11123, G__11124, G__11125, G__11126, G__11127, G__11128, G__11129) : self__.dispatch_fn.call(null, G__11123, G__11124, G__11125, G__11126, G__11127, G__11128, G__11129);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11130 = a;
  var G__11131 = b;
  var G__11132 = c;
  var G__11133 = d;
  var G__11134 = e;
  var G__11135 = f;
  var G__11136 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__11130, G__11131, G__11132, G__11133, G__11134, G__11135, G__11136) : target_fn.call(null, G__11130, G__11131, G__11132, G__11133, G__11134, G__11135, G__11136);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11137 = a;
    var G__11138 = b;
    var G__11139 = c;
    var G__11140 = d;
    var G__11141 = e;
    var G__11142 = f;
    var G__11143 = g;
    var G__11144 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__11137, G__11138, G__11139, G__11140, G__11141, G__11142, G__11143, G__11144) : self__.dispatch_fn.call(null, G__11137, G__11138, G__11139, G__11140, G__11141, G__11142, G__11143, G__11144);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11145 = a;
  var G__11146 = b;
  var G__11147 = c;
  var G__11148 = d;
  var G__11149 = e;
  var G__11150 = f;
  var G__11151 = g;
  var G__11152 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__11145, G__11146, G__11147, G__11148, G__11149, G__11150, G__11151, G__11152) : target_fn.call(null, G__11145, G__11146, G__11147, G__11148, G__11149, G__11150, G__11151, G__11152);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11153 = a;
    var G__11154 = b;
    var G__11155 = c;
    var G__11156 = d;
    var G__11157 = e;
    var G__11158 = f;
    var G__11159 = g;
    var G__11160 = h;
    var G__11161 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__11153, G__11154, G__11155, G__11156, G__11157, G__11158, G__11159, G__11160, G__11161) : self__.dispatch_fn.call(null, G__11153, G__11154, G__11155, G__11156, G__11157, G__11158, G__11159, G__11160, G__11161);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11162 = a;
  var G__11163 = b;
  var G__11164 = c;
  var G__11165 = d;
  var G__11166 = e;
  var G__11167 = f;
  var G__11168 = g;
  var G__11169 = h;
  var G__11170 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, G__11168, G__11169, G__11170) : target_fn.call(null, G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, G__11168, G__11169, G__11170);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11171 = a;
    var G__11172 = b;
    var G__11173 = c;
    var G__11174 = d;
    var G__11175 = e;
    var G__11176 = f;
    var G__11177 = g;
    var G__11178 = h;
    var G__11179 = i;
    var G__11180 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__11171, G__11172, G__11173, G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180) : self__.dispatch_fn.call(null, G__11171, G__11172, G__11173, G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11181 = a;
  var G__11182 = b;
  var G__11183 = c;
  var G__11184 = d;
  var G__11185 = e;
  var G__11186 = f;
  var G__11187 = g;
  var G__11188 = h;
  var G__11189 = i;
  var G__11190 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188, G__11189, G__11190) : target_fn.call(null, G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188, G__11189, G__11190);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11191 = a;
    var G__11192 = b;
    var G__11193 = c;
    var G__11194 = d;
    var G__11195 = e;
    var G__11196 = f;
    var G__11197 = g;
    var G__11198 = h;
    var G__11199 = i;
    var G__11200 = j;
    var G__11201 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__11191, G__11192, G__11193, G__11194, G__11195, G__11196, G__11197, G__11198, G__11199, G__11200, G__11201) : self__.dispatch_fn.call(null, G__11191, G__11192, G__11193, G__11194, G__11195, G__11196, G__11197, G__11198, G__11199, G__11200, G__11201);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11202 = a;
  var G__11203 = b;
  var G__11204 = c;
  var G__11205 = d;
  var G__11206 = e;
  var G__11207 = f;
  var G__11208 = g;
  var G__11209 = h;
  var G__11210 = i;
  var G__11211 = j;
  var G__11212 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__11202, G__11203, G__11204, G__11205, G__11206, G__11207, G__11208, G__11209, G__11210, G__11211, G__11212) : target_fn.call(null, G__11202, G__11203, G__11204, G__11205, G__11206, G__11207, G__11208, G__11209, G__11210, G__11211, G__11212);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11213 = a;
    var G__11214 = b;
    var G__11215 = c;
    var G__11216 = d;
    var G__11217 = e;
    var G__11218 = f;
    var G__11219 = g;
    var G__11220 = h;
    var G__11221 = i;
    var G__11222 = j;
    var G__11223 = k;
    var G__11224 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__11213, G__11214, G__11215, G__11216, G__11217, G__11218, G__11219, G__11220, G__11221, G__11222, G__11223, G__11224) : self__.dispatch_fn.call(null, G__11213, G__11214, G__11215, G__11216, G__11217, G__11218, G__11219, G__11220, G__11221, G__11222, G__11223, G__11224);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11225 = a;
  var G__11226 = b;
  var G__11227 = c;
  var G__11228 = d;
  var G__11229 = e;
  var G__11230 = f;
  var G__11231 = g;
  var G__11232 = h;
  var G__11233 = i;
  var G__11234 = j;
  var G__11235 = k;
  var G__11236 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__11225, G__11226, G__11227, G__11228, G__11229, G__11230, G__11231, G__11232, G__11233, G__11234, G__11235, G__11236) : target_fn.call(null, G__11225, G__11226, G__11227, G__11228, G__11229, G__11230, G__11231, G__11232, G__11233, G__11234, G__11235, G__11236);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11237 = a;
    var G__11238 = b;
    var G__11239 = c;
    var G__11240 = d;
    var G__11241 = e;
    var G__11242 = f;
    var G__11243 = g;
    var G__11244 = h;
    var G__11245 = i;
    var G__11246 = j;
    var G__11247 = k;
    var G__11248 = l;
    var G__11249 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__11237, G__11238, G__11239, G__11240, G__11241, G__11242, G__11243, G__11244, G__11245, G__11246, G__11247, G__11248, G__11249) : self__.dispatch_fn.call(null, G__11237, G__11238, G__11239, G__11240, G__11241, G__11242, G__11243, G__11244, G__11245, G__11246, G__11247, G__11248, G__11249);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11250 = a;
  var G__11251 = b;
  var G__11252 = c;
  var G__11253 = d;
  var G__11254 = e;
  var G__11255 = f;
  var G__11256 = g;
  var G__11257 = h;
  var G__11258 = i;
  var G__11259 = j;
  var G__11260 = k;
  var G__11261 = l;
  var G__11262 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__11250, G__11251, G__11252, G__11253, G__11254, G__11255, G__11256, G__11257, G__11258, G__11259, G__11260, G__11261, G__11262) : target_fn.call(null, G__11250, G__11251, G__11252, G__11253, G__11254, G__11255, G__11256, G__11257, G__11258, G__11259, G__11260, G__11261, G__11262);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11263 = a;
    var G__11264 = b;
    var G__11265 = c;
    var G__11266 = d;
    var G__11267 = e;
    var G__11268 = f;
    var G__11269 = g;
    var G__11270 = h;
    var G__11271 = i;
    var G__11272 = j;
    var G__11273 = k;
    var G__11274 = l;
    var G__11275 = m;
    var G__11276 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__11263, G__11264, G__11265, G__11266, G__11267, G__11268, G__11269, G__11270, G__11271, G__11272, G__11273, G__11274, G__11275, G__11276) : self__.dispatch_fn.call(null, G__11263, G__11264, G__11265, G__11266, G__11267, G__11268, G__11269, G__11270, G__11271, G__11272, G__11273, G__11274, G__11275, G__11276);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11277 = a;
  var G__11278 = b;
  var G__11279 = c;
  var G__11280 = d;
  var G__11281 = e;
  var G__11282 = f;
  var G__11283 = g;
  var G__11284 = h;
  var G__11285 = i;
  var G__11286 = j;
  var G__11287 = k;
  var G__11288 = l;
  var G__11289 = m;
  var G__11290 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__11277, G__11278, G__11279, G__11280, G__11281, G__11282, G__11283, G__11284, G__11285, G__11286, G__11287, G__11288, G__11289, G__11290) : target_fn.call(null, G__11277, G__11278, G__11279, G__11280, G__11281, G__11282, G__11283, G__11284, G__11285, G__11286, G__11287, G__11288, G__11289, G__11290);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11291 = a;
    var G__11292 = b;
    var G__11293 = c;
    var G__11294 = d;
    var G__11295 = e;
    var G__11296 = f;
    var G__11297 = g;
    var G__11298 = h;
    var G__11299 = i;
    var G__11300 = j;
    var G__11301 = k;
    var G__11302 = l;
    var G__11303 = m;
    var G__11304 = n;
    var G__11305 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__11291, G__11292, G__11293, G__11294, G__11295, G__11296, G__11297, G__11298, G__11299, G__11300, G__11301, G__11302, G__11303, G__11304, G__11305) : self__.dispatch_fn.call(null, G__11291, G__11292, G__11293, G__11294, G__11295, G__11296, G__11297, G__11298, G__11299, G__11300, G__11301, G__11302, G__11303, G__11304, G__11305);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11306 = a;
  var G__11307 = b;
  var G__11308 = c;
  var G__11309 = d;
  var G__11310 = e;
  var G__11311 = f;
  var G__11312 = g;
  var G__11313 = h;
  var G__11314 = i;
  var G__11315 = j;
  var G__11316 = k;
  var G__11317 = l;
  var G__11318 = m;
  var G__11319 = n;
  var G__11320 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__11306, G__11307, G__11308, G__11309, G__11310, G__11311, G__11312, G__11313, G__11314, G__11315, G__11316, G__11317, G__11318, G__11319, G__11320) : target_fn.call(null, G__11306, G__11307, G__11308, G__11309, G__11310, G__11311, G__11312, G__11313, G__11314, G__11315, G__11316, G__11317, G__11318, G__11319, G__11320);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11321 = a;
    var G__11322 = b;
    var G__11323 = c;
    var G__11324 = d;
    var G__11325 = e;
    var G__11326 = f;
    var G__11327 = g;
    var G__11328 = h;
    var G__11329 = i;
    var G__11330 = j;
    var G__11331 = k;
    var G__11332 = l;
    var G__11333 = m;
    var G__11334 = n;
    var G__11335 = o;
    var G__11336 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11321, G__11322, G__11323, G__11324, G__11325, G__11326, G__11327, G__11328, G__11329, G__11330, G__11331, G__11332, G__11333, G__11334, G__11335, G__11336) : self__.dispatch_fn.call(null, G__11321, G__11322, G__11323, G__11324, G__11325, G__11326, G__11327, G__11328, G__11329, G__11330, G__11331, G__11332, G__11333, G__11334, G__11335, G__11336);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11337 = a;
  var G__11338 = b;
  var G__11339 = c;
  var G__11340 = d;
  var G__11341 = e;
  var G__11342 = f;
  var G__11343 = g;
  var G__11344 = h;
  var G__11345 = i;
  var G__11346 = j;
  var G__11347 = k;
  var G__11348 = l;
  var G__11349 = m;
  var G__11350 = n;
  var G__11351 = o;
  var G__11352 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11337, G__11338, G__11339, G__11340, G__11341, G__11342, G__11343, G__11344, G__11345, G__11346, G__11347, G__11348, G__11349, G__11350, G__11351, G__11352) : target_fn.call(null, G__11337, G__11338, G__11339, G__11340, G__11341, G__11342, G__11343, G__11344, G__11345, G__11346, G__11347, G__11348, G__11349, G__11350, G__11351, G__11352);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11353 = a;
    var G__11354 = b;
    var G__11355 = c;
    var G__11356 = d;
    var G__11357 = e;
    var G__11358 = f;
    var G__11359 = g;
    var G__11360 = h;
    var G__11361 = i;
    var G__11362 = j;
    var G__11363 = k;
    var G__11364 = l;
    var G__11365 = m;
    var G__11366 = n;
    var G__11367 = o;
    var G__11368 = p;
    var G__11369 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11353, G__11354, G__11355, G__11356, G__11357, G__11358, G__11359, G__11360, G__11361, G__11362, G__11363, G__11364, G__11365, G__11366, G__11367, G__11368, G__11369) : self__.dispatch_fn.call(null, G__11353, G__11354, G__11355, G__11356, G__11357, G__11358, G__11359, G__11360, G__11361, G__11362, G__11363, G__11364, G__11365, G__11366, G__11367, G__11368, G__11369);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11370 = a;
  var G__11371 = b;
  var G__11372 = c;
  var G__11373 = d;
  var G__11374 = e;
  var G__11375 = f;
  var G__11376 = g;
  var G__11377 = h;
  var G__11378 = i;
  var G__11379 = j;
  var G__11380 = k;
  var G__11381 = l;
  var G__11382 = m;
  var G__11383 = n;
  var G__11384 = o;
  var G__11385 = p;
  var G__11386 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11370, G__11371, G__11372, G__11373, G__11374, G__11375, G__11376, G__11377, G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384, G__11385, G__11386) : target_fn.call(null, G__11370, G__11371, G__11372, G__11373, G__11374, G__11375, G__11376, G__11377, G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384, G__11385, G__11386);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11387 = a;
    var G__11388 = b;
    var G__11389 = c;
    var G__11390 = d;
    var G__11391 = e;
    var G__11392 = f;
    var G__11393 = g;
    var G__11394 = h;
    var G__11395 = i;
    var G__11396 = j;
    var G__11397 = k;
    var G__11398 = l;
    var G__11399 = m;
    var G__11400 = n;
    var G__11401 = o;
    var G__11402 = p;
    var G__11403 = q;
    var G__11404 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11387, G__11388, G__11389, G__11390, G__11391, G__11392, G__11393, G__11394, G__11395, G__11396, G__11397, G__11398, G__11399, G__11400, G__11401, G__11402, G__11403, G__11404) : self__.dispatch_fn.call(null, G__11387, G__11388, G__11389, G__11390, G__11391, G__11392, G__11393, G__11394, G__11395, G__11396, G__11397, G__11398, G__11399, G__11400, G__11401, G__11402, G__11403, G__11404);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11405 = a;
  var G__11406 = b;
  var G__11407 = c;
  var G__11408 = d;
  var G__11409 = e;
  var G__11410 = f;
  var G__11411 = g;
  var G__11412 = h;
  var G__11413 = i;
  var G__11414 = j;
  var G__11415 = k;
  var G__11416 = l;
  var G__11417 = m;
  var G__11418 = n;
  var G__11419 = o;
  var G__11420 = p;
  var G__11421 = q;
  var G__11422 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11405, G__11406, G__11407, G__11408, G__11409, G__11410, G__11411, G__11412, G__11413, G__11414, G__11415, G__11416, G__11417, G__11418, G__11419, G__11420, G__11421, G__11422) : target_fn.call(null, G__11405, G__11406, G__11407, G__11408, G__11409, G__11410, G__11411, G__11412, G__11413, G__11414, G__11415, G__11416, G__11417, G__11418, G__11419, G__11420, G__11421, G__11422);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11423 = a;
    var G__11424 = b;
    var G__11425 = c;
    var G__11426 = d;
    var G__11427 = e;
    var G__11428 = f;
    var G__11429 = g;
    var G__11430 = h;
    var G__11431 = i;
    var G__11432 = j;
    var G__11433 = k;
    var G__11434 = l;
    var G__11435 = m;
    var G__11436 = n;
    var G__11437 = o;
    var G__11438 = p;
    var G__11439 = q;
    var G__11440 = r;
    var G__11441 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11423, G__11424, G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431, G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438, G__11439, G__11440, G__11441) : self__.dispatch_fn.call(null, G__11423, G__11424, G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431, G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438, G__11439, 
    G__11440, G__11441);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11442 = a;
  var G__11443 = b;
  var G__11444 = c;
  var G__11445 = d;
  var G__11446 = e;
  var G__11447 = f;
  var G__11448 = g;
  var G__11449 = h;
  var G__11450 = i;
  var G__11451 = j;
  var G__11452 = k;
  var G__11453 = l;
  var G__11454 = m;
  var G__11455 = n;
  var G__11456 = o;
  var G__11457 = p;
  var G__11458 = q;
  var G__11459 = r;
  var G__11460 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11442, G__11443, G__11444, G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451, G__11452, G__11453, G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460) : target_fn.call(null, G__11442, G__11443, G__11444, G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451, G__11452, G__11453, G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11461 = a;
    var G__11462 = b;
    var G__11463 = c;
    var G__11464 = d;
    var G__11465 = e;
    var G__11466 = f;
    var G__11467 = g;
    var G__11468 = h;
    var G__11469 = i;
    var G__11470 = j;
    var G__11471 = k;
    var G__11472 = l;
    var G__11473 = m;
    var G__11474 = n;
    var G__11475 = o;
    var G__11476 = p;
    var G__11477 = q;
    var G__11478 = r;
    var G__11479 = s;
    var G__11480 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11461, G__11462, G__11463, G__11464, G__11465, G__11466, G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, G__11477, G__11478, G__11479, G__11480) : self__.dispatch_fn.call(null, G__11461, G__11462, G__11463, G__11464, G__11465, G__11466, G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, 
    G__11477, G__11478, G__11479, G__11480);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11481 = a;
  var G__11482 = b;
  var G__11483 = c;
  var G__11484 = d;
  var G__11485 = e;
  var G__11486 = f;
  var G__11487 = g;
  var G__11488 = h;
  var G__11489 = i;
  var G__11490 = j;
  var G__11491 = k;
  var G__11492 = l;
  var G__11493 = m;
  var G__11494 = n;
  var G__11495 = o;
  var G__11496 = p;
  var G__11497 = q;
  var G__11498 = r;
  var G__11499 = s;
  var G__11500 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11481, G__11482, G__11483, G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, G__11500) : target_fn.call(null, G__11481, G__11482, G__11483, G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, 
  G__11500);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__11501 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11501) : cljs.core.deref.call(null, G__11501);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__11502 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11502) : cljs.core.deref.call(null, G__11502);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11504 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11504) : cljs.core.deref.call(null, G__11504);
  }(), function() {
    var G__11505 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11505) : cljs.core.deref.call(null, G__11505);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4420__auto__ = function() {
    var G__11506 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11506) : cljs.core.deref.call(null, G__11506);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var target_fn = temp__4420__auto__;
    return target_fn;
  } else {
    var temp__4420__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4420__auto____$1)) {
      var target_fn = temp__4420__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__11507 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11507) : cljs.core.deref.call(null, G__11507);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__11503 = this$__$1;
  return goog.getUid(G__11503);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__11509 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__11509);
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__11510 = self__.uuid;
  var G__11511 = other.uuid;
  return goog.array.defaultCompare(G__11510, G__11511);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write(writer__4795__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var G__11513 = arguments.length;
  switch(G__11513) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__11519 = x;
      var G__11520 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11519, G__11520) : pred.call(null, G__11519, G__11520);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__11521 = y;
        var G__11522 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11521, G__11522) : pred.call(null, G__11521, G__11522);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("stock_selector.mock");
goog.require("cljs.core");
stock_selector.mock.data = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "devices", "devices", 1929380599), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["iPhone", "iPad", "iPod", "Samsung"], null), new cljs.core.Keyword(null, "models", "models", -1985455662), new cljs.core.PersistentArrayMap(null, 4, ["iPhone", new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["6 Plus", "6", "5s", "5c", "5", "4S", "4", 
"3GS", "3G"], null), "iPad", new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Mini 2", "Mini", "Air", "4", "3", "2", "1"], null), "iPod", new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["5th Generation", "4th Generation", "3rd Generation", "2nd Generation"], null), "Samsung", new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Galaxy S6", "Galaxy S5", "Galaxy S4", "Galaxy S3", "Galaxy Note 4", "Galaxy Note 3", 
"Galaxy Note 2", "Galaxy Note"], null)], null), new cljs.core.Keyword(null, "goods", "goods", 702040840), new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, "sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "device", 
"device", 1817743352), new cljs.core.Keyword(null, "price", "price", 22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), new cljs.core.Keyword(null, "model", "model", 331153215)], ["iPhone 6/6 Plus Backcov", "iPhone 6/6 Plus Backcov", 1, "02144422345", "iPhone", "1567.89", "apple", "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg", 10, "6"]), 
cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, "sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "device", "device", 1817743352), new cljs.core.Keyword(null, "price", "price", 22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 
1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), new cljs.core.Keyword(null, "model", "model", 331153215)], ["iPhone 6 Microphone", "iPhone 6 Microphone", 2, "02344422473", "iPhone", "400.00", "apple", "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg", 10, "6"]), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, 
"sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "device", "device", 1817743352), new cljs.core.Keyword(null, "price", "price", 22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), new cljs.core.Keyword(null, "model", "model", 331153215)], ["iPhone 6 Backcover", "iPhone 6 Backcover", 3, "02744422473", 
"iPhone", "567.89", "apple", "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg", 10, "6"]), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, "sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "device", "device", 1817743352), new cljs.core.Keyword(null, "price", "price", 
22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), new cljs.core.Keyword(null, "model", "model", 331153215)], ["iPhone 6 Ribbon", "iPhone 6 Ribbon", 4, "02325222473", "iPhone", "267.89", "apple", "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg", 10, "6"]), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "description", 
"description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, "sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "device", "device", 1817743352), new cljs.core.Keyword(null, "price", "price", 22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), new cljs.core.Keyword(null, 
"model", "model", 331153215)], ["iPhone 6 Plus Speaker", "iPhone 6 Plus Speaker", 5, "02325222473", "iPhone", "520.00", "apple", "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg", 10, "6"]), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, "sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, 
"device", "device", 1817743352), new cljs.core.Keyword(null, "price", "price", 22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), new cljs.core.Keyword(null, "model", "model", 331153215)], ["iPhone 5 Backcover", "iPhone 5 Backcover", 6, "023454543", "iPhone", "420.00", "apple", "http://ishop.s8.com.br/produtos/01/00/item/116237/3/116237392_5GG.jpg", 10, "5"]), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, 
"description", "description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, "sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "device", "device", 1817743352), new cljs.core.Keyword(null, "price", "price", 22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), 
new cljs.core.Keyword(null, "model", "model", 331153215)], ["iPhone 5s Backcover", "iPhone 5s Backcover", 7, "034845", "iPhone", "421.00", "apple", "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg", 10, "5s"]), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "item", "item", 249373802), new cljs.core.Keyword(null, "sku", "sku", -1508141232), new cljs.core.Keyword(null, "code", "code", 
1586293142), new cljs.core.Keyword(null, "device", "device", 1817743352), new cljs.core.Keyword(null, "price", "price", 22129180), new cljs.core.Keyword(null, "company", "company", -340475075), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "stock", "stock", -877288674), new cljs.core.Keyword(null, "model", "model", 331153215)], ["Samsung Galaxy S6 No1", "Samsung Galaxy S6 No1", 8, "023444", "Samsung", "421.00", "Samsung", "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg", 
10, "Galaxy S6"])], null)], null);
stock_selector.mock.real_data = cljs.core.list(new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3630", new cljs.core.Keyword(null, "code", "code", 1586293142), "TOL-DRIVER-PHILLIPS-5", new cljs.core.Keyword(null, "item", "item", 249373802), "#000 Phillips screwdriver", new cljs.core.Keyword(null, "description", "description", -1428560544), "#000 Phillips screwdriver (iPhone 5/5S/6/6Plus)", new cljs.core.Keyword(null, "stock", "stock", -877288674), 
1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 0], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "375", new cljs.core.Keyword(null, "code", "code", 1586293142), "0", new cljs.core.Keyword(null, "item", "item", 249373802), "0", new cljs.core.Keyword(null, "description", "description", -1428560544), "", new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, 
"img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 0], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "333", new cljs.core.Keyword(null, "code", "code", 1586293142), "COS-WRK-HR", new cljs.core.Keyword(null, "item", "item", 249373802), "1 Hour", new cljs.core.Keyword(null, "description", "description", -1428560544), "Onsite support for an hour", new cljs.core.Keyword(null, "stock", "stock", -877288674), 
1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 450], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3569", new cljs.core.Keyword(null, "code", "code", 1586293142), "848891015679", new cljs.core.Keyword(null, "item", "item", 249373802), '2014 Aegis Case for Apple iPhone 6 4.7" (BLUE)', new cljs.core.Keyword(null, "description", "description", -1428560544), '2014 Aegis Case for Apple iPhone 6 4.7" (BLUE)', 
new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 390], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3571", new cljs.core.Keyword(null, "code", "code", 1586293142), "848891015716", new cljs.core.Keyword(null, "item", "item", 249373802), '2014 Aegis Case for Apple iPhone 6 4.7" (GREY)', new cljs.core.Keyword(null, 
"description", "description", -1428560544), '2014 Aegis Case for Apple iPhone 6 4.7" (GREY)', new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 390], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3572", new cljs.core.Keyword(null, "code", "code", 1586293142), "848891015686", new cljs.core.Keyword(null, "item", 
"item", 249373802), '2014 Aegis Case for Apple iPhone 6 4.7" (PINK)', new cljs.core.Keyword(null, "description", "description", -1428560544), '2014 Aegis Case for Apple iPhone 6 4.7" (PINK)', new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 390], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3570", new cljs.core.Keyword(null, 
"code", "code", 1586293142), "848891015723", new cljs.core.Keyword(null, "item", "item", 249373802), '2014 Aegis Case for Apple iPhone 6 4.7" (WHITE) ', new cljs.core.Keyword(null, "description", "description", -1428560544), '2014 Aegis Case for Apple iPhone 6 4.7" (WHITE) ', new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 390], null), new cljs.core.PersistentArrayMap(null, 
7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3469", new cljs.core.Keyword(null, "code", "code", 1586293142), "814591016560", new cljs.core.Keyword(null, "item", "item", 249373802), '2014 Aegis Case for Apple iPhone 6 5.5" (BLACK)', new cljs.core.Keyword(null, "description", "description", -1428560544), '2014 Aegis Case for Apple iPhone 6 5.5" (BLACK)', new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, 
"price", "price", 22129180), 429], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3470", new cljs.core.Keyword(null, "code", "code", 1586293142), "848891016577", new cljs.core.Keyword(null, "item", "item", 249373802), '2014 Aegis Case for Apple iPhone 6 5.5" (BLUE)', new cljs.core.Keyword(null, "description", "description", -1428560544), '2014 Aegis Case for Apple iPhone 6 5.5" (BLUE)', new cljs.core.Keyword(null, "stock", "stock", -877288674), 
1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 429], null), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "sku", "sku", -1508141232), "3471", new cljs.core.Keyword(null, "code", "code", 1586293142), "848891016584", new cljs.core.Keyword(null, "item", "item", 249373802), '2014 Aegis Case for Apple iPhone 6 5.5" (PINK)', new cljs.core.Keyword(null, "description", "description", -1428560544), '2014 Aegis Case for Apple iPhone 6 5.5" (PINK)', 
new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, "img", "img", 1442687358), "", new cljs.core.Keyword(null, "price", "price", 22129180), 429], null));
goog.provide("reagent.interop");
goog.require("cljs.core");
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join() {
  var G__6539 = arguments.length;
  switch(G__6539) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      var G__6541 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__6542 = cljs.core.next.call(null, coll__$1);
      sb = G__6541;
      coll__$1 = G__6542;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__6543 = sb;
      var G__6544 = coll__$2;
      sb = G__6543;
      coll__$1 = G__6544;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__6545 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__6545;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__6549 = cljs.core._EQ_;
    var expr__6550 = limit;
    if (cljs.core.truth_(pred__6549.call(null, 1, expr__6550))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__6549.call(null, 2, expr__6550))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split() {
  var G__6553 = arguments.length;
  switch(G__6553) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (cljs.core._EQ_.call(null, limit__$1, 1)) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var temp__4420__auto__ = cljs.core.re_find.call(null, re, s__$1);
        if (cljs.core.truth_(temp__4420__auto__)) {
          var m = temp__4420__auto__;
          var index = s__$1.indexOf(m);
          var G__6555 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__6556 = limit__$1 - 1;
          var G__6557 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__6555;
          limit__$1 = G__6556;
          parts = G__6557;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__6558 = index - 1;
        index = G__6558;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4420__auto___6559 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4420__auto___6559)) {
        var replacement_6560 = temp__4420__auto___6559;
        buffer.append([cljs.core.str(replacement_6560)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__6561 = index + 1;
      index = G__6561;
      continue;
    }
    break;
  }
};
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("clojure.string");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function reagent$impl$util$extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function reagent$impl$util$extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function reagent$impl$util$get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function reagent$impl$util$get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function reagent$impl$util$get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent$impl$util$reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function reagent$impl$util$cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function reagent$impl$util$cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function reagent$impl$util$memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function reagent$impl$util$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function reagent$impl$util$dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__6717 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__6717, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__6717, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__6719__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__4215__auto___6720 = self__.p;
    if (cljs.core.truth_(or__4215__auto___6720)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__6719 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__6721__i = 0, G__6721__a = new Array(arguments.length - 1);
      while (G__6721__i < G__6721__a.length) {
        G__6721__a[G__6721__i] = arguments[G__6721__i + 1];
        ++G__6721__i;
      }
      a = new cljs.core.IndexedSeq(G__6721__a, 0);
    }
    return G__6719__delegate.call(this, self__, a);
  };
  G__6719.cljs$lang$maxFixedArity = 1;
  G__6719.cljs$lang$applyTo = function(arglist__6722) {
    var self__ = cljs.core.first(arglist__6722);
    var a = cljs.core.rest(arglist__6722);
    return G__6719__delegate(self__, a);
  };
  G__6719.cljs$core$IFn$_invoke$arity$variadic = G__6719__delegate;
  return G__6719;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args6718) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6718)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__6723__delegate = function(a) {
    var _ = this;
    var or__4215__auto___6724 = self__.p;
    if (cljs.core.truth_(or__4215__auto___6724)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__6723 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__6725__i = 0, G__6725__a = new Array(arguments.length - 0);
      while (G__6725__i < G__6725__a.length) {
        G__6725__a[G__6725__i] = arguments[G__6725__i + 0];
        ++G__6725__i;
      }
      a = new cljs.core.IndexedSeq(G__6725__a, 0);
    }
    return G__6723__delegate.call(this, a);
  };
  G__6723.cljs$lang$maxFixedArity = 0;
  G__6723.cljs$lang$applyTo = function(arglist__6726) {
    var a = cljs.core.seq(arglist__6726);
    return G__6723__delegate(a);
  };
  G__6723.cljs$core$IFn$_invoke$arity$variadic = G__6723__delegate;
  return G__6723;
}();
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function reagent$impl$util$__GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function reagent$impl$util$merge_class(p1, p2) {
  var class$ = function() {
    var temp__4422__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var c1 = temp__4422__auto__;
      var temp__4422__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4422__auto____$1)) {
        var c2 = temp__4422__auto____$1;
        return[cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function reagent$impl$util$merge_style(p1, p2) {
  var style = function() {
    var temp__4422__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var s1 = temp__4422__auto__;
      var temp__4422__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4422__auto____$1)) {
        var s2 = temp__4422__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function reagent$impl$util$merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null))))].join(""));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function reagent$impl$util$clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e6728) {
    if (e6728 instanceof Object) {
      var e = e6728;
      if (typeof console !== "undefined") {
        console.warn([cljs.core.str("Warning: "), cljs.core.str("Error unmounting:")].join(""));
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e6728;
    }
  }
};
reagent.impl.util.render_component = function reagent$impl$util$render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_6733 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_6733) {
        return function() {
          var _STAR_always_update_STAR_6734 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_6734;
          }
        };
      }(_STAR_always_update_STAR_6733));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_6733;
    }
  } catch (e6732) {
    if (e6732 instanceof Object) {
      var e = e6732;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e6732;
    }
  }
};
reagent.impl.util.re_render_component = function reagent$impl$util$re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function reagent$impl$util$unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function reagent$impl$util$force_update_all() {
  var seq__6739_6743 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__6740_6744 = null;
  var count__6741_6745 = 0;
  var i__6742_6746 = 0;
  while (true) {
    if (i__6742_6746 < count__6741_6745) {
      var v_6747 = cljs.core._nth.call(null, chunk__6740_6744, i__6742_6746);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_6747);
      var G__6748 = seq__6739_6743;
      var G__6749 = chunk__6740_6744;
      var G__6750 = count__6741_6745;
      var G__6751 = i__6742_6746 + 1;
      seq__6739_6743 = G__6748;
      chunk__6740_6744 = G__6749;
      count__6741_6745 = G__6750;
      i__6742_6746 = G__6751;
      continue;
    } else {
      var temp__4422__auto___6752 = cljs.core.seq.call(null, seq__6739_6743);
      if (temp__4422__auto___6752) {
        var seq__6739_6753__$1 = temp__4422__auto___6752;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6739_6753__$1)) {
          var c__5000__auto___6754 = cljs.core.chunk_first.call(null, seq__6739_6753__$1);
          var G__6755 = cljs.core.chunk_rest.call(null, seq__6739_6753__$1);
          var G__6756 = c__5000__auto___6754;
          var G__6757 = cljs.core.count.call(null, c__5000__auto___6754);
          var G__6758 = 0;
          seq__6739_6743 = G__6755;
          chunk__6740_6744 = G__6756;
          count__6741_6745 = G__6757;
          i__6742_6746 = G__6758;
          continue;
        } else {
          var v_6759 = cljs.core.first.call(null, seq__6739_6753__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_6759);
          var G__6760 = cljs.core.next.call(null, seq__6739_6753__$1);
          var G__6761 = null;
          var G__6762 = 0;
          var G__6763 = 0;
          seq__6739_6743 = G__6760;
          chunk__6740_6744 = G__6761;
          count__6741_6745 = G__6762;
          i__6742_6746 = G__6763;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function reagent$ratom$running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function reagent$ratom$capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_6599 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_6599;
  }
};
reagent.ratom.captured = function reagent$ratom$captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function reagent$ratom$notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.IReactiveAtom = function() {
  var obj6601 = {};
  return obj6601;
}();
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function reagent$ratom$__GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function reagent$ratom$atom() {
  var G__6605 = arguments.length;
  switch(G__6605) {
    case 1:
      return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5266__auto__);
  }
};
reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new reagent.ratom.RAtom(x, null, null, null);
};
reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__6606) {
  var map__6607 = p__6606;
  var map__6607__$1 = cljs.core.seq_QMARK_.call(null, map__6607) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6607) : map__6607;
  var meta = cljs.core.get.call(null, map__6607__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.call(null, map__6607__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new reagent.ratom.RAtom(x, meta, validator, null);
};
reagent.ratom.atom.cljs$lang$applyTo = function(seq6602) {
  var G__6603 = cljs.core.first.call(null, seq6602);
  var seq6602__$1 = cljs.core.next.call(null, seq6602);
  return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic(G__6603, seq6602__$1);
};
reagent.ratom.atom.cljs$lang$maxFixedArity = 1;
reagent.ratom.RCursor = function(ratom, path, reaction) {
  this.ratom = ratom;
  this.path = path;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype._reaction = function() {
  var self__ = this;
  var this$ = this;
  if (self__.reaction == null) {
    return self__.reaction = function() {
      var G__6615 = self__.ratom;
      if (G__6615) {
        var bit__4889__auto__ = G__6615.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4889__auto__ || G__6615.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__6615.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__6615);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__6615);
      }
    }() ? reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), cljs.core._EQ_.call(null, self__.path, cljs.core.PersistentVector.EMPTY) ? function(this$) {
      return function(p1__6610_SHARP_, p2__6609_SHARP_) {
        return cljs.core.reset_BANG_.call(null, self__.ratom, p2__6609_SHARP_);
      };
    }(this$) : function(this$) {
      return function(p1__6612_SHARP_, p2__6611_SHARP_) {
        return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, p2__6611_SHARP_);
      };
    }(this$)) : reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return self__.ratom.call(null, self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), function(this$) {
      return function(p1__6614_SHARP_, p2__6613_SHARP_) {
        return self__.ratom.call(null, self__.path, p2__6613_SHARP_);
      };
    }(this$));
  } else {
    return self__.reaction;
  }
};
reagent.ratom.RCursor.prototype._peek = function() {
  var self__ = this;
  var this$ = this;
  var _STAR_ratom_context_STAR_6616 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core._deref.call(null, this$._reaction());
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_6616;
  }
};
reagent.ratom.RCursor.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cCursor: "), cljs.core.str(self__.path), cljs.core.str(" ")].join(""));
  cljs.core.pr_writer.call(null, a__$1._peek(), writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom);
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, new_value) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._reset_BANG_.call(null, this$__$1._reaction(), new_value);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y, more);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, this$__$1._reaction(), oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, this$__$1._reaction(), key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, this$__$1._reaction(), key);
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._deref.call(null, this$__$1._reaction());
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function reagent$ratom$__GT_RCursor(ratom, path, reaction) {
  return new reagent.ratom.RCursor(ratom, path, reaction);
};
reagent.ratom.cursor = function reagent$ratom$cursor(src, path) {
  if (function() {
    var G__6621 = path;
    if (G__6621) {
      var bit__4889__auto__ = G__6621.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4889__auto__ || G__6621.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__6621.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__6621);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__6621);
    }
  }()) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Calling cursor with an atom as the second arg is "), cljs.core.str("deprecated, in (cursor "), cljs.core.str(src), cljs.core.str(" "), cljs.core.str(cljs.core.pr_str.call(null, path)), cljs.core.str(")")].join(""));
    } else {
    }
    if (function() {
      var G__6622 = path;
      if (G__6622) {
        var bit__4889__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4215__auto__ = bit__4889__auto__;
          if (cljs.core.truth_(or__4215__auto__)) {
            return or__4215__auto__;
          } else {
            return G__6622.reagent$ratom$IReactiveAtom$;
          }
        }())) {
          return true;
        } else {
          if (!G__6622.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__6622);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__6622);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom, not "), cljs.core.str(cljs.core.pr_str.call(null, path))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null))))].join(""));
    }
    return new reagent.ratom.RCursor(path, src, null);
  } else {
    if (function() {
      var or__4215__auto__ = function() {
        var G__6624 = src;
        if (G__6624) {
          var bit__4889__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4215__auto__ = bit__4889__auto__;
            if (cljs.core.truth_(or__4215__auto__)) {
              return or__4215__auto__;
            } else {
              return G__6624.reagent$ratom$IReactiveAtom$;
            }
          }())) {
            return true;
          } else {
            if (!G__6624.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__6624);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__6624);
        }
      }();
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        return cljs.core.ifn_QMARK_.call(null, src) && !cljs.core.vector_QMARK_.call(null, src);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom or a function, not "), cljs.core.str(cljs.core.pr_str.call(null, src))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), 
      new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)))))))].join(""));
    }
    return new reagent.ratom.RCursor(src, path, null);
  }
};
reagent.ratom.IDisposable = function() {
  var obj6626 = {};
  return obj6626;
}();
reagent.ratom.dispose_BANG_ = function reagent$ratom$dispose_BANG_(this$) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj6628 = {};
  return obj6628;
}();
reagent.ratom.run = function reagent$ratom$run(this$) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = reagent.ratom.run[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = reagent.ratom.run["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj6630 = {};
  return obj6630;
}();
reagent.ratom._update_watching = function reagent$ratom$_update_watching(this$, derefed) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function reagent$ratom$_handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__4203__auto__ = k;
    if (and__4203__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4851__auto__ = k == null ? null : k;
    return function() {
      var or__4215__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom._peek_at = function reagent$ratom$_peek_at(this$) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1(this$);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = reagent.ratom._peek_at[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = reagent.ratom._peek_at["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-peek-at", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__4203__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__4203__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__4215__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__6631_6644 = cljs.core.seq.call(null, derefed);
  var chunk__6632_6645 = null;
  var count__6633_6646 = 0;
  var i__6634_6647 = 0;
  while (true) {
    if (i__6634_6647 < count__6633_6646) {
      var w_6648 = cljs.core._nth.call(null, chunk__6632_6645, i__6634_6647);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_6648)) {
      } else {
        cljs.core.add_watch.call(null, w_6648, this$__$1, reagent.ratom._handle_change);
      }
      var G__6649 = seq__6631_6644;
      var G__6650 = chunk__6632_6645;
      var G__6651 = count__6633_6646;
      var G__6652 = i__6634_6647 + 1;
      seq__6631_6644 = G__6649;
      chunk__6632_6645 = G__6650;
      count__6633_6646 = G__6651;
      i__6634_6647 = G__6652;
      continue;
    } else {
      var temp__4422__auto___6653 = cljs.core.seq.call(null, seq__6631_6644);
      if (temp__4422__auto___6653) {
        var seq__6631_6654__$1 = temp__4422__auto___6653;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6631_6654__$1)) {
          var c__5000__auto___6655 = cljs.core.chunk_first.call(null, seq__6631_6654__$1);
          var G__6656 = cljs.core.chunk_rest.call(null, seq__6631_6654__$1);
          var G__6657 = c__5000__auto___6655;
          var G__6658 = cljs.core.count.call(null, c__5000__auto___6655);
          var G__6659 = 0;
          seq__6631_6644 = G__6656;
          chunk__6632_6645 = G__6657;
          count__6633_6646 = G__6658;
          i__6634_6647 = G__6659;
          continue;
        } else {
          var w_6660 = cljs.core.first.call(null, seq__6631_6654__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_6660)) {
          } else {
            cljs.core.add_watch.call(null, w_6660, this$__$1, reagent.ratom._handle_change);
          }
          var G__6661 = cljs.core.next.call(null, seq__6631_6654__$1);
          var G__6662 = null;
          var G__6663 = 0;
          var G__6664 = 0;
          seq__6631_6644 = G__6661;
          chunk__6632_6645 = G__6662;
          count__6633_6646 = G__6663;
          i__6634_6647 = G__6664;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__6635_6665 = cljs.core.seq.call(null, self__.watching);
  var chunk__6636_6666 = null;
  var count__6637_6667 = 0;
  var i__6638_6668 = 0;
  while (true) {
    if (i__6638_6668 < count__6637_6667) {
      var w_6669 = cljs.core._nth.call(null, chunk__6636_6666, i__6638_6668);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_6669)) {
      } else {
        cljs.core.remove_watch.call(null, w_6669, this$__$1);
      }
      var G__6670 = seq__6635_6665;
      var G__6671 = chunk__6636_6666;
      var G__6672 = count__6637_6667;
      var G__6673 = i__6638_6668 + 1;
      seq__6635_6665 = G__6670;
      chunk__6636_6666 = G__6671;
      count__6637_6667 = G__6672;
      i__6638_6668 = G__6673;
      continue;
    } else {
      var temp__4422__auto___6674 = cljs.core.seq.call(null, seq__6635_6665);
      if (temp__4422__auto___6674) {
        var seq__6635_6675__$1 = temp__4422__auto___6674;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6635_6675__$1)) {
          var c__5000__auto___6676 = cljs.core.chunk_first.call(null, seq__6635_6675__$1);
          var G__6677 = cljs.core.chunk_rest.call(null, seq__6635_6675__$1);
          var G__6678 = c__5000__auto___6676;
          var G__6679 = cljs.core.count.call(null, c__5000__auto___6676);
          var G__6680 = 0;
          seq__6635_6665 = G__6677;
          chunk__6636_6666 = G__6678;
          count__6637_6667 = G__6679;
          i__6638_6668 = G__6680;
          continue;
        } else {
          var w_6681 = cljs.core.first.call(null, seq__6635_6675__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_6681)) {
          } else {
            cljs.core.remove_watch.call(null, w_6681, this$__$1);
          }
          var G__6682 = cljs.core.next.call(null, seq__6635_6675__$1);
          var G__6683 = null;
          var G__6684 = 0;
          var G__6685 = 0;
          seq__6635_6665 = G__6682;
          chunk__6636_6666 = G__6683;
          count__6637_6667 = G__6684;
          i__6638_6668 = G__6685;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_peek_at$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, self__.dirty_QMARK_)) {
    return self__.state;
  } else {
    var _STAR_ratom_context_STAR_6639 = reagent.ratom._STAR_ratom_context_STAR_;
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    try {
      return cljs.core._deref.call(null, this$__$1);
    } finally {
      reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_6639;
    }
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__6640_6686 = cljs.core.seq.call(null, self__.watching);
  var chunk__6641_6687 = null;
  var count__6642_6688 = 0;
  var i__6643_6689 = 0;
  while (true) {
    if (i__6643_6689 < count__6642_6688) {
      var w_6690 = cljs.core._nth.call(null, chunk__6641_6687, i__6643_6689);
      cljs.core.remove_watch.call(null, w_6690, this$__$1);
      var G__6691 = seq__6640_6686;
      var G__6692 = chunk__6641_6687;
      var G__6693 = count__6642_6688;
      var G__6694 = i__6643_6689 + 1;
      seq__6640_6686 = G__6691;
      chunk__6641_6687 = G__6692;
      count__6642_6688 = G__6693;
      i__6643_6689 = G__6694;
      continue;
    } else {
      var temp__4422__auto___6695 = cljs.core.seq.call(null, seq__6640_6686);
      if (temp__4422__auto___6695) {
        var seq__6640_6696__$1 = temp__4422__auto___6695;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6640_6696__$1)) {
          var c__5000__auto___6697 = cljs.core.chunk_first.call(null, seq__6640_6696__$1);
          var G__6698 = cljs.core.chunk_rest.call(null, seq__6640_6696__$1);
          var G__6699 = c__5000__auto___6697;
          var G__6700 = cljs.core.count.call(null, c__5000__auto___6697);
          var G__6701 = 0;
          seq__6640_6686 = G__6698;
          chunk__6641_6687 = G__6699;
          count__6642_6688 = G__6700;
          i__6643_6689 = G__6701;
          continue;
        } else {
          var w_6702 = cljs.core.first.call(null, seq__6640_6696__$1);
          cljs.core.remove_watch.call(null, w_6702, this$__$1);
          var G__6703 = cljs.core.next.call(null, seq__6640_6696__$1);
          var G__6704 = null;
          var G__6705 = 0;
          var G__6706 = 0;
          seq__6640_6686 = G__6703;
          chunk__6641_6687 = G__6704;
          count__6642_6688 = G__6705;
          i__6643_6689 = G__6706;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = null;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, newval) {
  var self__ = this;
  var a__$1 = this;
  var oldval = self__.state;
  self__.state = newval;
  if (cljs.core.truth_(self__.on_set)) {
    self__.dirty_QMARK_ = true;
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  cljs.core._notify_watches.call(null, a__$1, oldval, newval);
  return newval;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1)));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, reagent.ratom._peek_at.call(null, a__$1), x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  cljs.core._notify_watches.call(null, this$__$1, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f__$1) {
      f__$1.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches) && cljs.core.not.call(null, self__.auto_run)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var or__4215__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__4215__auto__)) {
      return or__4215__auto__;
    } else {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    }
  }())) {
    reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      return reagent.ratom.run.call(null, this$__$1);
    } else {
      return self__.state;
    }
  } else {
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      var oldstate_6707 = self__.state;
      self__.state = self__.f.call(null);
      if (oldstate_6707 === self__.state) {
      } else {
        cljs.core._notify_watches.call(null, this$__$1, oldstate_6707, self__.state);
      }
    } else {
    }
    return self__.state;
  }
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function reagent$ratom$__GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function reagent$ratom$make_reaction() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic = function(f, p__6710) {
  var map__6711 = p__6710;
  var map__6711__$1 = cljs.core.seq_QMARK_.call(null, map__6711) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6711) : map__6711;
  var auto_run = cljs.core.get.call(null, map__6711__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
  var on_set = cljs.core.get.call(null, map__6711__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
  var on_dispose = cljs.core.get.call(null, map__6711__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
  var derefed = cljs.core.get.call(null, map__6711__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
  var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
  var active = !(derefed == null);
  var dirty = !active;
  var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, null, runner, on_set, on_dispose);
  if (derefed == null) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    reagent.ratom._update_watching.call(null, reaction, derefed);
  }
  return reaction;
};
reagent.ratom.make_reaction.cljs$lang$maxFixedArity = 1;
reagent.ratom.make_reaction.cljs$lang$applyTo = function(seq6708) {
  var G__6709 = cljs.core.first.call(null, seq6708);
  var seq6708__$1 = cljs.core.next.call(null, seq6708);
  return reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic(G__6709, seq6708__$1);
};
reagent.ratom.Wrapper = function(state, callback, changed, watches) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
};
reagent.ratom.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = self__.changed;
    if (cljs.core.truth_(and__4203__auto__)) {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    } else {
      return and__4203__auto__;
    }
  }())) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("derefing stale wrap: "), cljs.core.str(cljs.core.pr_str.call(null, this$__$1))].join(""));
    } else {
    }
  } else {
  }
  return self__.state;
};
reagent.ratom.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  var oldval = self__.state;
  self__.changed = true;
  self__.state = newval;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, this$__$1, oldval, newval);
  }
  self__.callback.call(null, newval);
  return newval;
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.ratom.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Wrapper.cljs$lang$type = true;
reagent.ratom.Wrapper.cljs$lang$ctorStr = "reagent.ratom/Wrapper";
reagent.ratom.Wrapper.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "reagent.ratom/Wrapper");
};
reagent.ratom.__GT_Wrapper = function reagent$ratom$__GT_Wrapper(state, callback, changed, watches) {
  return new reagent.ratom.Wrapper(state, callback, changed, watches);
};
reagent.ratom.make_wrapper = function reagent$ratom$make_wrapper(value, callback_fn, args) {
  return new reagent.ratom.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false, null);
};
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.util");
goog.require("clojure.string");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function reagent$impl$batching$next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function reagent$impl$batching$fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__4215__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    var or__4215__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__4215__auto____$1)) {
      return or__4215__auto____$1;
    } else {
      var or__4215__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__4215__auto____$2)) {
        return or__4215__auto____$2;
      } else {
        var or__4215__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__4215__auto____$3)) {
          return or__4215__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function reagent$impl$batching$compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function reagent$impl$batching$run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__5100__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5100__auto__) {
      var c_6527 = a[i];
      if (cljs.core.truth_(c_6527["cljsIsDirty"])) {
        c_6527["forceUpdate"]();
      } else {
      }
      var G__6528 = i + 1;
      i = G__6528;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function reagent$impl$batching$run_funs(a) {
  var n__5100__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5100__auto__) {
      a[i].call(null);
      var G__6529 = i + 1;
      i = G__6529;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function reagent$impl$batching$__GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function reagent$impl$batching$flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function reagent$impl$batching$queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function reagent$impl$batching$mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function reagent$impl$batching$do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function reagent$impl$batching$do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function reagent$impl$batching$is_reagent_component(c) {
  var G__6531 = c;
  var G__6531__$1 = G__6531 == null ? null : G__6531["props"];
  var G__6531__$2 = G__6531__$1 == null ? null : G__6531__$1["argv"];
  return G__6531__$2;
};
reagent.impl.batching.run_reactively = function reagent$impl$batching$run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function reagent$impl$batching$dispose(c) {
  var G__6533_6534 = c["cljsRatom"];
  var G__6533_6535__$1 = G__6533_6534 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__6533_6534);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.batching");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.component.state_atom = function reagent$impl$component$state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.as_element = function reagent$impl$component$as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function reagent$impl$component$do_render(c) {
  var _STAR_current_component_STAR_6490 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }();
    var p = c["props"];
    var res = c["reagentRender"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__6491 = n;
      switch(G__6491) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return reagent$impl$component$do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_6490;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function reagent$impl$component$custom_wrapper(key, f) {
  var G__6494 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__6494) {
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));break;
    case "getInitialState":
      return function(G__6494) {
        return function() {
          var c = this;
          return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, c), f.call(null, c));
        };
      }(G__6494);
      break;
    case "componentWillReceiveProps":
      return function(G__6494) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__6494);
      break;
    case "shouldComponentUpdate":
      return function(G__6494) {
        return function(nextprops, nextstate) {
          var or__4215__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__4215__auto__)) {
            return or__4215__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__6494);
      break;
    case "componentWillUpdate":
      return function(G__6494) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__6494);
      break;
    case "componentDidUpdate":
      return function(G__6494) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__6494);
      break;
    case "componentWillMount":
      return function(G__6494) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__6494);
      break;
    case "componentWillUnmount":
      return function(G__6494) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__6494);
      break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function reagent$impl$component$default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__6496__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__6496 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__6497__i = 0, G__6497__a = new Array(arguments.length - 0);
          while (G__6497__i < G__6497__a.length) {
            G__6497__a[G__6497__i] = arguments[G__6497__i + 0];
            ++G__6497__i;
          }
          args = new cljs.core.IndexedSeq(G__6497__a, 0);
        }
        return G__6496__delegate.call(this, args);
      };
      G__6496.cljs$lang$maxFixedArity = 0;
      G__6496.cljs$lang$applyTo = function(arglist__6498) {
        var args = cljs.core.seq(arglist__6498);
        return G__6496__delegate(args);
      };
      G__6496.cljs$core$IFn$_invoke$arity$variadic = G__6496__delegate;
      return G__6496;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), null], null), null);
reagent.impl.component.dont_bind = function reagent$impl$component$dont_bind(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
    var G__6500 = f;
    G__6500["__reactDontBind"] = true;
    return G__6500;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function reagent$impl$component$get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = wrap;
      if (cljs.core.truth_(and__4203__auto__)) {
        return f;
      } else {
        return and__4203__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
      }
    } else {
    }
    var or__4215__auto__ = wrap;
    if (cljs.core.truth_(or__4215__auto__)) {
      return or__4215__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function reagent$impl$component$camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function reagent$impl$component$add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function reagent$impl$component$add_render(fun_map, render_f, name) {
  var fm = cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
  return cljs.core.assoc.call(null, fm, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), function(fm) {
    return function() {
      return name;
    };
  }(fm));
};
reagent.impl.component.fun_name = function reagent$impl$component$fun_name(f) {
  var or__4215__auto__ = function() {
    var and__4203__auto__ = cljs.core.fn_QMARK_.call(null, f);
    if (and__4203__auto__) {
      var or__4215__auto__ = f["displayName"];
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return f["name"];
      }
    } else {
      return and__4203__auto__;
    }
  }();
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    var or__4215__auto____$1 = function() {
      var and__4203__auto__ = function() {
        var G__6508 = f;
        if (G__6508) {
          var bit__4882__auto__ = G__6508.cljs$lang$protocol_mask$partition1$ & 4096;
          if (bit__4882__auto__ || G__6508.cljs$core$INamed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }();
      if (and__4203__auto__) {
        return cljs.core.name.call(null, f);
      } else {
        return and__4203__auto__;
      }
    }();
    if (cljs.core.truth_(or__4215__auto____$1)) {
      return or__4215__auto____$1;
    } else {
      var m = cljs.core.meta.call(null, f);
      if (cljs.core.map_QMARK_.call(null, m)) {
        return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m);
      } else {
        return null;
      }
    }
  }
};
reagent.impl.component.wrap_funs = function reagent$impl$component$wrap_funs(fmap) {
  var fun_map = function() {
    var temp__4424__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fmap);
    if (temp__4424__auto__ == null) {
      return fmap;
    } else {
      var cf = temp__4424__auto__;
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, fmap, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), cf), new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104));
    }
  }();
  var render_fun = function() {
    var or__4215__auto__ = (new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4215__auto__)) {
      return or__4215__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null))))].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__4215__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4215__auto__)) {
      return or__4215__auto__;
    } else {
      return reagent.impl.component.fun_name.call(null, render_fun);
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : name;
  var fmap__$1 = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun, name_SINGLEQUOTE_);
  return cljs.core.reduce_kv.call(null, function(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1), cljs.core.PersistentArrayMap.EMPTY, fmap__$1);
};
reagent.impl.component.map_to_js = function reagent$impl$component$map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__6510 = o;
    G__6510[cljs.core.name.call(null, k)] = v;
    return G__6510;
  }, {}, m);
};
reagent.impl.component.cljsify = function reagent$impl$component$cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function reagent$impl$component$create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null))))].join(""));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__6511__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__6511 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__6512__i = 0, G__6512__a = new Array(arguments.length - 0);
          while (G__6512__i < G__6512__a.length) {
            G__6512__a[G__6512__i] = arguments[G__6512__i + 0];
            ++G__6512__i;
          }
          args = new cljs.core.IndexedSeq(G__6512__a, 0);
        }
        return G__6511__delegate.call(this, args);
      };
      G__6511.cljs$lang$maxFixedArity = 0;
      G__6511.cljs$lang$applyTo = function(arglist__6513) {
        var args = cljs.core.seq(arglist__6513);
        return G__6511__delegate(args);
      };
      G__6511.cljs$core$IFn$_invoke$arity$variadic = G__6511__delegate;
      return G__6511;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
reagent.impl.component.comp_name = function reagent$impl$component$comp_name() {
  var n = function() {
    var G__6515 = reagent.impl.component._STAR_current_component_STAR_;
    var G__6515__$1 = G__6515 == null ? null : G__6515["cljsName"]();
    return G__6515__$1;
  }();
  if (!cljs.core.empty_QMARK_.call(null, n)) {
    return[cljs.core.str(" (in "), cljs.core.str(n), cljs.core.str(")")].join("");
  } else {
    return "";
  }
};
reagent.impl.component.shallow_obj_to_map = function reagent$impl$component$shallow_obj_to_map(o) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4969__auto__ = function reagent$impl$component$shallow_obj_to_map_$_iter__6520(s__6521) {
      return new cljs.core.LazySeq(null, function() {
        var s__6521__$1 = s__6521;
        while (true) {
          var temp__4422__auto__ = cljs.core.seq.call(null, s__6521__$1);
          if (temp__4422__auto__) {
            var s__6521__$2 = temp__4422__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__6521__$2)) {
              var c__4967__auto__ = cljs.core.chunk_first.call(null, s__6521__$2);
              var size__4968__auto__ = cljs.core.count.call(null, c__4967__auto__);
              var b__6523 = cljs.core.chunk_buffer.call(null, size__4968__auto__);
              if (function() {
                var i__6522 = 0;
                while (true) {
                  if (i__6522 < size__4968__auto__) {
                    var k = cljs.core._nth.call(null, c__4967__auto__, i__6522);
                    cljs.core.chunk_append.call(null, b__6523, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null));
                    var G__6524 = i__6522 + 1;
                    i__6522 = G__6524;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__6523), reagent$impl$component$shallow_obj_to_map_$_iter__6520.call(null, cljs.core.chunk_rest.call(null, s__6521__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__6523), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__6521__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null), reagent$impl$component$shallow_obj_to_map_$_iter__6520.call(null, cljs.core.rest.call(null, s__6521__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4969__auto__.call(null, cljs.core.js_keys.call(null, o));
  }());
};
reagent.impl.component.elem_counter = 0;
reagent.impl.component.reactify_component = function reagent$impl$component$reactify_component(comp) {
  return React["createClass"]({"displayName":"react-wrapper", "render":function() {
    var this$ = this;
    return reagent.impl.component.as_element.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, cljs.core.assoc.call(null, reagent.impl.component.shallow_obj_to_map.call(null, this$["props"]), new cljs.core.Keyword(null, "-elem-count", "-elem-count", 663797079), reagent.impl.component.elem_counter = reagent.impl.component.elem_counter + 1)], null));
  }});
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.NativeWrapper = function(comp) {
  this.comp = comp;
};
reagent.impl.template.NativeWrapper.cljs$lang$type = true;
reagent.impl.template.NativeWrapper.cljs$lang$ctorStr = "reagent.impl.template/NativeWrapper";
reagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "reagent.impl.template/NativeWrapper");
};
reagent.impl.template.__GT_NativeWrapper = function reagent$impl$template$__GT_NativeWrapper(comp) {
  return new reagent.impl.template.NativeWrapper(comp);
};
reagent.impl.template.named_QMARK_ = function reagent$impl$template$named_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
reagent.impl.template.hiccup_tag_QMARK_ = function reagent$impl$template$hiccup_tag_QMARK_(x) {
  var or__4215__auto__ = reagent.impl.template.named_QMARK_.call(null, x);
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    return typeof x === "string";
  }
};
reagent.impl.template.valid_tag_QMARK_ = function reagent$impl$template$valid_tag_QMARK_(x) {
  var or__4215__auto__ = reagent.impl.template.hiccup_tag_QMARK_.call(null, x);
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    return cljs.core.ifn_QMARK_.call(null, x) || x instanceof reagent.impl.template.NativeWrapper;
  }
};
reagent.impl.template.prop_name_cache = {"class":"className", "for":"htmlFor", "charset":"charSet"};
reagent.impl.template.obj_get = function reagent$impl$template$obj_get(o, k) {
  if (cljs.core.truth_(o.hasOwnProperty(k))) {
    return o[k];
  } else {
    return null;
  }
};
reagent.impl.template.cached_prop_name = function reagent$impl$template$cached_prop_name(k) {
  if (cljs.core.truth_(reagent.impl.template.named_QMARK_.call(null, k))) {
    var temp__4424__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.prop_name_cache, cljs.core.name.call(null, k));
    if (temp__4424__auto__ == null) {
      return reagent.impl.template.prop_name_cache[cljs.core.name.call(null, k)] = reagent.impl.util.dash_to_camel.call(null, k);
    } else {
      var k_SINGLEQUOTE_ = temp__4424__auto__;
      return k_SINGLEQUOTE_;
    }
  } else {
    return k;
  }
};
reagent.impl.template.convert_prop_value = function reagent$impl$template$convert_prop_value(x) {
  if (typeof x === "string" || typeof x === "number" || cljs.core.fn_QMARK_.call(null, x)) {
    return x;
  } else {
    if (cljs.core.truth_(reagent.impl.template.named_QMARK_.call(null, x))) {
      return cljs.core.name.call(null, x);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__6565 = o;
          G__6565[reagent.impl.template.cached_prop_name.call(null, k)] = reagent$impl$template$convert_prop_value.call(null, v);
          return G__6565;
        }, {}, x);
      } else {
        if (cljs.core.coll_QMARK_.call(null, x)) {
          return cljs.core.clj__GT_js.call(null, x);
        } else {
          if (cljs.core.ifn_QMARK_.call(null, x)) {
            return function() {
              var G__6566__delegate = function(args) {
                return cljs.core.apply.call(null, x, args);
              };
              var G__6566 = function(var_args) {
                var args = null;
                if (arguments.length > 0) {
                  var G__6567__i = 0, G__6567__a = new Array(arguments.length - 0);
                  while (G__6567__i < G__6567__a.length) {
                    G__6567__a[G__6567__i] = arguments[G__6567__i + 0];
                    ++G__6567__i;
                  }
                  args = new cljs.core.IndexedSeq(G__6567__a, 0);
                }
                return G__6566__delegate.call(this, args);
              };
              G__6566.cljs$lang$maxFixedArity = 0;
              G__6566.cljs$lang$applyTo = function(arglist__6568) {
                var args = cljs.core.seq(arglist__6568);
                return G__6566__delegate(args);
              };
              G__6566.cljs$core$IFn$_invoke$arity$variadic = G__6566__delegate;
              return G__6566;
            }();
          } else {
            return cljs.core.clj__GT_js.call(null, x);
          }
        }
      }
    }
  }
};
reagent.impl.template.set_id_class = function reagent$impl$template$set_id_class(props, id, class$) {
  var p = props == null ? {} : props;
  if (cljs.core.some_QMARK_.call(null, id) && p["id"] == null) {
    p["id"] = id;
  } else {
  }
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old_6569 = p["className"];
    p["className"] = cljs.core.some_QMARK_.call(null, old_6569) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old_6569)].join("") : class$;
  } else {
  }
  return p;
};
reagent.impl.template.convert_props = function reagent$impl$template$convert_props(props, id_class) {
  var id = id_class["id"];
  var class$ = id_class["className"];
  var no_id_class = id == null && class$ == null;
  if (no_id_class && cljs.core.empty_QMARK_.call(null, props)) {
    return null;
  } else {
    var objprops = reagent.impl.template.convert_prop_value.call(null, props);
    if (no_id_class) {
      return objprops;
    } else {
      return reagent.impl.template.set_id_class.call(null, objprops, id, class$);
    }
  }
};
reagent.impl.template.input_unmount = function reagent$impl$template$input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function reagent$impl$template$input_set_value(this$) {
  var temp__4426__auto__ = this$["cljsInputValue"];
  if (temp__4426__auto__ == null) {
    return null;
  } else {
    var value = temp__4426__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function reagent$impl$template$input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function reagent$impl$template$input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__4203__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__4203__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__6572 = jsprops;
    G__6572["defaultValue"] = value;
    G__6572["onChange"] = function(G__6572, v, value, on_change) {
      return function(p1__6570_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__6570_SHARP_);
      };
    }(G__6572, v, value, on_change);
    return G__6572;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function reagent$impl$template$input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent$impl$template$reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function reagent$impl$template$parse_tag(hiccup_tag) {
  var vec__6574 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__6574, 0, null);
  var id = cljs.core.nth.call(null, vec__6574, 1, null);
  var class$ = cljs.core.nth.call(null, vec__6574, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'"), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))].join(""));
  }
  return{"name":tag, "id":id, "className":class_SINGLEQUOTE_};
};
reagent.impl.template.fn_to_class = function reagent$impl$template$fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!!(cljs.core.fn_QMARK_.call(null, f) && cljs.core.some_QMARK_.call(null, f["type"])) && typeof console !== "undefined") {
    console.warn([cljs.core.str("Warning: "), cljs.core.str("Using native React classes directly in Hiccup forms "), cljs.core.str("is not supported. Use create-element or "), cljs.core.str("adapt-react-class instead: "), cljs.core.str(f["type"]), cljs.core.str(reagent.impl.component.comp_name.call(null))].join(""));
  } else {
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function reagent$impl$template$as_class(tag) {
  var temp__4424__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4424__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4424__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function reagent$impl$template$get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.key_from_vec = function reagent$impl$template$key_from_vec(v) {
  var temp__4424__auto__ = function() {
    var G__6576 = cljs.core.meta.call(null, v);
    var G__6576__$1 = G__6576 == null ? null : reagent.impl.template.get_key.call(null, G__6576);
    return G__6576__$1;
  }();
  if (temp__4424__auto__ == null) {
    return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
  } else {
    var k = temp__4424__auto__;
    return k;
  }
};
reagent.impl.template.reag_element = function reagent$impl$template$reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var G__6578_6579 = v;
  var G__6578_6580__$1 = G__6578_6579 == null ? null : reagent.impl.template.key_from_vec.call(null, G__6578_6579);
  var G__6578_6581__$2 = G__6578_6580__$1 == null ? null : jsprops["key"] = G__6578_6580__$1;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.adapt_react_class = function reagent$impl$template$adapt_react_class(c) {
  return new reagent.impl.template.NativeWrapper({"name":c, "id":null, "class":null});
};
reagent.impl.template.tag_name_cache = {};
reagent.impl.template.cached_parse = function reagent$impl$template$cached_parse(x) {
  if (cljs.core.truth_(reagent.impl.template.hiccup_tag_QMARK_.call(null, x))) {
    var temp__4424__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.tag_name_cache, cljs.core.name.call(null, x));
    if (temp__4424__auto__ == null) {
      return reagent.impl.template.tag_name_cache[cljs.core.name.call(null, x)] = reagent.impl.template.parse_tag.call(null, x);
    } else {
      var s = temp__4424__auto__;
      return s;
    }
  } else {
    if (x instanceof reagent.impl.template.NativeWrapper) {
      return x.comp;
    } else {
      return null;
    }
  }
};
reagent.impl.template.native_element = function reagent$impl$template$native_element(tag, argv) {
  var temp__4422__auto__ = reagent.impl.template.cached_parse.call(null, tag);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var parsed = temp__4422__auto__;
    var comp = parsed["name"];
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, parsed);
    var first_child = hasprops ? 2 : 1;
    if (cljs.core.truth_(reagent.impl.template.input_component_QMARK_.call(null, comp))) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4424__auto__ = function() {
          var G__6584 = cljs.core.meta.call(null, argv);
          var G__6584__$1 = G__6584 == null ? null : reagent.impl.template.get_key.call(null, G__6584);
          return G__6584__$1;
        }();
        if (temp__4424__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4424__auto__;
          var G__6585 = jsprops == null ? {} : jsprops;
          G__6585["key"] = key;
          return G__6585;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function reagent$impl$template$vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Hiccup form should not be empty: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, 
    null)))))].join(""));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (cljs.core.truth_(reagent.impl.template.valid_tag_QMARK_.call(null, tag))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))))].join(""));
  }
  var temp__4424__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4424__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4424__auto__;
    return ne;
  }
};
reagent.impl.template.as_element = function reagent$impl$template$as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        return reagent.impl.template.expand_seq_check.call(null, x);
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function reagent$impl$template$expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__5100__auto___6586 = a.length;
  var i_6587 = 0;
  while (true) {
    if (i_6587 < n__5100__auto___6586) {
      a[i_6587] = reagent.impl.template.as_element.call(null, a[i_6587]);
      var G__6588 = i_6587 + 1;
      i_6587 = G__6588;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_dev = function reagent$impl$template$expand_seq_dev(s, o) {
  var a = cljs.core.into_array.call(null, s);
  var n__5100__auto___6589 = a.length;
  var i_6590 = 0;
  while (true) {
    if (i_6590 < n__5100__auto___6589) {
      var val_6591 = a[i_6590];
      if (cljs.core.vector_QMARK_.call(null, val_6591) && reagent.impl.template.key_from_vec.call(null, val_6591) == null) {
        o["no-key"] = true;
      } else {
      }
      a[i_6590] = reagent.impl.template.as_element.call(null, val_6591);
      var G__6592 = i_6590 + 1;
      i_6590 = G__6592;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_check = function reagent$impl$template$expand_seq_check(x) {
  var ctx = {};
  var res = reagent.ratom._STAR_ratom_context_STAR_ == null ? reagent.impl.template.expand_seq_dev.call(null, x, ctx) : reagent.ratom.capture_derefed.call(null, function(ctx) {
    return function() {
      return reagent.impl.template.expand_seq_dev.call(null, x, ctx);
    };
  }(ctx), ctx);
  if (cljs.core.truth_(reagent.ratom.captured.call(null, ctx))) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Reactive deref not supported in lazy seq, "), cljs.core.str("it should be wrapped in doall"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value:\n"), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(ctx["no-key"])) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Every element in a seq should have a unique "), cljs.core.str(":key"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value: "), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  return res;
};
reagent.impl.template.make_element = function reagent$impl$template$make_element(argv, comp, jsprops, first_child) {
  var G__6594 = cljs.core.count.call(null, argv) - first_child;
  switch(G__6594) {
    case 0:
      return React["createElement"](comp, jsprops);
      break;
    case 1:
      return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
      break;
    default:
      return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(G__6594) {
        return function(a, k, v) {
          if (k >= first_child) {
            a.push(reagent.impl.template.as_element.call(null, v));
          } else {
          }
          return a;
        };
      }(G__6594), [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function reagent$core$create_element() {
  var G__6465 = arguments.length;
  switch(G__6465) {
    case 1:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5266__auto__);
  }
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return reagent.core.create_element.call(null, type, null);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$2 = function(type, props) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
  }
  return React.createElement(type, props);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$3 = function(type, props, child) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
  }
  return React.createElement(type, props, child);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic = function(type, props, child, children) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
  }
  return cljs.core.apply.call(null, React.createElement, type, props, child, children);
};
reagent.core.create_element.cljs$lang$applyTo = function(seq6460) {
  var G__6461 = cljs.core.first.call(null, seq6460);
  var seq6460__$1 = cljs.core.next.call(null, seq6460);
  var G__6462 = cljs.core.first.call(null, seq6460__$1);
  var seq6460__$2 = cljs.core.next.call(null, seq6460__$1);
  var G__6463 = cljs.core.first.call(null, seq6460__$2);
  var seq6460__$3 = cljs.core.next.call(null, seq6460__$2);
  return reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic(G__6461, G__6462, G__6463, seq6460__$3);
};
reagent.core.create_element.cljs$lang$maxFixedArity = 3;
reagent.core.as_element = function reagent$core$as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.adapt_react_class = function reagent$core$adapt_react_class(c) {
  return reagent.impl.template.adapt_react_class.call(null, c);
};
reagent.core.reactify_component = function reagent$core$reactify_component(c) {
  return reagent.impl.component.reactify_component.call(null, c);
};
reagent.core.render = function reagent$core$render() {
  var G__6468 = arguments.length;
  switch(G__6468) {
    case 2:
      return reagent.core.render.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return reagent.core.render.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
reagent.core.render.cljs$core$IFn$_invoke$arity$2 = function(comp, container) {
  return reagent.core.render.call(null, comp, container, null);
};
reagent.core.render.cljs$core$IFn$_invoke$arity$3 = function(comp, container, callback) {
  var f = function() {
    return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
  };
  return reagent.impl.util.render_component.call(null, f, container, callback);
};
reagent.core.render.cljs$lang$maxFixedArity = 3;
reagent.core.unmount_component_at_node = function reagent$core$unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function reagent$core$render_to_string(component) {
  var _STAR_non_reactive_STAR_6471 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_6471;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function reagent$core$render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_6473 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_6473;
  }
};
reagent.core.force_update_all = function reagent$core$force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function reagent$core$create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function reagent$core$current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state_atom = function reagent$core$state_atom(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.component.state_atom.call(null, this$);
};
reagent.core.state = function reagent$core$state(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return cljs.core.deref.call(null, reagent.core.state_atom.call(null, this$));
};
reagent.core.replace_state = function reagent$core$replace_state(this$, new_state) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.reset_BANG_.call(null, reagent.core.state_atom.call(null, this$), new_state);
};
reagent.core.set_state = function reagent$core$set_state(this$, new_state) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.swap_BANG_.call(null, reagent.core.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.core.props = function reagent$core$props(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function reagent$core$children(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function reagent$core$argv(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function reagent$core$dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function reagent$core$merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function reagent$core$flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function reagent$core$atom() {
  var G__6477 = arguments.length;
  switch(G__6477) {
    case 1:
      return reagent.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5266__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5266__auto__);
  }
};
reagent.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return reagent.ratom.atom.call(null, x);
};
reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, rest) {
  return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
};
reagent.core.atom.cljs$lang$applyTo = function(seq6474) {
  var G__6475 = cljs.core.first.call(null, seq6474);
  var seq6474__$1 = cljs.core.next.call(null, seq6474);
  return reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__6475, seq6474__$1);
};
reagent.core.atom.cljs$lang$maxFixedArity = 1;
reagent.core.wrap = function reagent$core$wrap() {
  var argseq__5255__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5255__auto__);
};
reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic = function(value, reset_fn, args) {
  if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
  }
  return reagent.ratom.make_wrapper.call(null, value, reset_fn, args);
};
reagent.core.wrap.cljs$lang$maxFixedArity = 2;
reagent.core.wrap.cljs$lang$applyTo = function(seq6479) {
  var G__6480 = cljs.core.first.call(null, seq6479);
  var seq6479__$1 = cljs.core.next.call(null, seq6479);
  var G__6481 = cljs.core.first.call(null, seq6479__$1);
  var seq6479__$2 = cljs.core.next.call(null, seq6479__$1);
  return reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic(G__6480, G__6481, seq6479__$2);
};
reagent.core.cursor = function reagent$core$cursor(src, path) {
  return reagent.ratom.cursor.call(null, src, path);
};
reagent.core.next_tick = function reagent$core$next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function reagent$core$partial() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return new reagent.impl.util.partial_ifn(f, args, null);
};
reagent.core.partial.cljs$lang$maxFixedArity = 1;
reagent.core.partial.cljs$lang$applyTo = function(seq6482) {
  var G__6483 = cljs.core.first.call(null, seq6482);
  var seq6482__$1 = cljs.core.next.call(null, seq6482);
  return reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__6483, seq6482__$1);
};
goog.provide("stock_selector.components.stock_selector");
goog.require("cljs.core");
goog.require("reagent.core");
stock_selector.components.stock_selector.init_state = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "current-device", "current-device", -109766560), new cljs.core.Keyword(null, "timer", "timer", -1266967739), new cljs.core.Keyword(null, "filter-type", "filter-type", 1785113735), new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712), new cljs.core.Keyword(null, "selected-results", "selected-results", 1133098956), new cljs.core.Keyword(null, "models", 
"models", -1985455662), new cljs.core.Keyword(null, "devices", "devices", 1929380599), new cljs.core.Keyword(null, "current-model", "current-model", -1288511749), new cljs.core.Keyword(null, "current-page", "current-page", -101294180), new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202), new cljs.core.Keyword(null, "input-value", "input-value", -1719954369), new cljs.core.Keyword(null, "results", "results", -1134170113)], [null, null, new cljs.core.Keyword(null, "full-text", "full-text", 
1432444182), 0, cljs.core.PersistentVector.EMPTY, null, null, null, new cljs.core.Keyword(null, "devices", "devices", 1929380599), "", "", null]);
stock_selector.components.stock_selector.item_click = function stock_selector$components$stock_selector$item_click(state, name) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "devices", "devices", 1929380599))) {
    return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "current-page", "current-page", -101294180), new cljs.core.Keyword(null, "models", "models", -1985455662), new cljs.core.Keyword(null, "current-device", "current-device", -109766560), name);
  } else {
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "models", "models", -1985455662))) {
      cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "current-page", "current-page", -101294180), new cljs.core.Keyword(null, "results", "results", -1134170113), new cljs.core.Keyword(null, "current-model", "current-model", -1288511749), name);
      return stock_selector.components.stock_selector.get_results.call(null, state);
    } else {
      return null;
    }
  }
};
stock_selector.components.stock_selector.devices_click = function stock_selector$components$stock_selector$devices_click(state) {
  clearTimeout((new cljs.core.Keyword(null, "timer", "timer", -1266967739)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)));
  return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "current-page", "current-page", -101294180), new cljs.core.Keyword(null, "devices", "devices", 1929380599), new cljs.core.Keyword(null, "current-device", "current-device", -109766560), null, new cljs.core.Keyword(null, "current-model", "current-model", -1288511749), null, new cljs.core.Keyword(null, "results", "results", -1134170113), null, new cljs.core.Keyword(null, "input-value", "input-value", -1719954369), 
  "", new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202), "");
};
stock_selector.components.stock_selector.models_click = function stock_selector$components$stock_selector$models_click(state) {
  clearTimeout((new cljs.core.Keyword(null, "timer", "timer", -1266967739)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)));
  return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "current-page", "current-page", -101294180), new cljs.core.Keyword(null, "models", "models", -1985455662), new cljs.core.Keyword(null, "current-model", "current-model", -1288511749), null, new cljs.core.Keyword(null, "results", "results", -1134170113), null, new cljs.core.Keyword(null, "input-value", "input-value", -1719954369), "", new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202), "");
};
stock_selector.components.stock_selector.input_change = function stock_selector$components$stock_selector$input_change(state, text) {
  clearTimeout((new cljs.core.Keyword(null, "timer", "timer", -1266967739)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)));
  return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "input-value", "input-value", -1719954369), text, new cljs.core.Keyword(null, "timer", "timer", -1266967739), setTimeout(function() {
    cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202), text);
    stock_selector.components.stock_selector.get_results.call(null, state);
    return console.log("Timer");
  }, 250));
};
stock_selector.components.stock_selector.display_item = function stock_selector$components$stock_selector$display_item(state, name) {
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "stock-item", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return stock_selector.components.stock_selector.item_click.call(null, state, name);
  }], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "active-path-item"], null), name], null)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), name], null));
};
stock_selector.components.stock_selector.display_path = function stock_selector$components$stock_selector$display_path(state) {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "path"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), 
  "active-path-item", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return stock_selector.components.stock_selector.devices_click.call(null, state);
  }], null), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "models", "models", -1985455662)) || cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", -1134170113)) ? "Devices" : "All devices"], 
  null), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "models", "models", -1985455662)) || cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", -1134170113)) ? new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), "\x3e"], null) : null, cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "models", "models", -1985455662)) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "passive-path-item"], null), (new cljs.core.Keyword(null, "current-device", "current-device", -109766560)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))], null) : null, cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", -1134170113)) ? new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "active-path-item", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return stock_selector.components.stock_selector.models_click.call(null, state);
  }], null), (new cljs.core.Keyword(null, "current-device", "current-device", -109766560)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))], null) : null, cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", -1134170113)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "span", "span", 1394872991), "\x3e"], null) : null, cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", -1134170113)) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", 
  "class", -2030961996), "passive-path-item"], null), (new cljs.core.Keyword(null, "current-model", "current-model", -1288511749)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))], null) : null], null);
};
stock_selector.components.stock_selector.display_goods_item = function stock_selector$components$stock_selector$display_goods_item(state, data, index, is_highlight) {
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.truth_(is_highlight) ? "good highlight" : "good", new cljs.core.Keyword(null, "on-mouse-over", "on-mouse-over", -858472552), function() {
    return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712), index);
  }, new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selected-results", "selected-results", 1133098956)], null), cljs.core.conj, data);
    return(new cljs.core.Keyword(null, "on-select-item-fn", "on-select-item-fn", 764866031)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)).call(null, data);
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", -1651076051), (new cljs.core.Keyword(null, "img", "img", 1442687358)).cljs$core$IFn$_invoke$arity$1(data), new cljs.core.Keyword(null, "class", "class", -2030961996), "icon"], null)], null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "info"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "good-name"], null), (new cljs.core.Keyword(null, "item", "item", 249373802)).cljs$core$IFn$_invoke$arity$1(data)], 
  null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "good-text"], null), (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(data)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), 
  new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "good-company"], null), (new cljs.core.Keyword(null, "company", "company", -340475075)).cljs$core$IFn$_invoke$arity$1(data)], null)], null), cljs.core.truth_((new cljs.core.Keyword(null, "show-prices?", "show-prices?", 1738541380)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  state))) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "good-price"], null), [cljs.core.str("R"), cljs.core.str((new cljs.core.Keyword(null, "price", "price", 22129180)).cljs$core$IFn$_invoke$arity$1(data))].join("")], null) : null], null)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "key", "key", -1516042587), [cljs.core.str((new cljs.core.Keyword(null, "device", "device", 1817743352)).cljs$core$IFn$_invoke$arity$1(data)), cljs.core.str((new cljs.core.Keyword(null, "model", "model", 331153215)).cljs$core$IFn$_invoke$arity$1(data)), cljs.core.str((new cljs.core.Keyword(null, "item", "item", 249373802)).cljs$core$IFn$_invoke$arity$1(data))].join("")], null));
};
stock_selector.components.stock_selector.display_input = function stock_selector$components$stock_selector$display_input(state) {
  var on_change = function(p1__12146_SHARP_) {
    return stock_selector.components.stock_selector.input_change.call(null, state, p1__12146_SHARP_.target.value);
  };
  var placeholder = [cljs.core.str("Filter "), cljs.core.str(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "models", "models", -1985455662)) || cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", 
  -1134170113)) ? [cljs.core.str((new cljs.core.Keyword(null, "current-device", "current-device", -109766560)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))), cljs.core.str(" ")].join("") : null), cljs.core.str(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", -1134170113)) ? [cljs.core.str((new cljs.core.Keyword(null, 
  "current-model", "current-model", -1288511749)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))), cljs.core.str(" ")].join("") : null), cljs.core.str("Stock")].join("");
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "class", "class", -2030961996), "filter-input", new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), placeholder, new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "input-value", "input-value", -1719954369)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  state)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(on_change, placeholder) {
    return function(p1__12147_SHARP_) {
      return stock_selector.components.stock_selector.input_change.call(null, state, p1__12147_SHARP_.target.value);
    };
  }(on_change, placeholder)], null)], null);
};
stock_selector.components.stock_selector.display_results_count = function stock_selector$components$stock_selector$display_results_count(state, results_count) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "results-count"], null), [cljs.core.str(results_count), cljs.core.str(cljs.core._EQ_.call(null, results_count, 1) ? " result" : " results")].join("")], null);
};
stock_selector.components.stock_selector.display_no_result_message = function stock_selector$components$stock_selector$display_no_result_message() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "stock-not-found"], null), "Nothing found"], null);
};
stock_selector.components.stock_selector.display_loading_message = function stock_selector$components$stock_selector$display_loading_message() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "stock-not-found"], null), "Loading..."], null);
};
stock_selector.components.stock_selector.get_results_compute_here = function stock_selector$components$stock_selector$get_results_compute_here(state) {
  console.log("Get reaults!");
  var filter_by_device = !cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(state), new cljs.core.Keyword(null, "devices", "devices", 1929380599)) ? cljs.core.filter.call(null, function(p1__12148_SHARP_) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-device", "current-device", -109766560)).cljs$core$IFn$_invoke$arity$1(state), (new cljs.core.Keyword(null, "device", "device", 1817743352)).cljs$core$IFn$_invoke$arity$1(p1__12148_SHARP_));
  }, (new cljs.core.Keyword(null, "goods", "goods", 702040840)).cljs$core$IFn$_invoke$arity$1(state)) : (new cljs.core.Keyword(null, "goods", "goods", 702040840)).cljs$core$IFn$_invoke$arity$1(state);
  var filter_by_model = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(state), new cljs.core.Keyword(null, "results", "results", -1134170113)) ? cljs.core.filter.call(null, function(filter_by_device) {
    return function(p1__12149_SHARP_) {
      return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-model", "current-model", -1288511749)).cljs$core$IFn$_invoke$arity$1(state), (new cljs.core.Keyword(null, "model", "model", 331153215)).cljs$core$IFn$_invoke$arity$1(p1__12149_SHARP_));
    };
  }(filter_by_device), filter_by_device) : filter_by_device;
  var filter_by_text = !cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(state)) ? cljs.core.filter.call(null, function(filter_by_device, filter_by_model) {
    return function(p1__12150_SHARP_) {
      return cljs.core.not_EQ_.call(null, -1, (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(p1__12150_SHARP_).indexOf((new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(state)));
    };
  }(filter_by_device, filter_by_model), filter_by_model) : filter_by_model;
  return filter_by_text;
};
stock_selector.components.stock_selector.get_results = function stock_selector$components$stock_selector$get_results(state) {
  console.log([cljs.core.str("Invoke get-results: "), cljs.core.str((new cljs.core.Keyword(null, "current-device", "current-device", -109766560)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))), cljs.core.str(" -\x3e"), cljs.core.str((new cljs.core.Keyword(null, "current-model", "current-model", -1288511749)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))), cljs.core.str(" -\x3e"), cljs.core.str((new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
  state)))].join(""));
  cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "results", "results", -1134170113), null);
  return(new cljs.core.Keyword(null, "get-results-fn", "get-results-fn", 37342243)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)).call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "device", "device", 1817743352), (new cljs.core.Keyword(null, "current-device", "current-device", -109766560)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "model", "model", 331153215), (new cljs.core.Keyword(null, "current-model", 
  "current-model", -1288511749)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "text", "text", -1790561697), (new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))], null), function(results) {
    return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "results", "results", -1134170113), results, new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712), 0);
  });
};
stock_selector.components.stock_selector.on_key_down = function stock_selector$components$stock_selector$on_key_down(state, event) {
  console.log([cljs.core.str("Key down "), cljs.core.str(event.keyCode)].join(""));
  var G__12154 = event.keyCode;
  switch(G__12154) {
    case 38:
      if (cljs.core.count.call(null, (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))) > 0) {
        return cljs.core.swap_BANG_.call(null, state, function(G__12154) {
          return function(p1__12151_SHARP_) {
            return cljs.core.assoc.call(null, p1__12151_SHARP_, new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712), cljs.core.mod.call(null, (new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712)).cljs$core$IFn$_invoke$arity$1(p1__12151_SHARP_) - 1, cljs.core.count.call(null, (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(p1__12151_SHARP_))));
          };
        }(G__12154));
      } else {
        return null;
      }
      break;
    case 40:
      if (cljs.core.count.call(null, (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))) > 0) {
        return cljs.core.swap_BANG_.call(null, state, function(G__12154) {
          return function(p1__12152_SHARP_) {
            return cljs.core.assoc.call(null, p1__12152_SHARP_, new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712), cljs.core.mod.call(null, (new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712)).cljs$core$IFn$_invoke$arity$1(p1__12152_SHARP_) + 1, cljs.core.count.call(null, (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(p1__12152_SHARP_))));
          };
        }(G__12154));
      } else {
        return null;
      }
      break;
    default:
      return new cljs.core.Keyword(null, "else", "else", -1508377146);
  }
};
stock_selector.components.stock_selector.remove_selected_results = function stock_selector$components$stock_selector$remove_selected_results(state, results) {
  if (results == null) {
    return null;
  } else {
    return cljs.core.filter.call(null, function(item) {
      return cljs.core.not_any_QMARK_.call(null, function(p1__12156_SHARP_) {
        return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "sku", "sku", -1508141232)).cljs$core$IFn$_invoke$arity$1(item), (new cljs.core.Keyword(null, "sku", "sku", -1508141232)).cljs$core$IFn$_invoke$arity$1(p1__12156_SHARP_));
      }, (new cljs.core.Keyword(null, "selected-results", "selected-results", 1133098956)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)));
    }, results);
  }
};
stock_selector.components.stock_selector.display_selector = function stock_selector$components$stock_selector$display_selector(props) {
  var state = reagent.core.atom.call(null, cljs.core.merge.call(null, stock_selector.components.stock_selector.init_state, props));
  (new cljs.core.Keyword(null, "get-devices-fn", "get-devices-fn", -1092795780)).cljs$core$IFn$_invoke$arity$1(props).call(null, function(state) {
    return function(p1__12157_SHARP_) {
      return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "devices", "devices", 1929380599), p1__12157_SHARP_);
    };
  }(state));
  (new cljs.core.Keyword(null, "get-models-fn", "get-models-fn", 879511516)).cljs$core$IFn$_invoke$arity$1(props).call(null, function(state) {
    return function(p1__12158_SHARP_) {
      return cljs.core.swap_BANG_.call(null, state, cljs.core.assoc, new cljs.core.Keyword(null, "models", "models", -1985455662), p1__12158_SHARP_);
    };
  }(state));
  return function(state) {
    return function() {
      var results = stock_selector.components.stock_selector.remove_selected_results.call(null, state, (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)));
      return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), "main-stock-selector", new cljs.core.Keyword(null, "on-key-down", "on-key-down", -1374733765), function(results, state) {
        return function(p1__12159_SHARP_) {
          return stock_selector.components.stock_selector.on_key_down.call(null, state, p1__12159_SHARP_);
        };
      }(results, state)], null), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "devices", "devices", 1929380599)) && cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "choose-device-label"], null), "Choose Device"], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_path, state], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_results_count, 
      state, cljs.core.count.call(null, results)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_input, state], null), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "devices", "devices", 1929380599)) && cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, 
      "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "items-box"], null), (new cljs.core.Keyword(null, "devices", "devices", 1929380599)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)) == 
      null ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_loading_message], null) : cljs.core.doall.call(null, cljs.core.map.call(null, function(results, state) {
        return function(p1__12160_SHARP_) {
          return stock_selector.components.stock_selector.display_item.call(null, state, p1__12160_SHARP_);
        };
      }(results, state), (new cljs.core.Keyword(null, "devices", "devices", 1929380599)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))))], null) : null, cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "models", "models", -1985455662)) && cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, 
      state))) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "items-box"], null), (new cljs.core.Keyword(null, "models", "models", -1985455662)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)) == null ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_loading_message], 
      null) : cljs.core.doall.call(null, cljs.core.map.call(null, function(results, state) {
        return function(p1__12161_SHARP_) {
          return stock_selector.components.stock_selector.display_item.call(null, state, p1__12161_SHARP_);
        };
      }(results, state), cljs.core.get.call(null, (new cljs.core.Keyword(null, "models", "models", -1985455662)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), (new cljs.core.Keyword(null, "current-device", "current-device", -109766560)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)))))], null) : null, cljs.core.truth_(function() {
        var or__4215__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-page", "current-page", -101294180)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)), new cljs.core.Keyword(null, "results", "results", -1134170113));
        if (or__4215__auto__) {
          return or__4215__auto__;
        } else {
          return cljs.core.not_empty.call(null, (new cljs.core.Keyword(null, "filter-text", "filter-text", -381699202)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)));
        }
      }()) ? cljs.core.count.call(null, results) > 0 ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", -1388402092), "items-box", new cljs.core.Keyword(null, "class", "class", -2030961996), "items-box", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(results, state) {
        return function(p1__12162_SHARP_) {
          console.log([cljs.core.str("scroll "), cljs.core.str(p1__12162_SHARP_.currentTarget.id), cljs.core.str(" : "), cljs.core.str(p1__12162_SHARP_.currentTarget.srollTop)].join(""));
          return p1__12162_SHARP_.currentTarget.srollTop = 10;
        };
      }(results, state)], null), cljs.core.doall.call(null, cljs.core.map.call(null, function(results, state) {
        return function(p1__12163_SHARP_, p2__12164_SHARP_) {
          return stock_selector.components.stock_selector.display_goods_item.call(null, state, p1__12163_SHARP_, p2__12164_SHARP_, cljs.core._EQ_.call(null, p2__12164_SHARP_, (new cljs.core.Keyword(null, "higlighted-index", "higlighted-index", 261808712)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state))));
        };
      }(results, state), results, cljs.core.range.call(null)))], null) : results == null ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "items-box"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_loading_message], 
      null)], null) : cljs.core.truth_(function() {
        var and__4203__auto__ = results;
        if (cljs.core.truth_(and__4203__auto__)) {
          return cljs.core._EQ_.call(null, cljs.core.count.call(null, results), 0);
        } else {
          return and__4203__auto__;
        }
      }()) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "items-box"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_no_result_message], null)], null) : null : null], null);
    };
  }(state);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj12477 = {};
  return obj12477;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4203__auto__ = port;
    if (and__4203__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4851__auto__ = port == null ? null : port;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj12479 = {};
  return obj12479;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4203__auto__ = port;
    if (and__4203__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4851__auto__ = port == null ? null : port;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj12481 = {};
  return obj12481;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4203__auto__ = chan;
    if (and__4203__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4851__auto__ = chan == null ? null : chan;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4203__auto__ = chan;
    if (and__4203__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4851__auto__ = chan == null ? null : chan;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj12483 = {};
  return obj12483;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4203__auto__ = h;
    if (and__4203__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4851__auto__ = h == null ? null : h;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4203__auto__ = h;
    if (and__4203__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4851__auto__ = h == null ? null : h;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj12485 = {};
  return obj12485;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4203__auto__ = b;
    if (and__4203__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4851__auto__ = b == null ? null : b;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4203__auto__ = b;
    if (and__4203__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4851__auto__ = b == null ? null : b;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4203__auto__ = b;
    if (and__4203__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4851__auto__ = b == null ? null : b;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_() {
  var G__12487 = arguments.length;
  switch(G__12487) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj12490 = {};
  return obj12490;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t12435 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t12435 = function(fn_handler, f, meta12436) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta12436 = meta12436;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t12435.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12437, meta12436__$1) {
      var self__ = this;
      var _12437__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t12435(self__.fn_handler, self__.f, meta12436__$1);
    };
    cljs.core.async.impl.ioc_helpers.t12435.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12437) {
      var self__ = this;
      var _12437__$1 = this;
      return self__.meta12436;
    };
    cljs.core.async.impl.ioc_helpers.t12435.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t12435.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t12435.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t12435.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t12435.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t12435";
    cljs.core.async.impl.ioc_helpers.t12435.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.ioc-helpers/t12435");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t12435 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t12435(fn_handler__$1, f__$1, meta12436) {
      return new cljs.core.async.impl.ioc_helpers.t12435(fn_handler__$1, f__$1, meta12436);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t12435(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e12439) {
    if (e12439 instanceof Object) {
      var ex = e12439;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e12439;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_12442_12444 = state;
    statearr_12442_12444[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_12442_12444[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var cb = temp__4420__auto__;
    var statearr_12443_12445 = state;
    statearr_12443_12445[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12443_12445[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_12448_12450 = state;
    statearr_12448_12450[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_12448_12450[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var cb = temp__4420__auto__;
    var statearr_12449_12451 = state;
    statearr_12449_12451[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12449_12451[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4810__auto__, k__4811__auto__) {
  var self__ = this;
  var this__4810__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4810__auto____$1, k__4811__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4812__auto__, k12453, else__4813__auto__) {
  var self__ = this;
  var this__4812__auto____$1 = this;
  var G__12455 = k12453 instanceof cljs.core.Keyword ? k12453.fqn : null;
  switch(G__12455) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k12453, else__4813__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4824__auto__, writer__4825__auto__, opts__4826__auto__) {
  var self__ = this;
  var this__4824__auto____$1 = this;
  var pr_pair__4827__auto__ = function(this__4824__auto____$1) {
    return function(keyval__4828__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4825__auto__, cljs.core.pr_writer, "", " ", "", opts__4826__auto__, keyval__4828__auto__);
    };
  }(this__4824__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4825__auto__, pr_pair__4827__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4826__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4808__auto__) {
  var self__ = this;
  var this__4808__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4804__auto__) {
  var self__ = this;
  var this__4804__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4814__auto__) {
  var self__ = this;
  var this__4814__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4805__auto__) {
  var self__ = this;
  var this__4805__auto____$1 = this;
  var h__4631__auto__ = self__.__hash;
  if (!(h__4631__auto__ == null)) {
    return h__4631__auto__;
  } else {
    var h__4631__auto____$1 = cljs.core.hash_imap.call(null, this__4805__auto____$1);
    self__.__hash = h__4631__auto____$1;
    return h__4631__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4806__auto__, other__4807__auto__) {
  var self__ = this;
  var this__4806__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = other__4807__auto__;
    if (cljs.core.truth_(and__4203__auto__)) {
      var and__4203__auto____$1 = this__4806__auto____$1.constructor === other__4807__auto__.constructor;
      if (and__4203__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4806__auto____$1, other__4807__auto__);
      } else {
        return and__4203__auto____$1;
      }
    } else {
      return and__4203__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4819__auto__, k__4820__auto__) {
  var self__ = this;
  var this__4819__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4820__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4819__auto____$1), self__.__meta), k__4820__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4820__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4817__auto__, k__4818__auto__, G__12452) {
  var self__ = this;
  var this__4817__auto____$1 = this;
  var pred__12456 = cljs.core.keyword_identical_QMARK_;
  var expr__12457 = k__4818__auto__;
  if (cljs.core.truth_(pred__12456.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__12457))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__12452, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__12456.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__12457))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__12452, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__12456.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__12457))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__12452, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__12456.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__12457))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__12452, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__12456.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__12457))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__12452, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4818__auto__, G__12452), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4822__auto__) {
  var self__ = this;
  var this__4822__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4809__auto__, G__12452) {
  var self__ = this;
  var this__4809__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__12452, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4815__auto__, entry__4816__auto__) {
  var self__ = this;
  var this__4815__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4816__auto__)) {
    return cljs.core._assoc.call(null, this__4815__auto____$1, cljs.core._nth.call(null, entry__4816__auto__, 0), cljs.core._nth.call(null, entry__4816__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4815__auto____$1, entry__4816__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4844__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4844__auto__, writer__4845__auto__) {
  return cljs.core._write.call(null, writer__4845__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__12454) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__12454), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__12454), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__12454), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__12454), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__12454), null, cljs.core.dissoc.call(null, G__12454, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_12461 = state;
  statearr_12461[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_12461;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = exception;
      if (cljs.core.truth_(and__4203__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4203__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4203__auto__ = exception;
        if (cljs.core.truth_(and__4203__auto__)) {
          var and__4203__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4203__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4203__auto____$1;
          }
        } else {
          return and__4203__auto__;
        }
      }())) {
        var statearr_12467 = state;
        statearr_12467[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_12467[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_12467[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_12467[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_12467;
      } else {
        if (cljs.core.truth_(function() {
          var and__4203__auto__ = exception;
          if (cljs.core.truth_(and__4203__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4203__auto__;
          }
        }())) {
          var statearr_12468_12472 = state;
          statearr_12468_12472[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__12473 = state;
          state = G__12473;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4203__auto__ = exception;
            if (cljs.core.truth_(and__4203__auto__)) {
              var and__4203__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4203__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4203__auto____$1;
              }
            } else {
              return and__4203__auto__;
            }
          }())) {
            var statearr_12469 = state;
            statearr_12469[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_12469[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_12469;
          } else {
            if (cljs.core.truth_(function() {
              var and__4203__auto__ = cljs.core.not.call(null, exception);
              if (and__4203__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4203__auto__;
              }
            }())) {
              var statearr_12470 = state;
              statearr_12470[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_12470[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_12470;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_12471 = state;
                statearr_12471[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_12471[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_12471;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__12493 = cnt + 1;
      cnt = G__12493;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5100__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5100__auto__) {
      var v_12494 = this$.pop();
      if (keep_QMARK_.call(null, v_12494)) {
        this$.unshift(v_12494);
      } else {
      }
      var G__12495 = x + 1;
      x = G__12495;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_12498 = 0;
  while (true) {
    var m_12499 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_12499 == null) {
    } else {
      m_12499.call(null);
      if (count_12498 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__12500 = count_12498 + 1;
        count_12498 = G__12500;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4203__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4203__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4203__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t12506 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t12506 = function(box, val, meta12507) {
      this.box = box;
      this.val = val;
      this.meta12507 = meta12507;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t12506.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12508, meta12507__$1) {
      var self__ = this;
      var _12508__$1 = this;
      return new cljs.core.async.impl.channels.t12506(self__.box, self__.val, meta12507__$1);
    };
    cljs.core.async.impl.channels.t12506.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12508) {
      var self__ = this;
      var _12508__$1 = this;
      return self__.meta12507;
    };
    cljs.core.async.impl.channels.t12506.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t12506.cljs$lang$type = true;
    cljs.core.async.impl.channels.t12506.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t12506";
    cljs.core.async.impl.channels.t12506.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.channels/t12506");
    };
    cljs.core.async.impl.channels.__GT_t12506 = function cljs$core$async$impl$channels$box_$___GT_t12506(box__$1, val__$1, meta12507) {
      return new cljs.core.async.impl.channels.t12506(box__$1, val__$1, meta12507);
    };
  }
  return new cljs.core.async.impl.channels.t12506(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj12510 = {};
  return obj12510;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4203__auto__ = this$;
    if (and__4203__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4851__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4215__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_12511 = self__.puts.pop();
    if (putter_12511 == null) {
    } else {
      var put_handler_12512 = putter_12511.handler;
      var val_12513 = putter_12511.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_12512)) {
        var put_cb_12514 = cljs.core.async.impl.protocols.commit.call(null, put_handler_12512);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_12514, put_handler_12512, val_12513, putter_12511, this$__$1) {
          return function() {
            return put_cb_12514.call(null, true);
          };
        }(put_cb_12514, put_handler_12512, val_12513, putter_12511, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = self__.buf;
      if (cljs.core.truth_(and__4203__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4203__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_12515 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_12515)) {
            var take_cb_12516 = cljs.core.async.impl.protocols.commit.call(null, taker_12515);
            var val_12517__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_12516, val_12517__$1, taker_12515, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_12516.call(null, val_12517__$1);
              };
            }(take_cb_12516, val_12517__$1, taker_12515, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_12518 = self__.puts.pop();
          if (putter_12518 == null) {
          } else {
            var put_handler_12519 = putter_12518.handler;
            var val_12520 = putter_12518.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_12519)) {
              var put_cb_12521 = cljs.core.async.impl.protocols.commit.call(null, put_handler_12519);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_12521, put_handler_12519, val_12520, putter_12518, _, retval, this$__$1) {
                return function() {
                  return put_cb_12521.call(null, true);
                };
              }(put_cb_12521, put_handler_12519, val_12520, putter_12518, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_12520))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4203__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4203__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4203__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4203__auto__ = self__.buf;
              if (cljs.core.truth_(and__4203__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4203__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4203__auto__ = self__.buf;
      if (cljs.core.truth_(and__4203__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4203__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_12522 = self__.takes.pop();
      if (taker_12522 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_12522)) {
          var take_cb_12523 = cljs.core.async.impl.protocols.commit.call(null, taker_12522);
          var val_12524 = cljs.core.truth_(function() {
            var and__4203__auto__ = self__.buf;
            if (cljs.core.truth_(and__4203__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4203__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_12523, val_12524, taker_12522, this$__$1) {
            return function() {
              return take_cb_12523.call(null, val_12524);
            };
          }(take_cb_12523, val_12524, taker_12522, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4215__auto__ = exh;
    if (cljs.core.truth_(or__4215__auto__)) {
      return or__4215__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan() {
  var G__12526 = arguments.length;
  switch(G__12526) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__12530 = null;
        var G__12530__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e12527) {
            var t = e12527;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__12530__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e12528) {
            var t = e12528;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__12530 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__12530__1.call(this, buf__$1);
            case 2:
              return G__12530__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12530.cljs$core$IFn$_invoke$arity$1 = G__12530__1;
        G__12530.cljs$core$IFn$_invoke$arity$2 = G__12530__2;
        return G__12530;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level() {
  var G__12398 = arguments.length;
  switch(G__12398) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__12400 = level + 1;
      level = G__12400;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node() {
  var G__12402 = arguments.length;
  switch(G__12402) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_12404 = 0;
  while (true) {
    if (i_12404 < arr.length) {
      arr[i_12404] = null;
      var G__12405 = i_12404 + 1;
      i_12404 = G__12405;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node() {
  var G__12407 = arguments.length;
  switch(G__12407) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4420__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4420__auto__)) {
            var x_SINGLEQUOTE_ = temp__4420__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__12409 = x_SINGLEQUOTE_;
              x__$1 = G__12409;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__12410 = x__$1;
      var G__12411 = k;
      var G__12412 = level - 1;
      var G__12413 = update;
      x = G__12410;
      k = G__12411;
      level = G__12412;
      update = G__12413;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_12414 = self__.level + 1;
      while (true) {
        if (i_12414 <= new_level + 1) {
          update[i_12414] = self__.header;
          var G__12415 = i_12414 + 1;
          i_12414 = G__12415;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_12416 = 0;
    while (true) {
      if (i_12416 <= self__.level) {
        var links_12417 = update[i_12416].forward;
        if (links_12417[i_12416] === x__$1) {
          links_12417[i_12416] = x__$1.forward[i_12416];
          var G__12418 = i_12416 + 1;
          i_12416 = G__12418;
          continue;
        } else {
          var G__12419 = i_12416 + 1;
          i_12416 = G__12419;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__12420 = x_SINGLEQUOTE_;
              x__$1 = G__12420;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__12421 = nx;
        var G__12422 = level__$1 - 1;
        x = G__12421;
        level__$1 = G__12422;
        continue;
      } else {
        var G__12423 = x;
        var G__12424 = level__$1 - 1;
        x = G__12423;
        level__$1 = G__12424;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__12425 = x_SINGLEQUOTE_;
              x__$1 = G__12425;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__12426 = nx;
        var G__12427 = level__$1 - 1;
        x = G__12426;
        level__$1 = G__12427;
        continue;
      } else {
        var G__12428 = x;
        var G__12429 = level__$1 - 1;
        x = G__12428;
        level__$1 = G__12429;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
  return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4215__auto__ = cljs.core.truth_(function() {
    var and__4203__auto__ = me;
    if (cljs.core.truth_(and__4203__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4203__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4215__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4215__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t9904 !== "undefined") {
  } else {
    cljs.core.async.t9904 = function(fn_handler, f, meta9905) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta9905 = meta9905;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t9904.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9906, meta9905__$1) {
      var self__ = this;
      var _9906__$1 = this;
      return new cljs.core.async.t9904(self__.fn_handler, self__.f, meta9905__$1);
    };
    cljs.core.async.t9904.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9906) {
      var self__ = this;
      var _9906__$1 = this;
      return self__.meta9905;
    };
    cljs.core.async.t9904.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9904.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t9904.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t9904.cljs$lang$type = true;
    cljs.core.async.t9904.cljs$lang$ctorStr = "cljs.core.async/t9904";
    cljs.core.async.t9904.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t9904");
    };
    cljs.core.async.__GT_t9904 = function cljs$core$async$fn_handler_$___GT_t9904(fn_handler__$1, f__$1, meta9905) {
      return new cljs.core.async.t9904(fn_handler__$1, f__$1, meta9905);
    };
  }
  return new cljs.core.async.t9904(cljs$core$async$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__9908 = buff;
  if (G__9908) {
    var bit__4889__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4215__auto__ = bit__4889__auto__;
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return G__9908.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__9908.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__9908);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__9908);
  }
};
cljs.core.async.chan = function cljs$core$async$chan() {
  var G__9910 = arguments.length;
  switch(G__9910) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_() {
  var G__9913 = arguments.length;
  switch(G__9913) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_9915 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_9915);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_9915, ret) {
        return function() {
          return fn1.call(null, val_9915);
        };
      }(val_9915, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_() {
  var G__9917 = arguments.length;
  switch(G__9917) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var ret = temp__4420__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var retb = temp__4420__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4420__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4420__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5100__auto___9919 = n;
  var x_9920 = 0;
  while (true) {
    if (x_9920 < n__5100__auto___9919) {
      a[x_9920] = 0;
      var G__9921 = x_9920 + 1;
      x_9920 = G__9921;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__9922 = i + 1;
      i = G__9922;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t9926 !== "undefined") {
  } else {
    cljs.core.async.t9926 = function(alt_flag, flag, meta9927) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta9927 = meta9927;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t9926.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_9928, meta9927__$1) {
        var self__ = this;
        var _9928__$1 = this;
        return new cljs.core.async.t9926(self__.alt_flag, self__.flag, meta9927__$1);
      };
    }(flag);
    cljs.core.async.t9926.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_9928) {
        var self__ = this;
        var _9928__$1 = this;
        return self__.meta9927;
      };
    }(flag);
    cljs.core.async.t9926.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9926.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t9926.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t9926.cljs$lang$type = true;
    cljs.core.async.t9926.cljs$lang$ctorStr = "cljs.core.async/t9926";
    cljs.core.async.t9926.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
        return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t9926");
      };
    }(flag);
    cljs.core.async.__GT_t9926 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t9926(alt_flag__$1, flag__$1, meta9927) {
        return new cljs.core.async.t9926(alt_flag__$1, flag__$1, meta9927);
      };
    }(flag);
  }
  return new cljs.core.async.t9926(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t9932 !== "undefined") {
  } else {
    cljs.core.async.t9932 = function(alt_handler, flag, cb, meta9933) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta9933 = meta9933;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t9932.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9934, meta9933__$1) {
      var self__ = this;
      var _9934__$1 = this;
      return new cljs.core.async.t9932(self__.alt_handler, self__.flag, self__.cb, meta9933__$1);
    };
    cljs.core.async.t9932.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9934) {
      var self__ = this;
      var _9934__$1 = this;
      return self__.meta9933;
    };
    cljs.core.async.t9932.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9932.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t9932.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t9932.cljs$lang$type = true;
    cljs.core.async.t9932.cljs$lang$ctorStr = "cljs.core.async/t9932";
    cljs.core.async.t9932.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t9932");
    };
    cljs.core.async.__GT_t9932 = function cljs$core$async$alt_handler_$___GT_t9932(alt_handler__$1, flag__$1, cb__$1, meta9933) {
      return new cljs.core.async.t9932(alt_handler__$1, flag__$1, cb__$1, meta9933);
    };
  }
  return new cljs.core.async.t9932(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__9935_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9935_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__9936_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9936_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4215__auto__ = wport;
            if (cljs.core.truth_(or__4215__auto__)) {
              return or__4215__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__9937 = i + 1;
          i = G__9937;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4215__auto__ = ret;
  if (cljs.core.truth_(or__4215__auto__)) {
    return or__4215__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4422__auto__ = function() {
        var and__4203__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4203__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4203__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4422__auto__)) {
        var got = temp__4422__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_() {
  var argseq__5255__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5255__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__9940) {
  var map__9941 = p__9940;
  var map__9941__$1 = cljs.core.seq_QMARK_.call(null, map__9941) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9941) : map__9941;
  var opts = map__9941__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq9938) {
  var G__9939 = cljs.core.first.call(null, seq9938);
  var seq9938__$1 = cljs.core.next.call(null, seq9938);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9939, seq9938__$1);
};
cljs.core.async.pipe = function cljs$core$async$pipe() {
  var G__9943 = arguments.length;
  switch(G__9943) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__7524__auto___9992 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___9992) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___9992) {
          return function(state_9967) {
            var state_val_9968 = state_9967[1];
            if (state_val_9968 === 7) {
              var inst_9963 = state_9967[2];
              var state_9967__$1 = state_9967;
              var statearr_9969_9993 = state_9967__$1;
              statearr_9969_9993[2] = inst_9963;
              statearr_9969_9993[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9968 === 1) {
                var state_9967__$1 = state_9967;
                var statearr_9970_9994 = state_9967__$1;
                statearr_9970_9994[2] = null;
                statearr_9970_9994[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9968 === 4) {
                  var inst_9946 = state_9967[7];
                  var inst_9946__$1 = state_9967[2];
                  var inst_9947 = inst_9946__$1 == null;
                  var state_9967__$1 = function() {
                    var statearr_9971 = state_9967;
                    statearr_9971[7] = inst_9946__$1;
                    return statearr_9971;
                  }();
                  if (cljs.core.truth_(inst_9947)) {
                    var statearr_9972_9995 = state_9967__$1;
                    statearr_9972_9995[1] = 5;
                  } else {
                    var statearr_9973_9996 = state_9967__$1;
                    statearr_9973_9996[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9968 === 13) {
                    var state_9967__$1 = state_9967;
                    var statearr_9974_9997 = state_9967__$1;
                    statearr_9974_9997[2] = null;
                    statearr_9974_9997[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9968 === 6) {
                      var inst_9946 = state_9967[7];
                      var state_9967__$1 = state_9967;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9967__$1, 11, to, inst_9946);
                    } else {
                      if (state_val_9968 === 3) {
                        var inst_9965 = state_9967[2];
                        var state_9967__$1 = state_9967;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9967__$1, inst_9965);
                      } else {
                        if (state_val_9968 === 12) {
                          var state_9967__$1 = state_9967;
                          var statearr_9975_9998 = state_9967__$1;
                          statearr_9975_9998[2] = null;
                          statearr_9975_9998[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9968 === 2) {
                            var state_9967__$1 = state_9967;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9967__$1, 4, from);
                          } else {
                            if (state_val_9968 === 11) {
                              var inst_9956 = state_9967[2];
                              var state_9967__$1 = state_9967;
                              if (cljs.core.truth_(inst_9956)) {
                                var statearr_9976_9999 = state_9967__$1;
                                statearr_9976_9999[1] = 12;
                              } else {
                                var statearr_9977_10000 = state_9967__$1;
                                statearr_9977_10000[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9968 === 9) {
                                var state_9967__$1 = state_9967;
                                var statearr_9978_10001 = state_9967__$1;
                                statearr_9978_10001[2] = null;
                                statearr_9978_10001[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9968 === 5) {
                                  var state_9967__$1 = state_9967;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_9979_10002 = state_9967__$1;
                                    statearr_9979_10002[1] = 8;
                                  } else {
                                    var statearr_9980_10003 = state_9967__$1;
                                    statearr_9980_10003[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9968 === 14) {
                                    var inst_9961 = state_9967[2];
                                    var state_9967__$1 = state_9967;
                                    var statearr_9981_10004 = state_9967__$1;
                                    statearr_9981_10004[2] = inst_9961;
                                    statearr_9981_10004[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9968 === 10) {
                                      var inst_9953 = state_9967[2];
                                      var state_9967__$1 = state_9967;
                                      var statearr_9982_10005 = state_9967__$1;
                                      statearr_9982_10005[2] = inst_9953;
                                      statearr_9982_10005[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9968 === 8) {
                                        var inst_9950 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_9967__$1 = state_9967;
                                        var statearr_9983_10006 = state_9967__$1;
                                        statearr_9983_10006[2] = inst_9950;
                                        statearr_9983_10006[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___9992);
        return function(switch__7462__auto__, c__7524__auto___9992) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_9987 = [null, null, null, null, null, null, null, null];
              statearr_9987[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_9987[1] = 1;
              return statearr_9987;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_9967) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_9967);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e9988) {
                    if (e9988 instanceof Object) {
                      var ex__7466__auto__ = e9988;
                      var statearr_9989_10007 = state_9967;
                      statearr_9989_10007[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_9967);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e9988;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10008 = state_9967;
                  state_9967 = G__10008;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_9967) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_9967);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___9992);
      }();
      var state__7526__auto__ = function() {
        var statearr_9990 = f__7525__auto__.call(null);
        statearr_9990[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___9992;
        return statearr_9990;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___9992));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__10192) {
      var vec__10193 = p__10192;
      var v = cljs.core.nth.call(null, vec__10193, 0, null);
      var p = cljs.core.nth.call(null, vec__10193, 1, null);
      var job = vec__10193;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__7524__auto___10375 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___10375, res, vec__10193, v, p, job, jobs, results) {
          return function() {
            var f__7525__auto__ = function() {
              var switch__7462__auto__ = function(c__7524__auto___10375, res, vec__10193, v, p, job, jobs, results) {
                return function(state_10198) {
                  var state_val_10199 = state_10198[1];
                  if (state_val_10199 === 1) {
                    var state_10198__$1 = state_10198;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10198__$1, 2, res, v);
                  } else {
                    if (state_val_10199 === 2) {
                      var inst_10195 = state_10198[2];
                      var inst_10196 = cljs.core.async.close_BANG_.call(null, res);
                      var state_10198__$1 = function() {
                        var statearr_10200 = state_10198;
                        statearr_10200[7] = inst_10195;
                        return statearr_10200;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10198__$1, inst_10196);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__7524__auto___10375, res, vec__10193, v, p, job, jobs, results);
              return function(switch__7462__auto__, c__7524__auto___10375, res, vec__10193, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0 = function() {
                    var statearr_10204 = [null, null, null, null, null, null, null, null];
                    statearr_10204[0] = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
                    statearr_10204[1] = 1;
                    return statearr_10204;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1 = function(state_10198) {
                    while (true) {
                      var ret_value__7464__auto__ = function() {
                        try {
                          while (true) {
                            var result__7465__auto__ = switch__7462__auto__.call(null, state_10198);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7465__auto__;
                            }
                            break;
                          }
                        } catch (e10205) {
                          if (e10205 instanceof Object) {
                            var ex__7466__auto__ = e10205;
                            var statearr_10206_10376 = state_10198;
                            statearr_10206_10376[5] = ex__7466__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10198);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e10205;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__10377 = state_10198;
                        state_10198 = G__10377;
                        continue;
                      } else {
                        return ret_value__7464__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = function(state_10198) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1.call(this, state_10198);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
                }();
              }(switch__7462__auto__, c__7524__auto___10375, res, vec__10193, v, p, job, jobs, results);
            }();
            var state__7526__auto__ = function() {
              var statearr_10207 = f__7525__auto__.call(null);
              statearr_10207[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___10375;
              return statearr_10207;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
          };
        }(c__7524__auto___10375, res, vec__10193, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__10208) {
      var vec__10209 = p__10208;
      var v = cljs.core.nth.call(null, vec__10209, 0, null);
      var p = cljs.core.nth.call(null, vec__10209, 1, null);
      var job = vec__10209;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5100__auto___10378 = n;
  var __10379 = 0;
  while (true) {
    if (__10379 < n__5100__auto___10378) {
      var G__10210_10380 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__10210_10380) {
        case "compute":
          var c__7524__auto___10382 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__10379, c__7524__auto___10382, G__10210_10380, n__5100__auto___10378, jobs, results, process, async) {
            return function() {
              var f__7525__auto__ = function() {
                var switch__7462__auto__ = function(__10379, c__7524__auto___10382, G__10210_10380, n__5100__auto___10378, jobs, results, process, async) {
                  return function(state_10223) {
                    var state_val_10224 = state_10223[1];
                    if (state_val_10224 === 1) {
                      var state_10223__$1 = state_10223;
                      var statearr_10225_10383 = state_10223__$1;
                      statearr_10225_10383[2] = null;
                      statearr_10225_10383[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10224 === 2) {
                        var state_10223__$1 = state_10223;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10223__$1, 4, jobs);
                      } else {
                        if (state_val_10224 === 3) {
                          var inst_10221 = state_10223[2];
                          var state_10223__$1 = state_10223;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10223__$1, inst_10221);
                        } else {
                          if (state_val_10224 === 4) {
                            var inst_10213 = state_10223[2];
                            var inst_10214 = process.call(null, inst_10213);
                            var state_10223__$1 = state_10223;
                            if (cljs.core.truth_(inst_10214)) {
                              var statearr_10226_10384 = state_10223__$1;
                              statearr_10226_10384[1] = 5;
                            } else {
                              var statearr_10227_10385 = state_10223__$1;
                              statearr_10227_10385[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10224 === 5) {
                              var state_10223__$1 = state_10223;
                              var statearr_10228_10386 = state_10223__$1;
                              statearr_10228_10386[2] = null;
                              statearr_10228_10386[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10224 === 6) {
                                var state_10223__$1 = state_10223;
                                var statearr_10229_10387 = state_10223__$1;
                                statearr_10229_10387[2] = null;
                                statearr_10229_10387[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10224 === 7) {
                                  var inst_10219 = state_10223[2];
                                  var state_10223__$1 = state_10223;
                                  var statearr_10230_10388 = state_10223__$1;
                                  statearr_10230_10388[2] = inst_10219;
                                  statearr_10230_10388[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__10379, c__7524__auto___10382, G__10210_10380, n__5100__auto___10378, jobs, results, process, async);
                return function(__10379, switch__7462__auto__, c__7524__auto___10382, G__10210_10380, n__5100__auto___10378, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0 = function() {
                      var statearr_10234 = [null, null, null, null, null, null, null];
                      statearr_10234[0] = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
                      statearr_10234[1] = 1;
                      return statearr_10234;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1 = function(state_10223) {
                      while (true) {
                        var ret_value__7464__auto__ = function() {
                          try {
                            while (true) {
                              var result__7465__auto__ = switch__7462__auto__.call(null, state_10223);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7465__auto__;
                              }
                              break;
                            }
                          } catch (e10235) {
                            if (e10235 instanceof Object) {
                              var ex__7466__auto__ = e10235;
                              var statearr_10236_10389 = state_10223;
                              statearr_10236_10389[5] = ex__7466__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10223);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e10235;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__10390 = state_10223;
                          state_10223 = G__10390;
                          continue;
                        } else {
                          return ret_value__7464__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = function(state_10223) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1.call(this, state_10223);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
                  }();
                }(__10379, switch__7462__auto__, c__7524__auto___10382, G__10210_10380, n__5100__auto___10378, jobs, results, process, async);
              }();
              var state__7526__auto__ = function() {
                var statearr_10237 = f__7525__auto__.call(null);
                statearr_10237[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___10382;
                return statearr_10237;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
            };
          }(__10379, c__7524__auto___10382, G__10210_10380, n__5100__auto___10378, jobs, results, process, async));
          break;
        case "async":
          var c__7524__auto___10391 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__10379, c__7524__auto___10391, G__10210_10380, n__5100__auto___10378, jobs, results, process, async) {
            return function() {
              var f__7525__auto__ = function() {
                var switch__7462__auto__ = function(__10379, c__7524__auto___10391, G__10210_10380, n__5100__auto___10378, jobs, results, process, async) {
                  return function(state_10250) {
                    var state_val_10251 = state_10250[1];
                    if (state_val_10251 === 1) {
                      var state_10250__$1 = state_10250;
                      var statearr_10252_10392 = state_10250__$1;
                      statearr_10252_10392[2] = null;
                      statearr_10252_10392[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10251 === 2) {
                        var state_10250__$1 = state_10250;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10250__$1, 4, jobs);
                      } else {
                        if (state_val_10251 === 3) {
                          var inst_10248 = state_10250[2];
                          var state_10250__$1 = state_10250;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10250__$1, inst_10248);
                        } else {
                          if (state_val_10251 === 4) {
                            var inst_10240 = state_10250[2];
                            var inst_10241 = async.call(null, inst_10240);
                            var state_10250__$1 = state_10250;
                            if (cljs.core.truth_(inst_10241)) {
                              var statearr_10253_10393 = state_10250__$1;
                              statearr_10253_10393[1] = 5;
                            } else {
                              var statearr_10254_10394 = state_10250__$1;
                              statearr_10254_10394[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10251 === 5) {
                              var state_10250__$1 = state_10250;
                              var statearr_10255_10395 = state_10250__$1;
                              statearr_10255_10395[2] = null;
                              statearr_10255_10395[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10251 === 6) {
                                var state_10250__$1 = state_10250;
                                var statearr_10256_10396 = state_10250__$1;
                                statearr_10256_10396[2] = null;
                                statearr_10256_10396[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10251 === 7) {
                                  var inst_10246 = state_10250[2];
                                  var state_10250__$1 = state_10250;
                                  var statearr_10257_10397 = state_10250__$1;
                                  statearr_10257_10397[2] = inst_10246;
                                  statearr_10257_10397[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__10379, c__7524__auto___10391, G__10210_10380, n__5100__auto___10378, jobs, results, process, async);
                return function(__10379, switch__7462__auto__, c__7524__auto___10391, G__10210_10380, n__5100__auto___10378, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0 = function() {
                      var statearr_10261 = [null, null, null, null, null, null, null];
                      statearr_10261[0] = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
                      statearr_10261[1] = 1;
                      return statearr_10261;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1 = function(state_10250) {
                      while (true) {
                        var ret_value__7464__auto__ = function() {
                          try {
                            while (true) {
                              var result__7465__auto__ = switch__7462__auto__.call(null, state_10250);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7465__auto__;
                              }
                              break;
                            }
                          } catch (e10262) {
                            if (e10262 instanceof Object) {
                              var ex__7466__auto__ = e10262;
                              var statearr_10263_10398 = state_10250;
                              statearr_10263_10398[5] = ex__7466__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10250);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e10262;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__10399 = state_10250;
                          state_10250 = G__10399;
                          continue;
                        } else {
                          return ret_value__7464__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = function(state_10250) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1.call(this, state_10250);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
                  }();
                }(__10379, switch__7462__auto__, c__7524__auto___10391, G__10210_10380, n__5100__auto___10378, jobs, results, process, async);
              }();
              var state__7526__auto__ = function() {
                var statearr_10264 = f__7525__auto__.call(null);
                statearr_10264[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___10391;
                return statearr_10264;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
            };
          }(__10379, c__7524__auto___10391, G__10210_10380, n__5100__auto___10378, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__10400 = __10379 + 1;
      __10379 = G__10400;
      continue;
    } else {
    }
    break;
  }
  var c__7524__auto___10401 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___10401, jobs, results, process, async) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___10401, jobs, results, process, async) {
          return function(state_10286) {
            var state_val_10287 = state_10286[1];
            if (state_val_10287 === 1) {
              var state_10286__$1 = state_10286;
              var statearr_10288_10402 = state_10286__$1;
              statearr_10288_10402[2] = null;
              statearr_10288_10402[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10287 === 2) {
                var state_10286__$1 = state_10286;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10286__$1, 4, from);
              } else {
                if (state_val_10287 === 3) {
                  var inst_10284 = state_10286[2];
                  var state_10286__$1 = state_10286;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10286__$1, inst_10284);
                } else {
                  if (state_val_10287 === 4) {
                    var inst_10267 = state_10286[7];
                    var inst_10267__$1 = state_10286[2];
                    var inst_10268 = inst_10267__$1 == null;
                    var state_10286__$1 = function() {
                      var statearr_10289 = state_10286;
                      statearr_10289[7] = inst_10267__$1;
                      return statearr_10289;
                    }();
                    if (cljs.core.truth_(inst_10268)) {
                      var statearr_10290_10403 = state_10286__$1;
                      statearr_10290_10403[1] = 5;
                    } else {
                      var statearr_10291_10404 = state_10286__$1;
                      statearr_10291_10404[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10287 === 5) {
                      var inst_10270 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_10286__$1 = state_10286;
                      var statearr_10292_10405 = state_10286__$1;
                      statearr_10292_10405[2] = inst_10270;
                      statearr_10292_10405[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10287 === 6) {
                        var inst_10272 = state_10286[8];
                        var inst_10267 = state_10286[7];
                        var inst_10272__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_10273 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_10274 = [inst_10267, inst_10272__$1];
                        var inst_10275 = new cljs.core.PersistentVector(null, 2, 5, inst_10273, inst_10274, null);
                        var state_10286__$1 = function() {
                          var statearr_10293 = state_10286;
                          statearr_10293[8] = inst_10272__$1;
                          return statearr_10293;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10286__$1, 8, jobs, inst_10275);
                      } else {
                        if (state_val_10287 === 7) {
                          var inst_10282 = state_10286[2];
                          var state_10286__$1 = state_10286;
                          var statearr_10294_10406 = state_10286__$1;
                          statearr_10294_10406[2] = inst_10282;
                          statearr_10294_10406[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10287 === 8) {
                            var inst_10272 = state_10286[8];
                            var inst_10277 = state_10286[2];
                            var state_10286__$1 = function() {
                              var statearr_10295 = state_10286;
                              statearr_10295[9] = inst_10277;
                              return statearr_10295;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10286__$1, 9, results, inst_10272);
                          } else {
                            if (state_val_10287 === 9) {
                              var inst_10279 = state_10286[2];
                              var state_10286__$1 = function() {
                                var statearr_10296 = state_10286;
                                statearr_10296[10] = inst_10279;
                                return statearr_10296;
                              }();
                              var statearr_10297_10407 = state_10286__$1;
                              statearr_10297_10407[2] = null;
                              statearr_10297_10407[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___10401, jobs, results, process, async);
        return function(switch__7462__auto__, c__7524__auto___10401, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0 = function() {
              var statearr_10301 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_10301[0] = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
              statearr_10301[1] = 1;
              return statearr_10301;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1 = function(state_10286) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_10286);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e10302) {
                    if (e10302 instanceof Object) {
                      var ex__7466__auto__ = e10302;
                      var statearr_10303_10408 = state_10286;
                      statearr_10303_10408[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10286);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10302;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10409 = state_10286;
                  state_10286 = G__10409;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = function(state_10286) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1.call(this, state_10286);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___10401, jobs, results, process, async);
      }();
      var state__7526__auto__ = function() {
        var statearr_10304 = f__7525__auto__.call(null);
        statearr_10304[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___10401;
        return statearr_10304;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___10401, jobs, results, process, async));
  var c__7524__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto__, jobs, results, process, async) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto__, jobs, results, process, async) {
          return function(state_10342) {
            var state_val_10343 = state_10342[1];
            if (state_val_10343 === 7) {
              var inst_10338 = state_10342[2];
              var state_10342__$1 = state_10342;
              var statearr_10344_10410 = state_10342__$1;
              statearr_10344_10410[2] = inst_10338;
              statearr_10344_10410[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10343 === 20) {
                var state_10342__$1 = state_10342;
                var statearr_10345_10411 = state_10342__$1;
                statearr_10345_10411[2] = null;
                statearr_10345_10411[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10343 === 1) {
                  var state_10342__$1 = state_10342;
                  var statearr_10346_10412 = state_10342__$1;
                  statearr_10346_10412[2] = null;
                  statearr_10346_10412[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10343 === 4) {
                    var inst_10307 = state_10342[7];
                    var inst_10307__$1 = state_10342[2];
                    var inst_10308 = inst_10307__$1 == null;
                    var state_10342__$1 = function() {
                      var statearr_10347 = state_10342;
                      statearr_10347[7] = inst_10307__$1;
                      return statearr_10347;
                    }();
                    if (cljs.core.truth_(inst_10308)) {
                      var statearr_10348_10413 = state_10342__$1;
                      statearr_10348_10413[1] = 5;
                    } else {
                      var statearr_10349_10414 = state_10342__$1;
                      statearr_10349_10414[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10343 === 15) {
                      var inst_10320 = state_10342[8];
                      var state_10342__$1 = state_10342;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10342__$1, 18, to, inst_10320);
                    } else {
                      if (state_val_10343 === 21) {
                        var inst_10333 = state_10342[2];
                        var state_10342__$1 = state_10342;
                        var statearr_10350_10415 = state_10342__$1;
                        statearr_10350_10415[2] = inst_10333;
                        statearr_10350_10415[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10343 === 13) {
                          var inst_10335 = state_10342[2];
                          var state_10342__$1 = function() {
                            var statearr_10351 = state_10342;
                            statearr_10351[9] = inst_10335;
                            return statearr_10351;
                          }();
                          var statearr_10352_10416 = state_10342__$1;
                          statearr_10352_10416[2] = null;
                          statearr_10352_10416[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10343 === 6) {
                            var inst_10307 = state_10342[7];
                            var state_10342__$1 = state_10342;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10342__$1, 11, inst_10307);
                          } else {
                            if (state_val_10343 === 17) {
                              var inst_10328 = state_10342[2];
                              var state_10342__$1 = state_10342;
                              if (cljs.core.truth_(inst_10328)) {
                                var statearr_10353_10417 = state_10342__$1;
                                statearr_10353_10417[1] = 19;
                              } else {
                                var statearr_10354_10418 = state_10342__$1;
                                statearr_10354_10418[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10343 === 3) {
                                var inst_10340 = state_10342[2];
                                var state_10342__$1 = state_10342;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10342__$1, inst_10340);
                              } else {
                                if (state_val_10343 === 12) {
                                  var inst_10317 = state_10342[10];
                                  var state_10342__$1 = state_10342;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10342__$1, 14, inst_10317);
                                } else {
                                  if (state_val_10343 === 2) {
                                    var state_10342__$1 = state_10342;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10342__$1, 4, results);
                                  } else {
                                    if (state_val_10343 === 19) {
                                      var state_10342__$1 = state_10342;
                                      var statearr_10355_10419 = state_10342__$1;
                                      statearr_10355_10419[2] = null;
                                      statearr_10355_10419[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10343 === 11) {
                                        var inst_10317 = state_10342[2];
                                        var state_10342__$1 = function() {
                                          var statearr_10356 = state_10342;
                                          statearr_10356[10] = inst_10317;
                                          return statearr_10356;
                                        }();
                                        var statearr_10357_10420 = state_10342__$1;
                                        statearr_10357_10420[2] = null;
                                        statearr_10357_10420[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10343 === 9) {
                                          var state_10342__$1 = state_10342;
                                          var statearr_10358_10421 = state_10342__$1;
                                          statearr_10358_10421[2] = null;
                                          statearr_10358_10421[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10343 === 5) {
                                            var state_10342__$1 = state_10342;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_10359_10422 = state_10342__$1;
                                              statearr_10359_10422[1] = 8;
                                            } else {
                                              var statearr_10360_10423 = state_10342__$1;
                                              statearr_10360_10423[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_10343 === 14) {
                                              var inst_10322 = state_10342[11];
                                              var inst_10320 = state_10342[8];
                                              var inst_10320__$1 = state_10342[2];
                                              var inst_10321 = inst_10320__$1 == null;
                                              var inst_10322__$1 = cljs.core.not.call(null, inst_10321);
                                              var state_10342__$1 = function() {
                                                var statearr_10361 = state_10342;
                                                statearr_10361[11] = inst_10322__$1;
                                                statearr_10361[8] = inst_10320__$1;
                                                return statearr_10361;
                                              }();
                                              if (inst_10322__$1) {
                                                var statearr_10362_10424 = state_10342__$1;
                                                statearr_10362_10424[1] = 15;
                                              } else {
                                                var statearr_10363_10425 = state_10342__$1;
                                                statearr_10363_10425[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_10343 === 16) {
                                                var inst_10322 = state_10342[11];
                                                var state_10342__$1 = state_10342;
                                                var statearr_10364_10426 = state_10342__$1;
                                                statearr_10364_10426[2] = inst_10322;
                                                statearr_10364_10426[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_10343 === 10) {
                                                  var inst_10314 = state_10342[2];
                                                  var state_10342__$1 = state_10342;
                                                  var statearr_10365_10427 = state_10342__$1;
                                                  statearr_10365_10427[2] = inst_10314;
                                                  statearr_10365_10427[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_10343 === 18) {
                                                    var inst_10325 = state_10342[2];
                                                    var state_10342__$1 = state_10342;
                                                    var statearr_10366_10428 = state_10342__$1;
                                                    statearr_10366_10428[2] = inst_10325;
                                                    statearr_10366_10428[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_10343 === 8) {
                                                      var inst_10311 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_10342__$1 = state_10342;
                                                      var statearr_10367_10429 = state_10342__$1;
                                                      statearr_10367_10429[2] = inst_10311;
                                                      statearr_10367_10429[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto__, jobs, results, process, async);
        return function(switch__7462__auto__, c__7524__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0 = function() {
              var statearr_10371 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10371[0] = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
              statearr_10371[1] = 1;
              return statearr_10371;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1 = function(state_10342) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_10342);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e10372) {
                    if (e10372 instanceof Object) {
                      var ex__7466__auto__ = e10372;
                      var statearr_10373_10430 = state_10342;
                      statearr_10373_10430[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10342);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10372;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10431 = state_10342;
                  state_10342 = G__10431;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__ = function(state_10342) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1.call(this, state_10342);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7463__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto__, jobs, results, process, async);
      }();
      var state__7526__auto__ = function() {
        var statearr_10374 = f__7525__auto__.call(null);
        statearr_10374[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto__;
        return statearr_10374;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto__, jobs, results, process, async));
  return c__7524__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async() {
  var G__10433 = arguments.length;
  switch(G__10433) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline() {
  var G__10436 = arguments.length;
  switch(G__10436) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split() {
  var G__10439 = arguments.length;
  switch(G__10439) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__7524__auto___10491 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___10491, tc, fc) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___10491, tc, fc) {
          return function(state_10465) {
            var state_val_10466 = state_10465[1];
            if (state_val_10466 === 7) {
              var inst_10461 = state_10465[2];
              var state_10465__$1 = state_10465;
              var statearr_10467_10492 = state_10465__$1;
              statearr_10467_10492[2] = inst_10461;
              statearr_10467_10492[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10466 === 1) {
                var state_10465__$1 = state_10465;
                var statearr_10468_10493 = state_10465__$1;
                statearr_10468_10493[2] = null;
                statearr_10468_10493[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10466 === 4) {
                  var inst_10442 = state_10465[7];
                  var inst_10442__$1 = state_10465[2];
                  var inst_10443 = inst_10442__$1 == null;
                  var state_10465__$1 = function() {
                    var statearr_10469 = state_10465;
                    statearr_10469[7] = inst_10442__$1;
                    return statearr_10469;
                  }();
                  if (cljs.core.truth_(inst_10443)) {
                    var statearr_10470_10494 = state_10465__$1;
                    statearr_10470_10494[1] = 5;
                  } else {
                    var statearr_10471_10495 = state_10465__$1;
                    statearr_10471_10495[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10466 === 13) {
                    var state_10465__$1 = state_10465;
                    var statearr_10472_10496 = state_10465__$1;
                    statearr_10472_10496[2] = null;
                    statearr_10472_10496[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10466 === 6) {
                      var inst_10442 = state_10465[7];
                      var inst_10448 = p.call(null, inst_10442);
                      var state_10465__$1 = state_10465;
                      if (cljs.core.truth_(inst_10448)) {
                        var statearr_10473_10497 = state_10465__$1;
                        statearr_10473_10497[1] = 9;
                      } else {
                        var statearr_10474_10498 = state_10465__$1;
                        statearr_10474_10498[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10466 === 3) {
                        var inst_10463 = state_10465[2];
                        var state_10465__$1 = state_10465;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10465__$1, inst_10463);
                      } else {
                        if (state_val_10466 === 12) {
                          var state_10465__$1 = state_10465;
                          var statearr_10475_10499 = state_10465__$1;
                          statearr_10475_10499[2] = null;
                          statearr_10475_10499[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10466 === 2) {
                            var state_10465__$1 = state_10465;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10465__$1, 4, ch);
                          } else {
                            if (state_val_10466 === 11) {
                              var inst_10442 = state_10465[7];
                              var inst_10452 = state_10465[2];
                              var state_10465__$1 = state_10465;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10465__$1, 8, inst_10452, inst_10442);
                            } else {
                              if (state_val_10466 === 9) {
                                var state_10465__$1 = state_10465;
                                var statearr_10476_10500 = state_10465__$1;
                                statearr_10476_10500[2] = tc;
                                statearr_10476_10500[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10466 === 5) {
                                  var inst_10445 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_10446 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_10465__$1 = function() {
                                    var statearr_10477 = state_10465;
                                    statearr_10477[8] = inst_10445;
                                    return statearr_10477;
                                  }();
                                  var statearr_10478_10501 = state_10465__$1;
                                  statearr_10478_10501[2] = inst_10446;
                                  statearr_10478_10501[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10466 === 14) {
                                    var inst_10459 = state_10465[2];
                                    var state_10465__$1 = state_10465;
                                    var statearr_10479_10502 = state_10465__$1;
                                    statearr_10479_10502[2] = inst_10459;
                                    statearr_10479_10502[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10466 === 10) {
                                      var state_10465__$1 = state_10465;
                                      var statearr_10480_10503 = state_10465__$1;
                                      statearr_10480_10503[2] = fc;
                                      statearr_10480_10503[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10466 === 8) {
                                        var inst_10454 = state_10465[2];
                                        var state_10465__$1 = state_10465;
                                        if (cljs.core.truth_(inst_10454)) {
                                          var statearr_10481_10504 = state_10465__$1;
                                          statearr_10481_10504[1] = 12;
                                        } else {
                                          var statearr_10482_10505 = state_10465__$1;
                                          statearr_10482_10505[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___10491, tc, fc);
        return function(switch__7462__auto__, c__7524__auto___10491, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_10486 = [null, null, null, null, null, null, null, null, null];
              statearr_10486[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_10486[1] = 1;
              return statearr_10486;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_10465) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_10465);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e10487) {
                    if (e10487 instanceof Object) {
                      var ex__7466__auto__ = e10487;
                      var statearr_10488_10506 = state_10465;
                      statearr_10488_10506[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10465);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10487;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10507 = state_10465;
                  state_10465 = G__10507;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_10465) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_10465);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___10491, tc, fc);
      }();
      var state__7526__auto__ = function() {
        var statearr_10489 = f__7525__auto__.call(null);
        statearr_10489[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___10491;
        return statearr_10489;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___10491, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__7524__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto__) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto__) {
          return function(state_10554) {
            var state_val_10555 = state_10554[1];
            if (state_val_10555 === 1) {
              var inst_10540 = init;
              var state_10554__$1 = function() {
                var statearr_10556 = state_10554;
                statearr_10556[7] = inst_10540;
                return statearr_10556;
              }();
              var statearr_10557_10572 = state_10554__$1;
              statearr_10557_10572[2] = null;
              statearr_10557_10572[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10555 === 2) {
                var state_10554__$1 = state_10554;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10554__$1, 4, ch);
              } else {
                if (state_val_10555 === 3) {
                  var inst_10552 = state_10554[2];
                  var state_10554__$1 = state_10554;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10554__$1, inst_10552);
                } else {
                  if (state_val_10555 === 4) {
                    var inst_10543 = state_10554[8];
                    var inst_10543__$1 = state_10554[2];
                    var inst_10544 = inst_10543__$1 == null;
                    var state_10554__$1 = function() {
                      var statearr_10558 = state_10554;
                      statearr_10558[8] = inst_10543__$1;
                      return statearr_10558;
                    }();
                    if (cljs.core.truth_(inst_10544)) {
                      var statearr_10559_10573 = state_10554__$1;
                      statearr_10559_10573[1] = 5;
                    } else {
                      var statearr_10560_10574 = state_10554__$1;
                      statearr_10560_10574[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10555 === 5) {
                      var inst_10540 = state_10554[7];
                      var state_10554__$1 = state_10554;
                      var statearr_10561_10575 = state_10554__$1;
                      statearr_10561_10575[2] = inst_10540;
                      statearr_10561_10575[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10555 === 6) {
                        var inst_10540 = state_10554[7];
                        var inst_10543 = state_10554[8];
                        var inst_10547 = f.call(null, inst_10540, inst_10543);
                        var inst_10540__$1 = inst_10547;
                        var state_10554__$1 = function() {
                          var statearr_10562 = state_10554;
                          statearr_10562[7] = inst_10540__$1;
                          return statearr_10562;
                        }();
                        var statearr_10563_10576 = state_10554__$1;
                        statearr_10563_10576[2] = null;
                        statearr_10563_10576[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10555 === 7) {
                          var inst_10550 = state_10554[2];
                          var state_10554__$1 = state_10554;
                          var statearr_10564_10577 = state_10554__$1;
                          statearr_10564_10577[2] = inst_10550;
                          statearr_10564_10577[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto__);
        return function(switch__7462__auto__, c__7524__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__7463__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__7463__auto____0 = function() {
              var statearr_10568 = [null, null, null, null, null, null, null, null, null];
              statearr_10568[0] = cljs$core$async$reduce_$_state_machine__7463__auto__;
              statearr_10568[1] = 1;
              return statearr_10568;
            };
            var cljs$core$async$reduce_$_state_machine__7463__auto____1 = function(state_10554) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_10554);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e10569) {
                    if (e10569 instanceof Object) {
                      var ex__7466__auto__ = e10569;
                      var statearr_10570_10578 = state_10554;
                      statearr_10570_10578[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10554);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10569;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10579 = state_10554;
                  state_10554 = G__10579;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__7463__auto__ = function(state_10554) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__7463__auto____1.call(this, state_10554);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__7463__auto____0;
            cljs$core$async$reduce_$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__7463__auto____1;
            return cljs$core$async$reduce_$_state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto__);
      }();
      var state__7526__auto__ = function() {
        var statearr_10571 = f__7525__auto__.call(null);
        statearr_10571[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto__;
        return statearr_10571;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto__));
  return c__7524__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan() {
  var G__10581 = arguments.length;
  switch(G__10581) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__7524__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto__) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto__) {
          return function(state_10606) {
            var state_val_10607 = state_10606[1];
            if (state_val_10607 === 7) {
              var inst_10588 = state_10606[2];
              var state_10606__$1 = state_10606;
              var statearr_10608_10632 = state_10606__$1;
              statearr_10608_10632[2] = inst_10588;
              statearr_10608_10632[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10607 === 1) {
                var inst_10582 = cljs.core.seq.call(null, coll);
                var inst_10583 = inst_10582;
                var state_10606__$1 = function() {
                  var statearr_10609 = state_10606;
                  statearr_10609[7] = inst_10583;
                  return statearr_10609;
                }();
                var statearr_10610_10633 = state_10606__$1;
                statearr_10610_10633[2] = null;
                statearr_10610_10633[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10607 === 4) {
                  var inst_10583 = state_10606[7];
                  var inst_10586 = cljs.core.first.call(null, inst_10583);
                  var state_10606__$1 = state_10606;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10606__$1, 7, ch, inst_10586);
                } else {
                  if (state_val_10607 === 13) {
                    var inst_10600 = state_10606[2];
                    var state_10606__$1 = state_10606;
                    var statearr_10611_10634 = state_10606__$1;
                    statearr_10611_10634[2] = inst_10600;
                    statearr_10611_10634[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10607 === 6) {
                      var inst_10591 = state_10606[2];
                      var state_10606__$1 = state_10606;
                      if (cljs.core.truth_(inst_10591)) {
                        var statearr_10612_10635 = state_10606__$1;
                        statearr_10612_10635[1] = 8;
                      } else {
                        var statearr_10613_10636 = state_10606__$1;
                        statearr_10613_10636[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10607 === 3) {
                        var inst_10604 = state_10606[2];
                        var state_10606__$1 = state_10606;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10606__$1, inst_10604);
                      } else {
                        if (state_val_10607 === 12) {
                          var state_10606__$1 = state_10606;
                          var statearr_10614_10637 = state_10606__$1;
                          statearr_10614_10637[2] = null;
                          statearr_10614_10637[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10607 === 2) {
                            var inst_10583 = state_10606[7];
                            var state_10606__$1 = state_10606;
                            if (cljs.core.truth_(inst_10583)) {
                              var statearr_10615_10638 = state_10606__$1;
                              statearr_10615_10638[1] = 4;
                            } else {
                              var statearr_10616_10639 = state_10606__$1;
                              statearr_10616_10639[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10607 === 11) {
                              var inst_10597 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_10606__$1 = state_10606;
                              var statearr_10617_10640 = state_10606__$1;
                              statearr_10617_10640[2] = inst_10597;
                              statearr_10617_10640[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10607 === 9) {
                                var state_10606__$1 = state_10606;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_10618_10641 = state_10606__$1;
                                  statearr_10618_10641[1] = 11;
                                } else {
                                  var statearr_10619_10642 = state_10606__$1;
                                  statearr_10619_10642[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10607 === 5) {
                                  var inst_10583 = state_10606[7];
                                  var state_10606__$1 = state_10606;
                                  var statearr_10620_10643 = state_10606__$1;
                                  statearr_10620_10643[2] = inst_10583;
                                  statearr_10620_10643[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10607 === 10) {
                                    var inst_10602 = state_10606[2];
                                    var state_10606__$1 = state_10606;
                                    var statearr_10621_10644 = state_10606__$1;
                                    statearr_10621_10644[2] = inst_10602;
                                    statearr_10621_10644[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10607 === 8) {
                                      var inst_10583 = state_10606[7];
                                      var inst_10593 = cljs.core.next.call(null, inst_10583);
                                      var inst_10583__$1 = inst_10593;
                                      var state_10606__$1 = function() {
                                        var statearr_10622 = state_10606;
                                        statearr_10622[7] = inst_10583__$1;
                                        return statearr_10622;
                                      }();
                                      var statearr_10623_10645 = state_10606__$1;
                                      statearr_10623_10645[2] = null;
                                      statearr_10623_10645[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto__);
        return function(switch__7462__auto__, c__7524__auto__) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_10627 = [null, null, null, null, null, null, null, null];
              statearr_10627[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_10627[1] = 1;
              return statearr_10627;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_10606) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_10606);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e10628) {
                    if (e10628 instanceof Object) {
                      var ex__7466__auto__ = e10628;
                      var statearr_10629_10646 = state_10606;
                      statearr_10629_10646[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10606);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10628;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10647 = state_10606;
                  state_10606 = G__10647;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_10606) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_10606);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto__);
      }();
      var state__7526__auto__ = function() {
        var statearr_10630 = f__7525__auto__.call(null);
        statearr_10630[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto__;
        return statearr_10630;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto__));
  return c__7524__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj10649 = {};
  return obj10649;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4203__auto__ = _;
    if (and__4203__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4851__auto__ = _ == null ? null : _;
    return function() {
      var or__4215__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj10651 = {};
  return obj10651;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t10873 !== "undefined") {
    } else {
      cljs.core.async.t10873 = function(mult, ch, cs, meta10874) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta10874 = meta10874;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t10873.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_10875, meta10874__$1) {
          var self__ = this;
          var _10875__$1 = this;
          return new cljs.core.async.t10873(self__.mult, self__.ch, self__.cs, meta10874__$1);
        };
      }(cs);
      cljs.core.async.t10873.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_10875) {
          var self__ = this;
          var _10875__$1 = this;
          return self__.meta10874;
        };
      }(cs);
      cljs.core.async.t10873.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t10873.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t10873.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t10873.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t10873.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t10873.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t10873.cljs$lang$type = true;
      cljs.core.async.t10873.cljs$lang$ctorStr = "cljs.core.async/t10873";
      cljs.core.async.t10873.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
          return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t10873");
        };
      }(cs);
      cljs.core.async.__GT_t10873 = function(cs) {
        return function cljs$core$async$mult_$___GT_t10873(mult__$1, ch__$1, cs__$1, meta10874) {
          return new cljs.core.async.t10873(mult__$1, ch__$1, cs__$1, meta10874);
        };
      }(cs);
    }
    return new cljs.core.async.t10873(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__7524__auto___11094 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___11094, cs, m, dchan, dctr, done) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___11094, cs, m, dchan, dctr, done) {
          return function(state_11006) {
            var state_val_11007 = state_11006[1];
            if (state_val_11007 === 7) {
              var inst_11002 = state_11006[2];
              var state_11006__$1 = state_11006;
              var statearr_11008_11095 = state_11006__$1;
              statearr_11008_11095[2] = inst_11002;
              statearr_11008_11095[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11007 === 20) {
                var inst_10907 = state_11006[7];
                var inst_10917 = cljs.core.first.call(null, inst_10907);
                var inst_10918 = cljs.core.nth.call(null, inst_10917, 0, null);
                var inst_10919 = cljs.core.nth.call(null, inst_10917, 1, null);
                var state_11006__$1 = function() {
                  var statearr_11009 = state_11006;
                  statearr_11009[8] = inst_10918;
                  return statearr_11009;
                }();
                if (cljs.core.truth_(inst_10919)) {
                  var statearr_11010_11096 = state_11006__$1;
                  statearr_11010_11096[1] = 22;
                } else {
                  var statearr_11011_11097 = state_11006__$1;
                  statearr_11011_11097[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11007 === 27) {
                  var inst_10949 = state_11006[9];
                  var inst_10878 = state_11006[10];
                  var inst_10954 = state_11006[11];
                  var inst_10947 = state_11006[12];
                  var inst_10954__$1 = cljs.core._nth.call(null, inst_10947, inst_10949);
                  var inst_10955 = cljs.core.async.put_BANG_.call(null, inst_10954__$1, inst_10878, done);
                  var state_11006__$1 = function() {
                    var statearr_11012 = state_11006;
                    statearr_11012[11] = inst_10954__$1;
                    return statearr_11012;
                  }();
                  if (cljs.core.truth_(inst_10955)) {
                    var statearr_11013_11098 = state_11006__$1;
                    statearr_11013_11098[1] = 30;
                  } else {
                    var statearr_11014_11099 = state_11006__$1;
                    statearr_11014_11099[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11007 === 1) {
                    var state_11006__$1 = state_11006;
                    var statearr_11015_11100 = state_11006__$1;
                    statearr_11015_11100[2] = null;
                    statearr_11015_11100[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11007 === 24) {
                      var inst_10907 = state_11006[7];
                      var inst_10924 = state_11006[2];
                      var inst_10925 = cljs.core.next.call(null, inst_10907);
                      var inst_10887 = inst_10925;
                      var inst_10888 = null;
                      var inst_10889 = 0;
                      var inst_10890 = 0;
                      var state_11006__$1 = function() {
                        var statearr_11016 = state_11006;
                        statearr_11016[13] = inst_10890;
                        statearr_11016[14] = inst_10924;
                        statearr_11016[15] = inst_10888;
                        statearr_11016[16] = inst_10889;
                        statearr_11016[17] = inst_10887;
                        return statearr_11016;
                      }();
                      var statearr_11017_11101 = state_11006__$1;
                      statearr_11017_11101[2] = null;
                      statearr_11017_11101[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11007 === 39) {
                        var state_11006__$1 = state_11006;
                        var statearr_11021_11102 = state_11006__$1;
                        statearr_11021_11102[2] = null;
                        statearr_11021_11102[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11007 === 4) {
                          var inst_10878 = state_11006[10];
                          var inst_10878__$1 = state_11006[2];
                          var inst_10879 = inst_10878__$1 == null;
                          var state_11006__$1 = function() {
                            var statearr_11022 = state_11006;
                            statearr_11022[10] = inst_10878__$1;
                            return statearr_11022;
                          }();
                          if (cljs.core.truth_(inst_10879)) {
                            var statearr_11023_11103 = state_11006__$1;
                            statearr_11023_11103[1] = 5;
                          } else {
                            var statearr_11024_11104 = state_11006__$1;
                            statearr_11024_11104[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11007 === 15) {
                            var inst_10890 = state_11006[13];
                            var inst_10888 = state_11006[15];
                            var inst_10889 = state_11006[16];
                            var inst_10887 = state_11006[17];
                            var inst_10903 = state_11006[2];
                            var inst_10904 = inst_10890 + 1;
                            var tmp11018 = inst_10888;
                            var tmp11019 = inst_10889;
                            var tmp11020 = inst_10887;
                            var inst_10887__$1 = tmp11020;
                            var inst_10888__$1 = tmp11018;
                            var inst_10889__$1 = tmp11019;
                            var inst_10890__$1 = inst_10904;
                            var state_11006__$1 = function() {
                              var statearr_11025 = state_11006;
                              statearr_11025[13] = inst_10890__$1;
                              statearr_11025[18] = inst_10903;
                              statearr_11025[15] = inst_10888__$1;
                              statearr_11025[16] = inst_10889__$1;
                              statearr_11025[17] = inst_10887__$1;
                              return statearr_11025;
                            }();
                            var statearr_11026_11105 = state_11006__$1;
                            statearr_11026_11105[2] = null;
                            statearr_11026_11105[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11007 === 21) {
                              var inst_10928 = state_11006[2];
                              var state_11006__$1 = state_11006;
                              var statearr_11030_11106 = state_11006__$1;
                              statearr_11030_11106[2] = inst_10928;
                              statearr_11030_11106[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11007 === 31) {
                                var inst_10954 = state_11006[11];
                                var inst_10958 = done.call(null, null);
                                var inst_10959 = cljs.core.async.untap_STAR_.call(null, m, inst_10954);
                                var state_11006__$1 = function() {
                                  var statearr_11031 = state_11006;
                                  statearr_11031[19] = inst_10958;
                                  return statearr_11031;
                                }();
                                var statearr_11032_11107 = state_11006__$1;
                                statearr_11032_11107[2] = inst_10959;
                                statearr_11032_11107[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11007 === 32) {
                                  var inst_10949 = state_11006[9];
                                  var inst_10946 = state_11006[20];
                                  var inst_10948 = state_11006[21];
                                  var inst_10947 = state_11006[12];
                                  var inst_10961 = state_11006[2];
                                  var inst_10962 = inst_10949 + 1;
                                  var tmp11027 = inst_10946;
                                  var tmp11028 = inst_10948;
                                  var tmp11029 = inst_10947;
                                  var inst_10946__$1 = tmp11027;
                                  var inst_10947__$1 = tmp11029;
                                  var inst_10948__$1 = tmp11028;
                                  var inst_10949__$1 = inst_10962;
                                  var state_11006__$1 = function() {
                                    var statearr_11033 = state_11006;
                                    statearr_11033[22] = inst_10961;
                                    statearr_11033[9] = inst_10949__$1;
                                    statearr_11033[20] = inst_10946__$1;
                                    statearr_11033[21] = inst_10948__$1;
                                    statearr_11033[12] = inst_10947__$1;
                                    return statearr_11033;
                                  }();
                                  var statearr_11034_11108 = state_11006__$1;
                                  statearr_11034_11108[2] = null;
                                  statearr_11034_11108[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11007 === 40) {
                                    var inst_10974 = state_11006[23];
                                    var inst_10978 = done.call(null, null);
                                    var inst_10979 = cljs.core.async.untap_STAR_.call(null, m, inst_10974);
                                    var state_11006__$1 = function() {
                                      var statearr_11035 = state_11006;
                                      statearr_11035[24] = inst_10978;
                                      return statearr_11035;
                                    }();
                                    var statearr_11036_11109 = state_11006__$1;
                                    statearr_11036_11109[2] = inst_10979;
                                    statearr_11036_11109[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11007 === 33) {
                                      var inst_10965 = state_11006[25];
                                      var inst_10967 = cljs.core.chunked_seq_QMARK_.call(null, inst_10965);
                                      var state_11006__$1 = state_11006;
                                      if (inst_10967) {
                                        var statearr_11037_11110 = state_11006__$1;
                                        statearr_11037_11110[1] = 36;
                                      } else {
                                        var statearr_11038_11111 = state_11006__$1;
                                        statearr_11038_11111[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11007 === 13) {
                                        var inst_10897 = state_11006[26];
                                        var inst_10900 = cljs.core.async.close_BANG_.call(null, inst_10897);
                                        var state_11006__$1 = state_11006;
                                        var statearr_11039_11112 = state_11006__$1;
                                        statearr_11039_11112[2] = inst_10900;
                                        statearr_11039_11112[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11007 === 22) {
                                          var inst_10918 = state_11006[8];
                                          var inst_10921 = cljs.core.async.close_BANG_.call(null, inst_10918);
                                          var state_11006__$1 = state_11006;
                                          var statearr_11040_11113 = state_11006__$1;
                                          statearr_11040_11113[2] = inst_10921;
                                          statearr_11040_11113[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11007 === 36) {
                                            var inst_10965 = state_11006[25];
                                            var inst_10969 = cljs.core.chunk_first.call(null, inst_10965);
                                            var inst_10970 = cljs.core.chunk_rest.call(null, inst_10965);
                                            var inst_10971 = cljs.core.count.call(null, inst_10969);
                                            var inst_10946 = inst_10970;
                                            var inst_10947 = inst_10969;
                                            var inst_10948 = inst_10971;
                                            var inst_10949 = 0;
                                            var state_11006__$1 = function() {
                                              var statearr_11041 = state_11006;
                                              statearr_11041[9] = inst_10949;
                                              statearr_11041[20] = inst_10946;
                                              statearr_11041[21] = inst_10948;
                                              statearr_11041[12] = inst_10947;
                                              return statearr_11041;
                                            }();
                                            var statearr_11042_11114 = state_11006__$1;
                                            statearr_11042_11114[2] = null;
                                            statearr_11042_11114[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11007 === 41) {
                                              var inst_10965 = state_11006[25];
                                              var inst_10981 = state_11006[2];
                                              var inst_10982 = cljs.core.next.call(null, inst_10965);
                                              var inst_10946 = inst_10982;
                                              var inst_10947 = null;
                                              var inst_10948 = 0;
                                              var inst_10949 = 0;
                                              var state_11006__$1 = function() {
                                                var statearr_11043 = state_11006;
                                                statearr_11043[27] = inst_10981;
                                                statearr_11043[9] = inst_10949;
                                                statearr_11043[20] = inst_10946;
                                                statearr_11043[21] = inst_10948;
                                                statearr_11043[12] = inst_10947;
                                                return statearr_11043;
                                              }();
                                              var statearr_11044_11115 = state_11006__$1;
                                              statearr_11044_11115[2] = null;
                                              statearr_11044_11115[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11007 === 43) {
                                                var state_11006__$1 = state_11006;
                                                var statearr_11045_11116 = state_11006__$1;
                                                statearr_11045_11116[2] = null;
                                                statearr_11045_11116[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11007 === 29) {
                                                  var inst_10990 = state_11006[2];
                                                  var state_11006__$1 = state_11006;
                                                  var statearr_11046_11117 = state_11006__$1;
                                                  statearr_11046_11117[2] = inst_10990;
                                                  statearr_11046_11117[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11007 === 44) {
                                                    var inst_10999 = state_11006[2];
                                                    var state_11006__$1 = function() {
                                                      var statearr_11047 = state_11006;
                                                      statearr_11047[28] = inst_10999;
                                                      return statearr_11047;
                                                    }();
                                                    var statearr_11048_11118 = state_11006__$1;
                                                    statearr_11048_11118[2] = null;
                                                    statearr_11048_11118[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11007 === 6) {
                                                      var inst_10938 = state_11006[29];
                                                      var inst_10937 = cljs.core.deref.call(null, cs);
                                                      var inst_10938__$1 = cljs.core.keys.call(null, inst_10937);
                                                      var inst_10939 = cljs.core.count.call(null, inst_10938__$1);
                                                      var inst_10940 = cljs.core.reset_BANG_.call(null, dctr, inst_10939);
                                                      var inst_10945 = cljs.core.seq.call(null, inst_10938__$1);
                                                      var inst_10946 = inst_10945;
                                                      var inst_10947 = null;
                                                      var inst_10948 = 0;
                                                      var inst_10949 = 0;
                                                      var state_11006__$1 = function() {
                                                        var statearr_11049 = state_11006;
                                                        statearr_11049[30] = inst_10940;
                                                        statearr_11049[29] = inst_10938__$1;
                                                        statearr_11049[9] = inst_10949;
                                                        statearr_11049[20] = inst_10946;
                                                        statearr_11049[21] = inst_10948;
                                                        statearr_11049[12] = inst_10947;
                                                        return statearr_11049;
                                                      }();
                                                      var statearr_11050_11119 = state_11006__$1;
                                                      statearr_11050_11119[2] = null;
                                                      statearr_11050_11119[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11007 === 28) {
                                                        var inst_10946 = state_11006[20];
                                                        var inst_10965 = state_11006[25];
                                                        var inst_10965__$1 = cljs.core.seq.call(null, inst_10946);
                                                        var state_11006__$1 = function() {
                                                          var statearr_11051 = state_11006;
                                                          statearr_11051[25] = inst_10965__$1;
                                                          return statearr_11051;
                                                        }();
                                                        if (inst_10965__$1) {
                                                          var statearr_11052_11120 = state_11006__$1;
                                                          statearr_11052_11120[1] = 33;
                                                        } else {
                                                          var statearr_11053_11121 = state_11006__$1;
                                                          statearr_11053_11121[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11007 === 25) {
                                                          var inst_10949 = state_11006[9];
                                                          var inst_10948 = state_11006[21];
                                                          var inst_10951 = inst_10949 < inst_10948;
                                                          var inst_10952 = inst_10951;
                                                          var state_11006__$1 = state_11006;
                                                          if (cljs.core.truth_(inst_10952)) {
                                                            var statearr_11054_11122 = state_11006__$1;
                                                            statearr_11054_11122[1] = 27;
                                                          } else {
                                                            var statearr_11055_11123 = state_11006__$1;
                                                            statearr_11055_11123[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11007 === 34) {
                                                            var state_11006__$1 = state_11006;
                                                            var statearr_11056_11124 = state_11006__$1;
                                                            statearr_11056_11124[2] = null;
                                                            statearr_11056_11124[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11007 === 17) {
                                                              var state_11006__$1 = state_11006;
                                                              var statearr_11057_11125 = state_11006__$1;
                                                              statearr_11057_11125[2] = null;
                                                              statearr_11057_11125[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11007 === 3) {
                                                                var inst_11004 = state_11006[2];
                                                                var state_11006__$1 = state_11006;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11006__$1, inst_11004);
                                                              } else {
                                                                if (state_val_11007 === 12) {
                                                                  var inst_10933 = state_11006[2];
                                                                  var state_11006__$1 = state_11006;
                                                                  var statearr_11058_11126 = state_11006__$1;
                                                                  statearr_11058_11126[2] = inst_10933;
                                                                  statearr_11058_11126[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_11007 === 2) {
                                                                    var state_11006__$1 = state_11006;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11006__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_11007 === 23) {
                                                                      var state_11006__$1 = state_11006;
                                                                      var statearr_11059_11127 = state_11006__$1;
                                                                      statearr_11059_11127[2] = null;
                                                                      statearr_11059_11127[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_11007 === 35) {
                                                                        var inst_10988 = state_11006[2];
                                                                        var state_11006__$1 = state_11006;
                                                                        var statearr_11060_11128 = state_11006__$1;
                                                                        statearr_11060_11128[2] = inst_10988;
                                                                        statearr_11060_11128[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_11007 === 19) {
                                                                          var inst_10907 = state_11006[7];
                                                                          var inst_10911 = cljs.core.chunk_first.call(null, inst_10907);
                                                                          var inst_10912 = cljs.core.chunk_rest.call(null, inst_10907);
                                                                          var inst_10913 = cljs.core.count.call(null, inst_10911);
                                                                          var inst_10887 = inst_10912;
                                                                          var inst_10888 = inst_10911;
                                                                          var inst_10889 = inst_10913;
                                                                          var inst_10890 = 0;
                                                                          var state_11006__$1 = function() {
                                                                            var statearr_11061 = state_11006;
                                                                            statearr_11061[13] = inst_10890;
                                                                            statearr_11061[15] = inst_10888;
                                                                            statearr_11061[16] = inst_10889;
                                                                            statearr_11061[17] = inst_10887;
                                                                            return statearr_11061;
                                                                          }();
                                                                          var statearr_11062_11129 = state_11006__$1;
                                                                          statearr_11062_11129[2] = null;
                                                                          statearr_11062_11129[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_11007 === 11) {
                                                                            var inst_10907 = state_11006[7];
                                                                            var inst_10887 = state_11006[17];
                                                                            var inst_10907__$1 = cljs.core.seq.call(null, inst_10887);
                                                                            var state_11006__$1 = function() {
                                                                              var statearr_11063 = state_11006;
                                                                              statearr_11063[7] = inst_10907__$1;
                                                                              return statearr_11063;
                                                                            }();
                                                                            if (inst_10907__$1) {
                                                                              var statearr_11064_11130 = state_11006__$1;
                                                                              statearr_11064_11130[1] = 16;
                                                                            } else {
                                                                              var statearr_11065_11131 = state_11006__$1;
                                                                              statearr_11065_11131[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_11007 === 9) {
                                                                              var inst_10935 = state_11006[2];
                                                                              var state_11006__$1 = state_11006;
                                                                              var statearr_11066_11132 = state_11006__$1;
                                                                              statearr_11066_11132[2] = inst_10935;
                                                                              statearr_11066_11132[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_11007 === 5) {
                                                                                var inst_10885 = cljs.core.deref.call(null, cs);
                                                                                var inst_10886 = cljs.core.seq.call(null, inst_10885);
                                                                                var inst_10887 = inst_10886;
                                                                                var inst_10888 = null;
                                                                                var inst_10889 = 0;
                                                                                var inst_10890 = 0;
                                                                                var state_11006__$1 = function() {
                                                                                  var statearr_11067 = state_11006;
                                                                                  statearr_11067[13] = inst_10890;
                                                                                  statearr_11067[15] = inst_10888;
                                                                                  statearr_11067[16] = inst_10889;
                                                                                  statearr_11067[17] = inst_10887;
                                                                                  return statearr_11067;
                                                                                }();
                                                                                var statearr_11068_11133 = state_11006__$1;
                                                                                statearr_11068_11133[2] = null;
                                                                                statearr_11068_11133[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_11007 === 14) {
                                                                                  var state_11006__$1 = state_11006;
                                                                                  var statearr_11069_11134 = state_11006__$1;
                                                                                  statearr_11069_11134[2] = null;
                                                                                  statearr_11069_11134[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_11007 === 45) {
                                                                                    var inst_10996 = state_11006[2];
                                                                                    var state_11006__$1 = state_11006;
                                                                                    var statearr_11070_11135 = state_11006__$1;
                                                                                    statearr_11070_11135[2] = inst_10996;
                                                                                    statearr_11070_11135[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_11007 === 26) {
                                                                                      var inst_10938 = state_11006[29];
                                                                                      var inst_10992 = state_11006[2];
                                                                                      var inst_10993 = cljs.core.seq.call(null, inst_10938);
                                                                                      var state_11006__$1 = function() {
                                                                                        var statearr_11071 = state_11006;
                                                                                        statearr_11071[31] = inst_10992;
                                                                                        return statearr_11071;
                                                                                      }();
                                                                                      if (inst_10993) {
                                                                                        var statearr_11072_11136 = state_11006__$1;
                                                                                        statearr_11072_11136[1] = 42;
                                                                                      } else {
                                                                                        var statearr_11073_11137 = state_11006__$1;
                                                                                        statearr_11073_11137[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_11007 === 16) {
                                                                                        var inst_10907 = state_11006[7];
                                                                                        var inst_10909 = cljs.core.chunked_seq_QMARK_.call(null, inst_10907);
                                                                                        var state_11006__$1 = state_11006;
                                                                                        if (inst_10909) {
                                                                                          var statearr_11074_11138 = state_11006__$1;
                                                                                          statearr_11074_11138[1] = 19;
                                                                                        } else {
                                                                                          var statearr_11075_11139 = state_11006__$1;
                                                                                          statearr_11075_11139[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_11007 === 38) {
                                                                                          var inst_10985 = state_11006[2];
                                                                                          var state_11006__$1 = state_11006;
                                                                                          var statearr_11076_11140 = state_11006__$1;
                                                                                          statearr_11076_11140[2] = inst_10985;
                                                                                          statearr_11076_11140[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_11007 === 30) {
                                                                                            var state_11006__$1 = state_11006;
                                                                                            var statearr_11077_11141 = state_11006__$1;
                                                                                            statearr_11077_11141[2] = null;
                                                                                            statearr_11077_11141[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_11007 === 10) {
                                                                                              var inst_10890 = state_11006[13];
                                                                                              var inst_10888 = state_11006[15];
                                                                                              var inst_10896 = cljs.core._nth.call(null, inst_10888, inst_10890);
                                                                                              var inst_10897 = cljs.core.nth.call(null, inst_10896, 0, null);
                                                                                              var inst_10898 = cljs.core.nth.call(null, inst_10896, 1, null);
                                                                                              var state_11006__$1 = function() {
                                                                                                var statearr_11078 = state_11006;
                                                                                                statearr_11078[26] = inst_10897;
                                                                                                return statearr_11078;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_10898)) {
                                                                                                var statearr_11079_11142 = state_11006__$1;
                                                                                                statearr_11079_11142[1] = 13;
                                                                                              } else {
                                                                                                var statearr_11080_11143 = state_11006__$1;
                                                                                                statearr_11080_11143[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_11007 === 18) {
                                                                                                var inst_10931 = state_11006[2];
                                                                                                var state_11006__$1 = state_11006;
                                                                                                var statearr_11081_11144 = state_11006__$1;
                                                                                                statearr_11081_11144[2] = inst_10931;
                                                                                                statearr_11081_11144[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_11007 === 42) {
                                                                                                  var state_11006__$1 = state_11006;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11006__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_11007 === 37) {
                                                                                                    var inst_10878 = state_11006[10];
                                                                                                    var inst_10974 = state_11006[23];
                                                                                                    var inst_10965 = state_11006[25];
                                                                                                    var inst_10974__$1 = cljs.core.first.call(null, inst_10965);
                                                                                                    var inst_10975 = cljs.core.async.put_BANG_.call(null, inst_10974__$1, inst_10878, done);
                                                                                                    var state_11006__$1 = function() {
                                                                                                      var statearr_11082 = state_11006;
                                                                                                      statearr_11082[23] = inst_10974__$1;
                                                                                                      return statearr_11082;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_10975)) {
                                                                                                      var statearr_11083_11145 = state_11006__$1;
                                                                                                      statearr_11083_11145[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_11084_11146 = state_11006__$1;
                                                                                                      statearr_11084_11146[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_11007 === 8) {
                                                                                                      var inst_10890 = state_11006[13];
                                                                                                      var inst_10889 = state_11006[16];
                                                                                                      var inst_10892 = inst_10890 < inst_10889;
                                                                                                      var inst_10893 = inst_10892;
                                                                                                      var state_11006__$1 = state_11006;
                                                                                                      if (cljs.core.truth_(inst_10893)) {
                                                                                                        var statearr_11085_11147 = state_11006__$1;
                                                                                                        statearr_11085_11147[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_11086_11148 = state_11006__$1;
                                                                                                        statearr_11086_11148[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___11094, cs, m, dchan, dctr, done);
        return function(switch__7462__auto__, c__7524__auto___11094, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__7463__auto__ = null;
            var cljs$core$async$mult_$_state_machine__7463__auto____0 = function() {
              var statearr_11090 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11090[0] = cljs$core$async$mult_$_state_machine__7463__auto__;
              statearr_11090[1] = 1;
              return statearr_11090;
            };
            var cljs$core$async$mult_$_state_machine__7463__auto____1 = function(state_11006) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_11006);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e11091) {
                    if (e11091 instanceof Object) {
                      var ex__7466__auto__ = e11091;
                      var statearr_11092_11149 = state_11006;
                      statearr_11092_11149[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11006);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11091;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11150 = state_11006;
                  state_11006 = G__11150;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__7463__auto__ = function(state_11006) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__7463__auto____1.call(this, state_11006);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__7463__auto____0;
            cljs$core$async$mult_$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__7463__auto____1;
            return cljs$core$async$mult_$_state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___11094, cs, m, dchan, dctr, done);
      }();
      var state__7526__auto__ = function() {
        var statearr_11093 = f__7525__auto__.call(null);
        statearr_11093[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___11094;
        return statearr_11093;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___11094, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap() {
  var G__11152 = arguments.length;
  switch(G__11152) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj11155 = {};
  return obj11155;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4203__auto__ = m;
    if (and__4203__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4851__auto__ = m == null ? null : m;
    return function() {
      var or__4215__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_() {
  var argseq__5255__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5255__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__11160) {
  var map__11161 = p__11160;
  var map__11161__$1 = cljs.core.seq_QMARK_.call(null, map__11161) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11161) : map__11161;
  var opts = map__11161__$1;
  var statearr_11162_11165 = state;
  statearr_11162_11165[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4422__auto__ = cljs.core.async.do_alts.call(null, function(map__11161, map__11161__$1, opts) {
    return function(val) {
      var statearr_11163_11166 = state;
      statearr_11163_11166[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__11161, map__11161__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var cb = temp__4422__auto__;
    var statearr_11164_11167 = state;
    statearr_11164_11167[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq11156) {
  var G__11157 = cljs.core.first.call(null, seq11156);
  var seq11156__$1 = cljs.core.next.call(null, seq11156);
  var G__11158 = cljs.core.first.call(null, seq11156__$1);
  var seq11156__$2 = cljs.core.next.call(null, seq11156__$1);
  var G__11159 = cljs.core.first.call(null, seq11156__$2);
  var seq11156__$3 = cljs.core.next.call(null, seq11156__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11157, G__11158, G__11159, seq11156__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t11287 !== "undefined") {
    } else {
      cljs.core.async.t11287 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta11288) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta11288 = meta11288;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t11287.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11289, meta11288__$1) {
          var self__ = this;
          var _11289__$1 = this;
          return new cljs.core.async.t11287(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta11288__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11289) {
          var self__ = this;
          var _11289__$1 = this;
          return self__.meta11288;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11287.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t11287.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11287.cljs$lang$type = true;
      cljs.core.async.t11287.cljs$lang$ctorStr = "cljs.core.async/t11287";
      cljs.core.async.t11287.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
          return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t11287");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t11287 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t11287(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11288) {
          return new cljs.core.async.t11287(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11288);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t11287(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7524__auto___11406 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___11406, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___11406, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_11359) {
            var state_val_11360 = state_11359[1];
            if (state_val_11360 === 7) {
              var inst_11303 = state_11359[7];
              var inst_11308 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11303);
              var state_11359__$1 = state_11359;
              var statearr_11361_11407 = state_11359__$1;
              statearr_11361_11407[2] = inst_11308;
              statearr_11361_11407[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11360 === 20) {
                var inst_11318 = state_11359[8];
                var state_11359__$1 = state_11359;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11359__$1, 23, out, inst_11318);
              } else {
                if (state_val_11360 === 1) {
                  var inst_11293 = state_11359[9];
                  var inst_11293__$1 = calc_state.call(null);
                  var inst_11294 = cljs.core.seq_QMARK_.call(null, inst_11293__$1);
                  var state_11359__$1 = function() {
                    var statearr_11362 = state_11359;
                    statearr_11362[9] = inst_11293__$1;
                    return statearr_11362;
                  }();
                  if (inst_11294) {
                    var statearr_11363_11408 = state_11359__$1;
                    statearr_11363_11408[1] = 2;
                  } else {
                    var statearr_11364_11409 = state_11359__$1;
                    statearr_11364_11409[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11360 === 24) {
                    var inst_11311 = state_11359[10];
                    var inst_11303 = inst_11311;
                    var state_11359__$1 = function() {
                      var statearr_11365 = state_11359;
                      statearr_11365[7] = inst_11303;
                      return statearr_11365;
                    }();
                    var statearr_11366_11410 = state_11359__$1;
                    statearr_11366_11410[2] = null;
                    statearr_11366_11410[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11360 === 4) {
                      var inst_11293 = state_11359[9];
                      var inst_11299 = state_11359[2];
                      var inst_11300 = cljs.core.get.call(null, inst_11299, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_11301 = cljs.core.get.call(null, inst_11299, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_11302 = cljs.core.get.call(null, inst_11299, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_11303 = inst_11293;
                      var state_11359__$1 = function() {
                        var statearr_11367 = state_11359;
                        statearr_11367[11] = inst_11301;
                        statearr_11367[12] = inst_11302;
                        statearr_11367[7] = inst_11303;
                        statearr_11367[13] = inst_11300;
                        return statearr_11367;
                      }();
                      var statearr_11368_11411 = state_11359__$1;
                      statearr_11368_11411[2] = null;
                      statearr_11368_11411[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11360 === 15) {
                        var state_11359__$1 = state_11359;
                        var statearr_11369_11412 = state_11359__$1;
                        statearr_11369_11412[2] = null;
                        statearr_11369_11412[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11360 === 21) {
                          var inst_11311 = state_11359[10];
                          var inst_11303 = inst_11311;
                          var state_11359__$1 = function() {
                            var statearr_11370 = state_11359;
                            statearr_11370[7] = inst_11303;
                            return statearr_11370;
                          }();
                          var statearr_11371_11413 = state_11359__$1;
                          statearr_11371_11413[2] = null;
                          statearr_11371_11413[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11360 === 13) {
                            var inst_11355 = state_11359[2];
                            var state_11359__$1 = state_11359;
                            var statearr_11372_11414 = state_11359__$1;
                            statearr_11372_11414[2] = inst_11355;
                            statearr_11372_11414[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11360 === 22) {
                              var inst_11353 = state_11359[2];
                              var state_11359__$1 = state_11359;
                              var statearr_11373_11415 = state_11359__$1;
                              statearr_11373_11415[2] = inst_11353;
                              statearr_11373_11415[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11360 === 6) {
                                var inst_11357 = state_11359[2];
                                var state_11359__$1 = state_11359;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11359__$1, inst_11357);
                              } else {
                                if (state_val_11360 === 25) {
                                  var state_11359__$1 = state_11359;
                                  var statearr_11374_11416 = state_11359__$1;
                                  statearr_11374_11416[2] = null;
                                  statearr_11374_11416[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11360 === 17) {
                                    var inst_11333 = state_11359[14];
                                    var state_11359__$1 = state_11359;
                                    var statearr_11375_11417 = state_11359__$1;
                                    statearr_11375_11417[2] = inst_11333;
                                    statearr_11375_11417[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11360 === 3) {
                                      var inst_11293 = state_11359[9];
                                      var state_11359__$1 = state_11359;
                                      var statearr_11376_11418 = state_11359__$1;
                                      statearr_11376_11418[2] = inst_11293;
                                      statearr_11376_11418[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11360 === 12) {
                                        var inst_11333 = state_11359[14];
                                        var inst_11319 = state_11359[15];
                                        var inst_11312 = state_11359[16];
                                        var inst_11333__$1 = inst_11312.call(null, inst_11319);
                                        var state_11359__$1 = function() {
                                          var statearr_11377 = state_11359;
                                          statearr_11377[14] = inst_11333__$1;
                                          return statearr_11377;
                                        }();
                                        if (cljs.core.truth_(inst_11333__$1)) {
                                          var statearr_11378_11419 = state_11359__$1;
                                          statearr_11378_11419[1] = 17;
                                        } else {
                                          var statearr_11379_11420 = state_11359__$1;
                                          statearr_11379_11420[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11360 === 2) {
                                          var inst_11293 = state_11359[9];
                                          var inst_11296 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11293);
                                          var state_11359__$1 = state_11359;
                                          var statearr_11380_11421 = state_11359__$1;
                                          statearr_11380_11421[2] = inst_11296;
                                          statearr_11380_11421[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11360 === 23) {
                                            var inst_11344 = state_11359[2];
                                            var state_11359__$1 = state_11359;
                                            if (cljs.core.truth_(inst_11344)) {
                                              var statearr_11381_11422 = state_11359__$1;
                                              statearr_11381_11422[1] = 24;
                                            } else {
                                              var statearr_11382_11423 = state_11359__$1;
                                              statearr_11382_11423[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11360 === 19) {
                                              var inst_11341 = state_11359[2];
                                              var state_11359__$1 = state_11359;
                                              if (cljs.core.truth_(inst_11341)) {
                                                var statearr_11383_11424 = state_11359__$1;
                                                statearr_11383_11424[1] = 20;
                                              } else {
                                                var statearr_11384_11425 = state_11359__$1;
                                                statearr_11384_11425[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11360 === 11) {
                                                var inst_11318 = state_11359[8];
                                                var inst_11324 = inst_11318 == null;
                                                var state_11359__$1 = state_11359;
                                                if (cljs.core.truth_(inst_11324)) {
                                                  var statearr_11385_11426 = state_11359__$1;
                                                  statearr_11385_11426[1] = 14;
                                                } else {
                                                  var statearr_11386_11427 = state_11359__$1;
                                                  statearr_11386_11427[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11360 === 9) {
                                                  var inst_11311 = state_11359[10];
                                                  var inst_11311__$1 = state_11359[2];
                                                  var inst_11312 = cljs.core.get.call(null, inst_11311__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var inst_11313 = cljs.core.get.call(null, inst_11311__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_11314 = cljs.core.get.call(null, inst_11311__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var state_11359__$1 = function() {
                                                    var statearr_11387 = state_11359;
                                                    statearr_11387[16] = inst_11312;
                                                    statearr_11387[17] = inst_11313;
                                                    statearr_11387[10] = inst_11311__$1;
                                                    return statearr_11387;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_11359__$1, 10, inst_11314);
                                                } else {
                                                  if (state_val_11360 === 5) {
                                                    var inst_11303 = state_11359[7];
                                                    var inst_11306 = cljs.core.seq_QMARK_.call(null, inst_11303);
                                                    var state_11359__$1 = state_11359;
                                                    if (inst_11306) {
                                                      var statearr_11388_11428 = state_11359__$1;
                                                      statearr_11388_11428[1] = 7;
                                                    } else {
                                                      var statearr_11389_11429 = state_11359__$1;
                                                      statearr_11389_11429[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11360 === 14) {
                                                      var inst_11319 = state_11359[15];
                                                      var inst_11326 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_11319);
                                                      var state_11359__$1 = state_11359;
                                                      var statearr_11390_11430 = state_11359__$1;
                                                      statearr_11390_11430[2] = inst_11326;
                                                      statearr_11390_11430[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11360 === 26) {
                                                        var inst_11349 = state_11359[2];
                                                        var state_11359__$1 = state_11359;
                                                        var statearr_11391_11431 = state_11359__$1;
                                                        statearr_11391_11431[2] = inst_11349;
                                                        statearr_11391_11431[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11360 === 16) {
                                                          var inst_11329 = state_11359[2];
                                                          var inst_11330 = calc_state.call(null);
                                                          var inst_11303 = inst_11330;
                                                          var state_11359__$1 = function() {
                                                            var statearr_11392 = state_11359;
                                                            statearr_11392[7] = inst_11303;
                                                            statearr_11392[18] = inst_11329;
                                                            return statearr_11392;
                                                          }();
                                                          var statearr_11393_11432 = state_11359__$1;
                                                          statearr_11393_11432[2] = null;
                                                          statearr_11393_11432[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11360 === 10) {
                                                            var inst_11319 = state_11359[15];
                                                            var inst_11318 = state_11359[8];
                                                            var inst_11317 = state_11359[2];
                                                            var inst_11318__$1 = cljs.core.nth.call(null, inst_11317, 0, null);
                                                            var inst_11319__$1 = cljs.core.nth.call(null, inst_11317, 1, null);
                                                            var inst_11320 = inst_11318__$1 == null;
                                                            var inst_11321 = cljs.core._EQ_.call(null, inst_11319__$1, change);
                                                            var inst_11322 = inst_11320 || inst_11321;
                                                            var state_11359__$1 = function() {
                                                              var statearr_11394 = state_11359;
                                                              statearr_11394[15] = inst_11319__$1;
                                                              statearr_11394[8] = inst_11318__$1;
                                                              return statearr_11394;
                                                            }();
                                                            if (cljs.core.truth_(inst_11322)) {
                                                              var statearr_11395_11433 = state_11359__$1;
                                                              statearr_11395_11433[1] = 11;
                                                            } else {
                                                              var statearr_11396_11434 = state_11359__$1;
                                                              statearr_11396_11434[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11360 === 18) {
                                                              var inst_11319 = state_11359[15];
                                                              var inst_11312 = state_11359[16];
                                                              var inst_11313 = state_11359[17];
                                                              var inst_11336 = cljs.core.empty_QMARK_.call(null, inst_11312);
                                                              var inst_11337 = inst_11313.call(null, inst_11319);
                                                              var inst_11338 = cljs.core.not.call(null, inst_11337);
                                                              var inst_11339 = inst_11336 && inst_11338;
                                                              var state_11359__$1 = state_11359;
                                                              var statearr_11397_11435 = state_11359__$1;
                                                              statearr_11397_11435[2] = inst_11339;
                                                              statearr_11397_11435[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11360 === 8) {
                                                                var inst_11303 = state_11359[7];
                                                                var state_11359__$1 = state_11359;
                                                                var statearr_11398_11436 = state_11359__$1;
                                                                statearr_11398_11436[2] = inst_11303;
                                                                statearr_11398_11436[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___11406, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__7462__auto__, c__7524__auto___11406, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__7463__auto__ = null;
            var cljs$core$async$mix_$_state_machine__7463__auto____0 = function() {
              var statearr_11402 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11402[0] = cljs$core$async$mix_$_state_machine__7463__auto__;
              statearr_11402[1] = 1;
              return statearr_11402;
            };
            var cljs$core$async$mix_$_state_machine__7463__auto____1 = function(state_11359) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_11359);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e11403) {
                    if (e11403 instanceof Object) {
                      var ex__7466__auto__ = e11403;
                      var statearr_11404_11437 = state_11359;
                      statearr_11404_11437[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11359);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11403;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11438 = state_11359;
                  state_11359 = G__11438;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__7463__auto__ = function(state_11359) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__7463__auto____1.call(this, state_11359);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__7463__auto____0;
            cljs$core$async$mix_$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__7463__auto____1;
            return cljs$core$async$mix_$_state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___11406, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__7526__auto__ = function() {
        var statearr_11405 = f__7525__auto__.call(null);
        statearr_11405[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___11406;
        return statearr_11405;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___11406, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj11440 = {};
  return obj11440;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4203__auto__ = p;
    if (and__4203__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4851__auto__ = p == null ? null : p;
    return function() {
      var or__4215__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4203__auto__ = p;
    if (and__4203__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4851__auto__ = p == null ? null : p;
    return function() {
      var or__4215__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_() {
  var G__11442 = arguments.length;
  switch(G__11442) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (function() {
    var and__4203__auto__ = p;
    if (and__4203__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__4851__auto__ = p == null ? null : p;
    return function() {
      var or__4215__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (function() {
    var and__4203__auto__ = p;
    if (and__4203__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
    } else {
      return and__4203__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__4851__auto__ = p == null ? null : p;
    return function() {
      var or__4215__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4851__auto__)];
      if (or__4215__auto__) {
        return or__4215__auto__;
      } else {
        var or__4215__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4215__auto____$1) {
          return or__4215__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub() {
  var G__11446 = arguments.length;
  switch(G__11446) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4215__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4215__auto__)) {
        return or__4215__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4215__auto__, mults) {
          return function(p1__11444_SHARP_) {
            if (cljs.core.truth_(p1__11444_SHARP_.call(null, topic))) {
              return p1__11444_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__11444_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4215__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t11447 !== "undefined") {
    } else {
      cljs.core.async.t11447 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta11448) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta11448 = meta11448;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t11447.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_11449, meta11448__$1) {
          var self__ = this;
          var _11449__$1 = this;
          return new cljs.core.async.t11447(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta11448__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t11447.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_11449) {
          var self__ = this;
          var _11449__$1 = this;
          return self__.meta11448;
        };
      }(mults, ensure_mult);
      cljs.core.async.t11447.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11447.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t11447.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t11447.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t11447.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4422__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4422__auto__)) {
            var m = temp__4422__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t11447.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t11447.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t11447.cljs$lang$type = true;
      cljs.core.async.t11447.cljs$lang$ctorStr = "cljs.core.async/t11447";
      cljs.core.async.t11447.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
          return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t11447");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t11447 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t11447(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta11448) {
          return new cljs.core.async.t11447(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta11448);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t11447(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7524__auto___11570 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___11570, mults, ensure_mult, p) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___11570, mults, ensure_mult, p) {
          return function(state_11521) {
            var state_val_11522 = state_11521[1];
            if (state_val_11522 === 7) {
              var inst_11517 = state_11521[2];
              var state_11521__$1 = state_11521;
              var statearr_11523_11571 = state_11521__$1;
              statearr_11523_11571[2] = inst_11517;
              statearr_11523_11571[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11522 === 20) {
                var state_11521__$1 = state_11521;
                var statearr_11524_11572 = state_11521__$1;
                statearr_11524_11572[2] = null;
                statearr_11524_11572[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11522 === 1) {
                  var state_11521__$1 = state_11521;
                  var statearr_11525_11573 = state_11521__$1;
                  statearr_11525_11573[2] = null;
                  statearr_11525_11573[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11522 === 24) {
                    var inst_11500 = state_11521[7];
                    var inst_11509 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_11500);
                    var state_11521__$1 = state_11521;
                    var statearr_11526_11574 = state_11521__$1;
                    statearr_11526_11574[2] = inst_11509;
                    statearr_11526_11574[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11522 === 4) {
                      var inst_11452 = state_11521[8];
                      var inst_11452__$1 = state_11521[2];
                      var inst_11453 = inst_11452__$1 == null;
                      var state_11521__$1 = function() {
                        var statearr_11527 = state_11521;
                        statearr_11527[8] = inst_11452__$1;
                        return statearr_11527;
                      }();
                      if (cljs.core.truth_(inst_11453)) {
                        var statearr_11528_11575 = state_11521__$1;
                        statearr_11528_11575[1] = 5;
                      } else {
                        var statearr_11529_11576 = state_11521__$1;
                        statearr_11529_11576[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11522 === 15) {
                        var inst_11494 = state_11521[2];
                        var state_11521__$1 = state_11521;
                        var statearr_11530_11577 = state_11521__$1;
                        statearr_11530_11577[2] = inst_11494;
                        statearr_11530_11577[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11522 === 21) {
                          var inst_11514 = state_11521[2];
                          var state_11521__$1 = function() {
                            var statearr_11531 = state_11521;
                            statearr_11531[9] = inst_11514;
                            return statearr_11531;
                          }();
                          var statearr_11532_11578 = state_11521__$1;
                          statearr_11532_11578[2] = null;
                          statearr_11532_11578[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11522 === 13) {
                            var inst_11476 = state_11521[10];
                            var inst_11478 = cljs.core.chunked_seq_QMARK_.call(null, inst_11476);
                            var state_11521__$1 = state_11521;
                            if (inst_11478) {
                              var statearr_11533_11579 = state_11521__$1;
                              statearr_11533_11579[1] = 16;
                            } else {
                              var statearr_11534_11580 = state_11521__$1;
                              statearr_11534_11580[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11522 === 22) {
                              var inst_11506 = state_11521[2];
                              var state_11521__$1 = state_11521;
                              if (cljs.core.truth_(inst_11506)) {
                                var statearr_11535_11581 = state_11521__$1;
                                statearr_11535_11581[1] = 23;
                              } else {
                                var statearr_11536_11582 = state_11521__$1;
                                statearr_11536_11582[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11522 === 6) {
                                var inst_11502 = state_11521[11];
                                var inst_11452 = state_11521[8];
                                var inst_11500 = state_11521[7];
                                var inst_11500__$1 = topic_fn.call(null, inst_11452);
                                var inst_11501 = cljs.core.deref.call(null, mults);
                                var inst_11502__$1 = cljs.core.get.call(null, inst_11501, inst_11500__$1);
                                var state_11521__$1 = function() {
                                  var statearr_11537 = state_11521;
                                  statearr_11537[11] = inst_11502__$1;
                                  statearr_11537[7] = inst_11500__$1;
                                  return statearr_11537;
                                }();
                                if (cljs.core.truth_(inst_11502__$1)) {
                                  var statearr_11538_11583 = state_11521__$1;
                                  statearr_11538_11583[1] = 19;
                                } else {
                                  var statearr_11539_11584 = state_11521__$1;
                                  statearr_11539_11584[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11522 === 25) {
                                  var inst_11511 = state_11521[2];
                                  var state_11521__$1 = state_11521;
                                  var statearr_11540_11585 = state_11521__$1;
                                  statearr_11540_11585[2] = inst_11511;
                                  statearr_11540_11585[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11522 === 17) {
                                    var inst_11476 = state_11521[10];
                                    var inst_11485 = cljs.core.first.call(null, inst_11476);
                                    var inst_11486 = cljs.core.async.muxch_STAR_.call(null, inst_11485);
                                    var inst_11487 = cljs.core.async.close_BANG_.call(null, inst_11486);
                                    var inst_11488 = cljs.core.next.call(null, inst_11476);
                                    var inst_11462 = inst_11488;
                                    var inst_11463 = null;
                                    var inst_11464 = 0;
                                    var inst_11465 = 0;
                                    var state_11521__$1 = function() {
                                      var statearr_11541 = state_11521;
                                      statearr_11541[12] = inst_11462;
                                      statearr_11541[13] = inst_11487;
                                      statearr_11541[14] = inst_11464;
                                      statearr_11541[15] = inst_11465;
                                      statearr_11541[16] = inst_11463;
                                      return statearr_11541;
                                    }();
                                    var statearr_11542_11586 = state_11521__$1;
                                    statearr_11542_11586[2] = null;
                                    statearr_11542_11586[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11522 === 3) {
                                      var inst_11519 = state_11521[2];
                                      var state_11521__$1 = state_11521;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11521__$1, inst_11519);
                                    } else {
                                      if (state_val_11522 === 12) {
                                        var inst_11496 = state_11521[2];
                                        var state_11521__$1 = state_11521;
                                        var statearr_11543_11587 = state_11521__$1;
                                        statearr_11543_11587[2] = inst_11496;
                                        statearr_11543_11587[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11522 === 2) {
                                          var state_11521__$1 = state_11521;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11521__$1, 4, ch);
                                        } else {
                                          if (state_val_11522 === 23) {
                                            var state_11521__$1 = state_11521;
                                            var statearr_11544_11588 = state_11521__$1;
                                            statearr_11544_11588[2] = null;
                                            statearr_11544_11588[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11522 === 19) {
                                              var inst_11502 = state_11521[11];
                                              var inst_11452 = state_11521[8];
                                              var inst_11504 = cljs.core.async.muxch_STAR_.call(null, inst_11502);
                                              var state_11521__$1 = state_11521;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11521__$1, 22, inst_11504, inst_11452);
                                            } else {
                                              if (state_val_11522 === 11) {
                                                var inst_11462 = state_11521[12];
                                                var inst_11476 = state_11521[10];
                                                var inst_11476__$1 = cljs.core.seq.call(null, inst_11462);
                                                var state_11521__$1 = function() {
                                                  var statearr_11545 = state_11521;
                                                  statearr_11545[10] = inst_11476__$1;
                                                  return statearr_11545;
                                                }();
                                                if (inst_11476__$1) {
                                                  var statearr_11546_11589 = state_11521__$1;
                                                  statearr_11546_11589[1] = 13;
                                                } else {
                                                  var statearr_11547_11590 = state_11521__$1;
                                                  statearr_11547_11590[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11522 === 9) {
                                                  var inst_11498 = state_11521[2];
                                                  var state_11521__$1 = state_11521;
                                                  var statearr_11548_11591 = state_11521__$1;
                                                  statearr_11548_11591[2] = inst_11498;
                                                  statearr_11548_11591[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11522 === 5) {
                                                    var inst_11459 = cljs.core.deref.call(null, mults);
                                                    var inst_11460 = cljs.core.vals.call(null, inst_11459);
                                                    var inst_11461 = cljs.core.seq.call(null, inst_11460);
                                                    var inst_11462 = inst_11461;
                                                    var inst_11463 = null;
                                                    var inst_11464 = 0;
                                                    var inst_11465 = 0;
                                                    var state_11521__$1 = function() {
                                                      var statearr_11549 = state_11521;
                                                      statearr_11549[12] = inst_11462;
                                                      statearr_11549[14] = inst_11464;
                                                      statearr_11549[15] = inst_11465;
                                                      statearr_11549[16] = inst_11463;
                                                      return statearr_11549;
                                                    }();
                                                    var statearr_11550_11592 = state_11521__$1;
                                                    statearr_11550_11592[2] = null;
                                                    statearr_11550_11592[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11522 === 14) {
                                                      var state_11521__$1 = state_11521;
                                                      var statearr_11554_11593 = state_11521__$1;
                                                      statearr_11554_11593[2] = null;
                                                      statearr_11554_11593[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11522 === 16) {
                                                        var inst_11476 = state_11521[10];
                                                        var inst_11480 = cljs.core.chunk_first.call(null, inst_11476);
                                                        var inst_11481 = cljs.core.chunk_rest.call(null, inst_11476);
                                                        var inst_11482 = cljs.core.count.call(null, inst_11480);
                                                        var inst_11462 = inst_11481;
                                                        var inst_11463 = inst_11480;
                                                        var inst_11464 = inst_11482;
                                                        var inst_11465 = 0;
                                                        var state_11521__$1 = function() {
                                                          var statearr_11555 = state_11521;
                                                          statearr_11555[12] = inst_11462;
                                                          statearr_11555[14] = inst_11464;
                                                          statearr_11555[15] = inst_11465;
                                                          statearr_11555[16] = inst_11463;
                                                          return statearr_11555;
                                                        }();
                                                        var statearr_11556_11594 = state_11521__$1;
                                                        statearr_11556_11594[2] = null;
                                                        statearr_11556_11594[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11522 === 10) {
                                                          var inst_11462 = state_11521[12];
                                                          var inst_11464 = state_11521[14];
                                                          var inst_11465 = state_11521[15];
                                                          var inst_11463 = state_11521[16];
                                                          var inst_11470 = cljs.core._nth.call(null, inst_11463, inst_11465);
                                                          var inst_11471 = cljs.core.async.muxch_STAR_.call(null, inst_11470);
                                                          var inst_11472 = cljs.core.async.close_BANG_.call(null, inst_11471);
                                                          var inst_11473 = inst_11465 + 1;
                                                          var tmp11551 = inst_11462;
                                                          var tmp11552 = inst_11464;
                                                          var tmp11553 = inst_11463;
                                                          var inst_11462__$1 = tmp11551;
                                                          var inst_11463__$1 = tmp11553;
                                                          var inst_11464__$1 = tmp11552;
                                                          var inst_11465__$1 = inst_11473;
                                                          var state_11521__$1 = function() {
                                                            var statearr_11557 = state_11521;
                                                            statearr_11557[12] = inst_11462__$1;
                                                            statearr_11557[17] = inst_11472;
                                                            statearr_11557[14] = inst_11464__$1;
                                                            statearr_11557[15] = inst_11465__$1;
                                                            statearr_11557[16] = inst_11463__$1;
                                                            return statearr_11557;
                                                          }();
                                                          var statearr_11558_11595 = state_11521__$1;
                                                          statearr_11558_11595[2] = null;
                                                          statearr_11558_11595[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11522 === 18) {
                                                            var inst_11491 = state_11521[2];
                                                            var state_11521__$1 = state_11521;
                                                            var statearr_11559_11596 = state_11521__$1;
                                                            statearr_11559_11596[2] = inst_11491;
                                                            statearr_11559_11596[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11522 === 8) {
                                                              var inst_11464 = state_11521[14];
                                                              var inst_11465 = state_11521[15];
                                                              var inst_11467 = inst_11465 < inst_11464;
                                                              var inst_11468 = inst_11467;
                                                              var state_11521__$1 = state_11521;
                                                              if (cljs.core.truth_(inst_11468)) {
                                                                var statearr_11560_11597 = state_11521__$1;
                                                                statearr_11560_11597[1] = 10;
                                                              } else {
                                                                var statearr_11561_11598 = state_11521__$1;
                                                                statearr_11561_11598[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___11570, mults, ensure_mult, p);
        return function(switch__7462__auto__, c__7524__auto___11570, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_11565 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11565[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_11565[1] = 1;
              return statearr_11565;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_11521) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_11521);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e11566) {
                    if (e11566 instanceof Object) {
                      var ex__7466__auto__ = e11566;
                      var statearr_11567_11599 = state_11521;
                      statearr_11567_11599[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11521);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11566;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11600 = state_11521;
                  state_11521 = G__11600;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_11521) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_11521);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___11570, mults, ensure_mult, p);
      }();
      var state__7526__auto__ = function() {
        var statearr_11568 = f__7525__auto__.call(null);
        statearr_11568[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___11570;
        return statearr_11568;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___11570, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub() {
  var G__11602 = arguments.length;
  switch(G__11602) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all() {
  var G__11605 = arguments.length;
  switch(G__11605) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map() {
  var G__11608 = arguments.length;
  switch(G__11608) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__7524__auto___11678 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___11678, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___11678, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_11647) {
            var state_val_11648 = state_11647[1];
            if (state_val_11648 === 7) {
              var state_11647__$1 = state_11647;
              var statearr_11649_11679 = state_11647__$1;
              statearr_11649_11679[2] = null;
              statearr_11649_11679[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11648 === 1) {
                var state_11647__$1 = state_11647;
                var statearr_11650_11680 = state_11647__$1;
                statearr_11650_11680[2] = null;
                statearr_11650_11680[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11648 === 4) {
                  var inst_11611 = state_11647[7];
                  var inst_11613 = inst_11611 < cnt;
                  var state_11647__$1 = state_11647;
                  if (cljs.core.truth_(inst_11613)) {
                    var statearr_11651_11681 = state_11647__$1;
                    statearr_11651_11681[1] = 6;
                  } else {
                    var statearr_11652_11682 = state_11647__$1;
                    statearr_11652_11682[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11648 === 15) {
                    var inst_11643 = state_11647[2];
                    var state_11647__$1 = state_11647;
                    var statearr_11653_11683 = state_11647__$1;
                    statearr_11653_11683[2] = inst_11643;
                    statearr_11653_11683[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11648 === 13) {
                      var inst_11636 = cljs.core.async.close_BANG_.call(null, out);
                      var state_11647__$1 = state_11647;
                      var statearr_11654_11684 = state_11647__$1;
                      statearr_11654_11684[2] = inst_11636;
                      statearr_11654_11684[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11648 === 6) {
                        var state_11647__$1 = state_11647;
                        var statearr_11655_11685 = state_11647__$1;
                        statearr_11655_11685[2] = null;
                        statearr_11655_11685[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11648 === 3) {
                          var inst_11645 = state_11647[2];
                          var state_11647__$1 = state_11647;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11647__$1, inst_11645);
                        } else {
                          if (state_val_11648 === 12) {
                            var inst_11633 = state_11647[8];
                            var inst_11633__$1 = state_11647[2];
                            var inst_11634 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_11633__$1);
                            var state_11647__$1 = function() {
                              var statearr_11656 = state_11647;
                              statearr_11656[8] = inst_11633__$1;
                              return statearr_11656;
                            }();
                            if (cljs.core.truth_(inst_11634)) {
                              var statearr_11657_11686 = state_11647__$1;
                              statearr_11657_11686[1] = 13;
                            } else {
                              var statearr_11658_11687 = state_11647__$1;
                              statearr_11658_11687[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11648 === 2) {
                              var inst_11610 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_11611 = 0;
                              var state_11647__$1 = function() {
                                var statearr_11659 = state_11647;
                                statearr_11659[7] = inst_11611;
                                statearr_11659[9] = inst_11610;
                                return statearr_11659;
                              }();
                              var statearr_11660_11688 = state_11647__$1;
                              statearr_11660_11688[2] = null;
                              statearr_11660_11688[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11648 === 11) {
                                var inst_11611 = state_11647[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_11647, 10, Object, null, 9);
                                var inst_11620 = chs__$1.call(null, inst_11611);
                                var inst_11621 = done.call(null, inst_11611);
                                var inst_11622 = cljs.core.async.take_BANG_.call(null, inst_11620, inst_11621);
                                var state_11647__$1 = state_11647;
                                var statearr_11661_11689 = state_11647__$1;
                                statearr_11661_11689[2] = inst_11622;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11647__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11648 === 9) {
                                  var inst_11611 = state_11647[7];
                                  var inst_11624 = state_11647[2];
                                  var inst_11625 = inst_11611 + 1;
                                  var inst_11611__$1 = inst_11625;
                                  var state_11647__$1 = function() {
                                    var statearr_11662 = state_11647;
                                    statearr_11662[7] = inst_11611__$1;
                                    statearr_11662[10] = inst_11624;
                                    return statearr_11662;
                                  }();
                                  var statearr_11663_11690 = state_11647__$1;
                                  statearr_11663_11690[2] = null;
                                  statearr_11663_11690[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11648 === 5) {
                                    var inst_11631 = state_11647[2];
                                    var state_11647__$1 = function() {
                                      var statearr_11664 = state_11647;
                                      statearr_11664[11] = inst_11631;
                                      return statearr_11664;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11647__$1, 12, dchan);
                                  } else {
                                    if (state_val_11648 === 14) {
                                      var inst_11633 = state_11647[8];
                                      var inst_11638 = cljs.core.apply.call(null, f, inst_11633);
                                      var state_11647__$1 = state_11647;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11647__$1, 16, out, inst_11638);
                                    } else {
                                      if (state_val_11648 === 16) {
                                        var inst_11640 = state_11647[2];
                                        var state_11647__$1 = function() {
                                          var statearr_11665 = state_11647;
                                          statearr_11665[12] = inst_11640;
                                          return statearr_11665;
                                        }();
                                        var statearr_11666_11691 = state_11647__$1;
                                        statearr_11666_11691[2] = null;
                                        statearr_11666_11691[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11648 === 10) {
                                          var inst_11615 = state_11647[2];
                                          var inst_11616 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_11647__$1 = function() {
                                            var statearr_11667 = state_11647;
                                            statearr_11667[13] = inst_11615;
                                            return statearr_11667;
                                          }();
                                          var statearr_11668_11692 = state_11647__$1;
                                          statearr_11668_11692[2] = inst_11616;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11647__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11648 === 8) {
                                            var inst_11629 = state_11647[2];
                                            var state_11647__$1 = state_11647;
                                            var statearr_11669_11693 = state_11647__$1;
                                            statearr_11669_11693[2] = inst_11629;
                                            statearr_11669_11693[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___11678, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__7462__auto__, c__7524__auto___11678, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_11673 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11673[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_11673[1] = 1;
              return statearr_11673;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_11647) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_11647);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e11674) {
                    if (e11674 instanceof Object) {
                      var ex__7466__auto__ = e11674;
                      var statearr_11675_11694 = state_11647;
                      statearr_11675_11694[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11647);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11674;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11695 = state_11647;
                  state_11647 = G__11695;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_11647) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_11647);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___11678, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__7526__auto__ = function() {
        var statearr_11676 = f__7525__auto__.call(null);
        statearr_11676[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___11678;
        return statearr_11676;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___11678, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge() {
  var G__11698 = arguments.length;
  switch(G__11698) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7524__auto___11753 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___11753, out) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___11753, out) {
          return function(state_11728) {
            var state_val_11729 = state_11728[1];
            if (state_val_11729 === 7) {
              var inst_11708 = state_11728[7];
              var inst_11707 = state_11728[8];
              var inst_11707__$1 = state_11728[2];
              var inst_11708__$1 = cljs.core.nth.call(null, inst_11707__$1, 0, null);
              var inst_11709 = cljs.core.nth.call(null, inst_11707__$1, 1, null);
              var inst_11710 = inst_11708__$1 == null;
              var state_11728__$1 = function() {
                var statearr_11730 = state_11728;
                statearr_11730[9] = inst_11709;
                statearr_11730[7] = inst_11708__$1;
                statearr_11730[8] = inst_11707__$1;
                return statearr_11730;
              }();
              if (cljs.core.truth_(inst_11710)) {
                var statearr_11731_11754 = state_11728__$1;
                statearr_11731_11754[1] = 8;
              } else {
                var statearr_11732_11755 = state_11728__$1;
                statearr_11732_11755[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11729 === 1) {
                var inst_11699 = cljs.core.vec.call(null, chs);
                var inst_11700 = inst_11699;
                var state_11728__$1 = function() {
                  var statearr_11733 = state_11728;
                  statearr_11733[10] = inst_11700;
                  return statearr_11733;
                }();
                var statearr_11734_11756 = state_11728__$1;
                statearr_11734_11756[2] = null;
                statearr_11734_11756[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11729 === 4) {
                  var inst_11700 = state_11728[10];
                  var state_11728__$1 = state_11728;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_11728__$1, 7, inst_11700);
                } else {
                  if (state_val_11729 === 6) {
                    var inst_11724 = state_11728[2];
                    var state_11728__$1 = state_11728;
                    var statearr_11735_11757 = state_11728__$1;
                    statearr_11735_11757[2] = inst_11724;
                    statearr_11735_11757[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11729 === 3) {
                      var inst_11726 = state_11728[2];
                      var state_11728__$1 = state_11728;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11728__$1, inst_11726);
                    } else {
                      if (state_val_11729 === 2) {
                        var inst_11700 = state_11728[10];
                        var inst_11702 = cljs.core.count.call(null, inst_11700);
                        var inst_11703 = inst_11702 > 0;
                        var state_11728__$1 = state_11728;
                        if (cljs.core.truth_(inst_11703)) {
                          var statearr_11737_11758 = state_11728__$1;
                          statearr_11737_11758[1] = 4;
                        } else {
                          var statearr_11738_11759 = state_11728__$1;
                          statearr_11738_11759[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11729 === 11) {
                          var inst_11700 = state_11728[10];
                          var inst_11717 = state_11728[2];
                          var tmp11736 = inst_11700;
                          var inst_11700__$1 = tmp11736;
                          var state_11728__$1 = function() {
                            var statearr_11739 = state_11728;
                            statearr_11739[10] = inst_11700__$1;
                            statearr_11739[11] = inst_11717;
                            return statearr_11739;
                          }();
                          var statearr_11740_11760 = state_11728__$1;
                          statearr_11740_11760[2] = null;
                          statearr_11740_11760[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11729 === 9) {
                            var inst_11708 = state_11728[7];
                            var state_11728__$1 = state_11728;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11728__$1, 11, out, inst_11708);
                          } else {
                            if (state_val_11729 === 5) {
                              var inst_11722 = cljs.core.async.close_BANG_.call(null, out);
                              var state_11728__$1 = state_11728;
                              var statearr_11741_11761 = state_11728__$1;
                              statearr_11741_11761[2] = inst_11722;
                              statearr_11741_11761[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11729 === 10) {
                                var inst_11720 = state_11728[2];
                                var state_11728__$1 = state_11728;
                                var statearr_11742_11762 = state_11728__$1;
                                statearr_11742_11762[2] = inst_11720;
                                statearr_11742_11762[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11729 === 8) {
                                  var inst_11709 = state_11728[9];
                                  var inst_11700 = state_11728[10];
                                  var inst_11708 = state_11728[7];
                                  var inst_11707 = state_11728[8];
                                  var inst_11712 = function() {
                                    var cs = inst_11700;
                                    var vec__11705 = inst_11707;
                                    var v = inst_11708;
                                    var c = inst_11709;
                                    return function(cs, vec__11705, v, c, inst_11709, inst_11700, inst_11708, inst_11707, state_val_11729, c__7524__auto___11753, out) {
                                      return function(p1__11696_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__11696_SHARP_);
                                      };
                                    }(cs, vec__11705, v, c, inst_11709, inst_11700, inst_11708, inst_11707, state_val_11729, c__7524__auto___11753, out);
                                  }();
                                  var inst_11713 = cljs.core.filterv.call(null, inst_11712, inst_11700);
                                  var inst_11700__$1 = inst_11713;
                                  var state_11728__$1 = function() {
                                    var statearr_11743 = state_11728;
                                    statearr_11743[10] = inst_11700__$1;
                                    return statearr_11743;
                                  }();
                                  var statearr_11744_11763 = state_11728__$1;
                                  statearr_11744_11763[2] = null;
                                  statearr_11744_11763[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___11753, out);
        return function(switch__7462__auto__, c__7524__auto___11753, out) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_11748 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11748[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_11748[1] = 1;
              return statearr_11748;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_11728) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_11728);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e11749) {
                    if (e11749 instanceof Object) {
                      var ex__7466__auto__ = e11749;
                      var statearr_11750_11764 = state_11728;
                      statearr_11750_11764[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11728);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11749;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11765 = state_11728;
                  state_11728 = G__11765;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_11728) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_11728);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___11753, out);
      }();
      var state__7526__auto__ = function() {
        var statearr_11751 = f__7525__auto__.call(null);
        statearr_11751[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___11753;
        return statearr_11751;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___11753, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take() {
  var G__11767 = arguments.length;
  switch(G__11767) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7524__auto___11815 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___11815, out) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___11815, out) {
          return function(state_11791) {
            var state_val_11792 = state_11791[1];
            if (state_val_11792 === 7) {
              var inst_11773 = state_11791[7];
              var inst_11773__$1 = state_11791[2];
              var inst_11774 = inst_11773__$1 == null;
              var inst_11775 = cljs.core.not.call(null, inst_11774);
              var state_11791__$1 = function() {
                var statearr_11793 = state_11791;
                statearr_11793[7] = inst_11773__$1;
                return statearr_11793;
              }();
              if (inst_11775) {
                var statearr_11794_11816 = state_11791__$1;
                statearr_11794_11816[1] = 8;
              } else {
                var statearr_11795_11817 = state_11791__$1;
                statearr_11795_11817[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11792 === 1) {
                var inst_11768 = 0;
                var state_11791__$1 = function() {
                  var statearr_11796 = state_11791;
                  statearr_11796[8] = inst_11768;
                  return statearr_11796;
                }();
                var statearr_11797_11818 = state_11791__$1;
                statearr_11797_11818[2] = null;
                statearr_11797_11818[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11792 === 4) {
                  var state_11791__$1 = state_11791;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11791__$1, 7, ch);
                } else {
                  if (state_val_11792 === 6) {
                    var inst_11786 = state_11791[2];
                    var state_11791__$1 = state_11791;
                    var statearr_11798_11819 = state_11791__$1;
                    statearr_11798_11819[2] = inst_11786;
                    statearr_11798_11819[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11792 === 3) {
                      var inst_11788 = state_11791[2];
                      var inst_11789 = cljs.core.async.close_BANG_.call(null, out);
                      var state_11791__$1 = function() {
                        var statearr_11799 = state_11791;
                        statearr_11799[9] = inst_11788;
                        return statearr_11799;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11791__$1, inst_11789);
                    } else {
                      if (state_val_11792 === 2) {
                        var inst_11768 = state_11791[8];
                        var inst_11770 = inst_11768 < n;
                        var state_11791__$1 = state_11791;
                        if (cljs.core.truth_(inst_11770)) {
                          var statearr_11800_11820 = state_11791__$1;
                          statearr_11800_11820[1] = 4;
                        } else {
                          var statearr_11801_11821 = state_11791__$1;
                          statearr_11801_11821[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11792 === 11) {
                          var inst_11768 = state_11791[8];
                          var inst_11778 = state_11791[2];
                          var inst_11779 = inst_11768 + 1;
                          var inst_11768__$1 = inst_11779;
                          var state_11791__$1 = function() {
                            var statearr_11802 = state_11791;
                            statearr_11802[8] = inst_11768__$1;
                            statearr_11802[10] = inst_11778;
                            return statearr_11802;
                          }();
                          var statearr_11803_11822 = state_11791__$1;
                          statearr_11803_11822[2] = null;
                          statearr_11803_11822[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11792 === 9) {
                            var state_11791__$1 = state_11791;
                            var statearr_11804_11823 = state_11791__$1;
                            statearr_11804_11823[2] = null;
                            statearr_11804_11823[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11792 === 5) {
                              var state_11791__$1 = state_11791;
                              var statearr_11805_11824 = state_11791__$1;
                              statearr_11805_11824[2] = null;
                              statearr_11805_11824[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11792 === 10) {
                                var inst_11783 = state_11791[2];
                                var state_11791__$1 = state_11791;
                                var statearr_11806_11825 = state_11791__$1;
                                statearr_11806_11825[2] = inst_11783;
                                statearr_11806_11825[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11792 === 8) {
                                  var inst_11773 = state_11791[7];
                                  var state_11791__$1 = state_11791;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11791__$1, 11, out, inst_11773);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___11815, out);
        return function(switch__7462__auto__, c__7524__auto___11815, out) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_11810 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11810[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_11810[1] = 1;
              return statearr_11810;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_11791) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_11791);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e11811) {
                    if (e11811 instanceof Object) {
                      var ex__7466__auto__ = e11811;
                      var statearr_11812_11826 = state_11791;
                      statearr_11812_11826[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11791);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11811;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11827 = state_11791;
                  state_11791 = G__11827;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_11791) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_11791);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___11815, out);
      }();
      var state__7526__auto__ = function() {
        var statearr_11813 = f__7525__auto__.call(null);
        statearr_11813[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___11815;
        return statearr_11813;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___11815, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t11835 !== "undefined") {
  } else {
    cljs.core.async.t11835 = function(map_LT_, f, ch, meta11836) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta11836 = meta11836;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t11835.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11837, meta11836__$1) {
      var self__ = this;
      var _11837__$1 = this;
      return new cljs.core.async.t11835(self__.map_LT_, self__.f, self__.ch, meta11836__$1);
    };
    cljs.core.async.t11835.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11837) {
      var self__ = this;
      var _11837__$1 = this;
      return self__.meta11836;
    };
    cljs.core.async.t11835.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t11835.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t11835.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t11835.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t11835.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t11838 !== "undefined") {
        } else {
          cljs.core.async.t11838 = function(map_LT_, f, ch, meta11836, _, fn1, meta11839) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta11836 = meta11836;
            this._ = _;
            this.fn1 = fn1;
            this.meta11839 = meta11839;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t11838.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_11840, meta11839__$1) {
              var self__ = this;
              var _11840__$1 = this;
              return new cljs.core.async.t11838(self__.map_LT_, self__.f, self__.ch, self__.meta11836, self__._, self__.fn1, meta11839__$1);
            };
          }(___$1);
          cljs.core.async.t11838.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_11840) {
              var self__ = this;
              var _11840__$1 = this;
              return self__.meta11839;
            };
          }(___$1);
          cljs.core.async.t11838.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t11838.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t11838.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__11828_SHARP_) {
                  return f1.call(null, p1__11828_SHARP_ == null ? null : self__.f.call(null, p1__11828_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t11838.cljs$lang$type = true;
          cljs.core.async.t11838.cljs$lang$ctorStr = "cljs.core.async/t11838";
          cljs.core.async.t11838.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
              return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t11838");
            };
          }(___$1);
          cljs.core.async.__GT_t11838 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t11838(map_LT___$1, f__$1, ch__$1, meta11836__$1, ___$2, fn1__$1, meta11839) {
              return new cljs.core.async.t11838(map_LT___$1, f__$1, ch__$1, meta11836__$1, ___$2, fn1__$1, meta11839);
            };
          }(___$1);
        }
        return new cljs.core.async.t11838(self__.map_LT_, self__.f, self__.ch, self__.meta11836, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4203__auto__ = ret;
        if (cljs.core.truth_(and__4203__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4203__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t11835.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t11835.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t11835.cljs$lang$type = true;
    cljs.core.async.t11835.cljs$lang$ctorStr = "cljs.core.async/t11835";
    cljs.core.async.t11835.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t11835");
    };
    cljs.core.async.__GT_t11835 = function cljs$core$async$map_LT__$___GT_t11835(map_LT___$1, f__$1, ch__$1, meta11836) {
      return new cljs.core.async.t11835(map_LT___$1, f__$1, ch__$1, meta11836);
    };
  }
  return new cljs.core.async.t11835(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t11844 !== "undefined") {
  } else {
    cljs.core.async.t11844 = function(map_GT_, f, ch, meta11845) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta11845 = meta11845;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t11844.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11846, meta11845__$1) {
      var self__ = this;
      var _11846__$1 = this;
      return new cljs.core.async.t11844(self__.map_GT_, self__.f, self__.ch, meta11845__$1);
    };
    cljs.core.async.t11844.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11846) {
      var self__ = this;
      var _11846__$1 = this;
      return self__.meta11845;
    };
    cljs.core.async.t11844.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t11844.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t11844.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t11844.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t11844.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t11844.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t11844.cljs$lang$type = true;
    cljs.core.async.t11844.cljs$lang$ctorStr = "cljs.core.async/t11844";
    cljs.core.async.t11844.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t11844");
    };
    cljs.core.async.__GT_t11844 = function cljs$core$async$map_GT__$___GT_t11844(map_GT___$1, f__$1, ch__$1, meta11845) {
      return new cljs.core.async.t11844(map_GT___$1, f__$1, ch__$1, meta11845);
    };
  }
  return new cljs.core.async.t11844(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t11850 !== "undefined") {
  } else {
    cljs.core.async.t11850 = function(filter_GT_, p, ch, meta11851) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta11851 = meta11851;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t11850.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11852, meta11851__$1) {
      var self__ = this;
      var _11852__$1 = this;
      return new cljs.core.async.t11850(self__.filter_GT_, self__.p, self__.ch, meta11851__$1);
    };
    cljs.core.async.t11850.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11852) {
      var self__ = this;
      var _11852__$1 = this;
      return self__.meta11851;
    };
    cljs.core.async.t11850.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t11850.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t11850.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t11850.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t11850.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t11850.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t11850.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t11850.cljs$lang$type = true;
    cljs.core.async.t11850.cljs$lang$ctorStr = "cljs.core.async/t11850";
    cljs.core.async.t11850.cljs$lang$ctorPrWriter = function(this__4794__auto__, writer__4795__auto__, opt__4796__auto__) {
      return cljs.core._write.call(null, writer__4795__auto__, "cljs.core.async/t11850");
    };
    cljs.core.async.__GT_t11850 = function cljs$core$async$filter_GT__$___GT_t11850(filter_GT___$1, p__$1, ch__$1, meta11851) {
      return new cljs.core.async.t11850(filter_GT___$1, p__$1, ch__$1, meta11851);
    };
  }
  return new cljs.core.async.t11850(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_() {
  var G__11854 = arguments.length;
  switch(G__11854) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7524__auto___11897 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___11897, out) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___11897, out) {
          return function(state_11875) {
            var state_val_11876 = state_11875[1];
            if (state_val_11876 === 7) {
              var inst_11871 = state_11875[2];
              var state_11875__$1 = state_11875;
              var statearr_11877_11898 = state_11875__$1;
              statearr_11877_11898[2] = inst_11871;
              statearr_11877_11898[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11876 === 1) {
                var state_11875__$1 = state_11875;
                var statearr_11878_11899 = state_11875__$1;
                statearr_11878_11899[2] = null;
                statearr_11878_11899[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11876 === 4) {
                  var inst_11857 = state_11875[7];
                  var inst_11857__$1 = state_11875[2];
                  var inst_11858 = inst_11857__$1 == null;
                  var state_11875__$1 = function() {
                    var statearr_11879 = state_11875;
                    statearr_11879[7] = inst_11857__$1;
                    return statearr_11879;
                  }();
                  if (cljs.core.truth_(inst_11858)) {
                    var statearr_11880_11900 = state_11875__$1;
                    statearr_11880_11900[1] = 5;
                  } else {
                    var statearr_11881_11901 = state_11875__$1;
                    statearr_11881_11901[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11876 === 6) {
                    var inst_11857 = state_11875[7];
                    var inst_11862 = p.call(null, inst_11857);
                    var state_11875__$1 = state_11875;
                    if (cljs.core.truth_(inst_11862)) {
                      var statearr_11882_11902 = state_11875__$1;
                      statearr_11882_11902[1] = 8;
                    } else {
                      var statearr_11883_11903 = state_11875__$1;
                      statearr_11883_11903[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11876 === 3) {
                      var inst_11873 = state_11875[2];
                      var state_11875__$1 = state_11875;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11875__$1, inst_11873);
                    } else {
                      if (state_val_11876 === 2) {
                        var state_11875__$1 = state_11875;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11875__$1, 4, ch);
                      } else {
                        if (state_val_11876 === 11) {
                          var inst_11865 = state_11875[2];
                          var state_11875__$1 = state_11875;
                          var statearr_11884_11904 = state_11875__$1;
                          statearr_11884_11904[2] = inst_11865;
                          statearr_11884_11904[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11876 === 9) {
                            var state_11875__$1 = state_11875;
                            var statearr_11885_11905 = state_11875__$1;
                            statearr_11885_11905[2] = null;
                            statearr_11885_11905[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11876 === 5) {
                              var inst_11860 = cljs.core.async.close_BANG_.call(null, out);
                              var state_11875__$1 = state_11875;
                              var statearr_11886_11906 = state_11875__$1;
                              statearr_11886_11906[2] = inst_11860;
                              statearr_11886_11906[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11876 === 10) {
                                var inst_11868 = state_11875[2];
                                var state_11875__$1 = function() {
                                  var statearr_11887 = state_11875;
                                  statearr_11887[8] = inst_11868;
                                  return statearr_11887;
                                }();
                                var statearr_11888_11907 = state_11875__$1;
                                statearr_11888_11907[2] = null;
                                statearr_11888_11907[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11876 === 8) {
                                  var inst_11857 = state_11875[7];
                                  var state_11875__$1 = state_11875;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11875__$1, 11, out, inst_11857);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___11897, out);
        return function(switch__7462__auto__, c__7524__auto___11897, out) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_11892 = [null, null, null, null, null, null, null, null, null];
              statearr_11892[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_11892[1] = 1;
              return statearr_11892;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_11875) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_11875);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e11893) {
                    if (e11893 instanceof Object) {
                      var ex__7466__auto__ = e11893;
                      var statearr_11894_11908 = state_11875;
                      statearr_11894_11908[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11875);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11893;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11909 = state_11875;
                  state_11875 = G__11909;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_11875) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_11875);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___11897, out);
      }();
      var state__7526__auto__ = function() {
        var statearr_11895 = f__7525__auto__.call(null);
        statearr_11895[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___11897;
        return statearr_11895;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___11897, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_() {
  var G__11911 = arguments.length;
  switch(G__11911) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__7524__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto__) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto__) {
          return function(state_12078) {
            var state_val_12079 = state_12078[1];
            if (state_val_12079 === 7) {
              var inst_12074 = state_12078[2];
              var state_12078__$1 = state_12078;
              var statearr_12080_12121 = state_12078__$1;
              statearr_12080_12121[2] = inst_12074;
              statearr_12080_12121[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12079 === 20) {
                var inst_12044 = state_12078[7];
                var inst_12055 = state_12078[2];
                var inst_12056 = cljs.core.next.call(null, inst_12044);
                var inst_12030 = inst_12056;
                var inst_12031 = null;
                var inst_12032 = 0;
                var inst_12033 = 0;
                var state_12078__$1 = function() {
                  var statearr_12081 = state_12078;
                  statearr_12081[8] = inst_12033;
                  statearr_12081[9] = inst_12031;
                  statearr_12081[10] = inst_12032;
                  statearr_12081[11] = inst_12030;
                  statearr_12081[12] = inst_12055;
                  return statearr_12081;
                }();
                var statearr_12082_12122 = state_12078__$1;
                statearr_12082_12122[2] = null;
                statearr_12082_12122[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12079 === 1) {
                  var state_12078__$1 = state_12078;
                  var statearr_12083_12123 = state_12078__$1;
                  statearr_12083_12123[2] = null;
                  statearr_12083_12123[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12079 === 4) {
                    var inst_12019 = state_12078[13];
                    var inst_12019__$1 = state_12078[2];
                    var inst_12020 = inst_12019__$1 == null;
                    var state_12078__$1 = function() {
                      var statearr_12084 = state_12078;
                      statearr_12084[13] = inst_12019__$1;
                      return statearr_12084;
                    }();
                    if (cljs.core.truth_(inst_12020)) {
                      var statearr_12085_12124 = state_12078__$1;
                      statearr_12085_12124[1] = 5;
                    } else {
                      var statearr_12086_12125 = state_12078__$1;
                      statearr_12086_12125[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12079 === 15) {
                      var state_12078__$1 = state_12078;
                      var statearr_12090_12126 = state_12078__$1;
                      statearr_12090_12126[2] = null;
                      statearr_12090_12126[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12079 === 21) {
                        var state_12078__$1 = state_12078;
                        var statearr_12091_12127 = state_12078__$1;
                        statearr_12091_12127[2] = null;
                        statearr_12091_12127[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12079 === 13) {
                          var inst_12033 = state_12078[8];
                          var inst_12031 = state_12078[9];
                          var inst_12032 = state_12078[10];
                          var inst_12030 = state_12078[11];
                          var inst_12040 = state_12078[2];
                          var inst_12041 = inst_12033 + 1;
                          var tmp12087 = inst_12031;
                          var tmp12088 = inst_12032;
                          var tmp12089 = inst_12030;
                          var inst_12030__$1 = tmp12089;
                          var inst_12031__$1 = tmp12087;
                          var inst_12032__$1 = tmp12088;
                          var inst_12033__$1 = inst_12041;
                          var state_12078__$1 = function() {
                            var statearr_12092 = state_12078;
                            statearr_12092[8] = inst_12033__$1;
                            statearr_12092[9] = inst_12031__$1;
                            statearr_12092[10] = inst_12032__$1;
                            statearr_12092[11] = inst_12030__$1;
                            statearr_12092[14] = inst_12040;
                            return statearr_12092;
                          }();
                          var statearr_12093_12128 = state_12078__$1;
                          statearr_12093_12128[2] = null;
                          statearr_12093_12128[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12079 === 22) {
                            var state_12078__$1 = state_12078;
                            var statearr_12094_12129 = state_12078__$1;
                            statearr_12094_12129[2] = null;
                            statearr_12094_12129[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12079 === 6) {
                              var inst_12019 = state_12078[13];
                              var inst_12028 = f.call(null, inst_12019);
                              var inst_12029 = cljs.core.seq.call(null, inst_12028);
                              var inst_12030 = inst_12029;
                              var inst_12031 = null;
                              var inst_12032 = 0;
                              var inst_12033 = 0;
                              var state_12078__$1 = function() {
                                var statearr_12095 = state_12078;
                                statearr_12095[8] = inst_12033;
                                statearr_12095[9] = inst_12031;
                                statearr_12095[10] = inst_12032;
                                statearr_12095[11] = inst_12030;
                                return statearr_12095;
                              }();
                              var statearr_12096_12130 = state_12078__$1;
                              statearr_12096_12130[2] = null;
                              statearr_12096_12130[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12079 === 17) {
                                var inst_12044 = state_12078[7];
                                var inst_12048 = cljs.core.chunk_first.call(null, inst_12044);
                                var inst_12049 = cljs.core.chunk_rest.call(null, inst_12044);
                                var inst_12050 = cljs.core.count.call(null, inst_12048);
                                var inst_12030 = inst_12049;
                                var inst_12031 = inst_12048;
                                var inst_12032 = inst_12050;
                                var inst_12033 = 0;
                                var state_12078__$1 = function() {
                                  var statearr_12097 = state_12078;
                                  statearr_12097[8] = inst_12033;
                                  statearr_12097[9] = inst_12031;
                                  statearr_12097[10] = inst_12032;
                                  statearr_12097[11] = inst_12030;
                                  return statearr_12097;
                                }();
                                var statearr_12098_12131 = state_12078__$1;
                                statearr_12098_12131[2] = null;
                                statearr_12098_12131[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12079 === 3) {
                                  var inst_12076 = state_12078[2];
                                  var state_12078__$1 = state_12078;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12078__$1, inst_12076);
                                } else {
                                  if (state_val_12079 === 12) {
                                    var inst_12064 = state_12078[2];
                                    var state_12078__$1 = state_12078;
                                    var statearr_12099_12132 = state_12078__$1;
                                    statearr_12099_12132[2] = inst_12064;
                                    statearr_12099_12132[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12079 === 2) {
                                      var state_12078__$1 = state_12078;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12078__$1, 4, in$);
                                    } else {
                                      if (state_val_12079 === 23) {
                                        var inst_12072 = state_12078[2];
                                        var state_12078__$1 = state_12078;
                                        var statearr_12100_12133 = state_12078__$1;
                                        statearr_12100_12133[2] = inst_12072;
                                        statearr_12100_12133[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12079 === 19) {
                                          var inst_12059 = state_12078[2];
                                          var state_12078__$1 = state_12078;
                                          var statearr_12101_12134 = state_12078__$1;
                                          statearr_12101_12134[2] = inst_12059;
                                          statearr_12101_12134[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12079 === 11) {
                                            var inst_12044 = state_12078[7];
                                            var inst_12030 = state_12078[11];
                                            var inst_12044__$1 = cljs.core.seq.call(null, inst_12030);
                                            var state_12078__$1 = function() {
                                              var statearr_12102 = state_12078;
                                              statearr_12102[7] = inst_12044__$1;
                                              return statearr_12102;
                                            }();
                                            if (inst_12044__$1) {
                                              var statearr_12103_12135 = state_12078__$1;
                                              statearr_12103_12135[1] = 14;
                                            } else {
                                              var statearr_12104_12136 = state_12078__$1;
                                              statearr_12104_12136[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12079 === 9) {
                                              var inst_12066 = state_12078[2];
                                              var inst_12067 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_12078__$1 = function() {
                                                var statearr_12105 = state_12078;
                                                statearr_12105[15] = inst_12066;
                                                return statearr_12105;
                                              }();
                                              if (cljs.core.truth_(inst_12067)) {
                                                var statearr_12106_12137 = state_12078__$1;
                                                statearr_12106_12137[1] = 21;
                                              } else {
                                                var statearr_12107_12138 = state_12078__$1;
                                                statearr_12107_12138[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12079 === 5) {
                                                var inst_12022 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_12078__$1 = state_12078;
                                                var statearr_12108_12139 = state_12078__$1;
                                                statearr_12108_12139[2] = inst_12022;
                                                statearr_12108_12139[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12079 === 14) {
                                                  var inst_12044 = state_12078[7];
                                                  var inst_12046 = cljs.core.chunked_seq_QMARK_.call(null, inst_12044);
                                                  var state_12078__$1 = state_12078;
                                                  if (inst_12046) {
                                                    var statearr_12109_12140 = state_12078__$1;
                                                    statearr_12109_12140[1] = 17;
                                                  } else {
                                                    var statearr_12110_12141 = state_12078__$1;
                                                    statearr_12110_12141[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12079 === 16) {
                                                    var inst_12062 = state_12078[2];
                                                    var state_12078__$1 = state_12078;
                                                    var statearr_12111_12142 = state_12078__$1;
                                                    statearr_12111_12142[2] = inst_12062;
                                                    statearr_12111_12142[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12079 === 10) {
                                                      var inst_12033 = state_12078[8];
                                                      var inst_12031 = state_12078[9];
                                                      var inst_12038 = cljs.core._nth.call(null, inst_12031, inst_12033);
                                                      var state_12078__$1 = state_12078;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12078__$1, 13, out, inst_12038);
                                                    } else {
                                                      if (state_val_12079 === 18) {
                                                        var inst_12044 = state_12078[7];
                                                        var inst_12053 = cljs.core.first.call(null, inst_12044);
                                                        var state_12078__$1 = state_12078;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12078__$1, 20, out, inst_12053);
                                                      } else {
                                                        if (state_val_12079 === 8) {
                                                          var inst_12033 = state_12078[8];
                                                          var inst_12032 = state_12078[10];
                                                          var inst_12035 = inst_12033 < inst_12032;
                                                          var inst_12036 = inst_12035;
                                                          var state_12078__$1 = state_12078;
                                                          if (cljs.core.truth_(inst_12036)) {
                                                            var statearr_12112_12143 = state_12078__$1;
                                                            statearr_12112_12143[1] = 10;
                                                          } else {
                                                            var statearr_12113_12144 = state_12078__$1;
                                                            statearr_12113_12144[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto__);
        return function(switch__7462__auto__, c__7524__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__7463__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__7463__auto____0 = function() {
              var statearr_12117 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12117[0] = cljs$core$async$mapcat_STAR__$_state_machine__7463__auto__;
              statearr_12117[1] = 1;
              return statearr_12117;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__7463__auto____1 = function(state_12078) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_12078);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e12118) {
                    if (e12118 instanceof Object) {
                      var ex__7466__auto__ = e12118;
                      var statearr_12119_12145 = state_12078;
                      statearr_12119_12145[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12078);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12118;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12146 = state_12078;
                  state_12078 = G__12146;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7463__auto__ = function(state_12078) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7463__auto____1.call(this, state_12078);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__7463__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__7463__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto__);
      }();
      var state__7526__auto__ = function() {
        var statearr_12120 = f__7525__auto__.call(null);
        statearr_12120[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto__;
        return statearr_12120;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto__));
  return c__7524__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_() {
  var G__12148 = arguments.length;
  switch(G__12148) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_() {
  var G__12151 = arguments.length;
  switch(G__12151) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique() {
  var G__12154 = arguments.length;
  switch(G__12154) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7524__auto___12204 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___12204, out) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___12204, out) {
          return function(state_12178) {
            var state_val_12179 = state_12178[1];
            if (state_val_12179 === 7) {
              var inst_12173 = state_12178[2];
              var state_12178__$1 = state_12178;
              var statearr_12180_12205 = state_12178__$1;
              statearr_12180_12205[2] = inst_12173;
              statearr_12180_12205[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12179 === 1) {
                var inst_12155 = null;
                var state_12178__$1 = function() {
                  var statearr_12181 = state_12178;
                  statearr_12181[7] = inst_12155;
                  return statearr_12181;
                }();
                var statearr_12182_12206 = state_12178__$1;
                statearr_12182_12206[2] = null;
                statearr_12182_12206[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12179 === 4) {
                  var inst_12158 = state_12178[8];
                  var inst_12158__$1 = state_12178[2];
                  var inst_12159 = inst_12158__$1 == null;
                  var inst_12160 = cljs.core.not.call(null, inst_12159);
                  var state_12178__$1 = function() {
                    var statearr_12183 = state_12178;
                    statearr_12183[8] = inst_12158__$1;
                    return statearr_12183;
                  }();
                  if (inst_12160) {
                    var statearr_12184_12207 = state_12178__$1;
                    statearr_12184_12207[1] = 5;
                  } else {
                    var statearr_12185_12208 = state_12178__$1;
                    statearr_12185_12208[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12179 === 6) {
                    var state_12178__$1 = state_12178;
                    var statearr_12186_12209 = state_12178__$1;
                    statearr_12186_12209[2] = null;
                    statearr_12186_12209[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12179 === 3) {
                      var inst_12175 = state_12178[2];
                      var inst_12176 = cljs.core.async.close_BANG_.call(null, out);
                      var state_12178__$1 = function() {
                        var statearr_12187 = state_12178;
                        statearr_12187[9] = inst_12175;
                        return statearr_12187;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12178__$1, inst_12176);
                    } else {
                      if (state_val_12179 === 2) {
                        var state_12178__$1 = state_12178;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12178__$1, 4, ch);
                      } else {
                        if (state_val_12179 === 11) {
                          var inst_12158 = state_12178[8];
                          var inst_12167 = state_12178[2];
                          var inst_12155 = inst_12158;
                          var state_12178__$1 = function() {
                            var statearr_12188 = state_12178;
                            statearr_12188[7] = inst_12155;
                            statearr_12188[10] = inst_12167;
                            return statearr_12188;
                          }();
                          var statearr_12189_12210 = state_12178__$1;
                          statearr_12189_12210[2] = null;
                          statearr_12189_12210[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12179 === 9) {
                            var inst_12158 = state_12178[8];
                            var state_12178__$1 = state_12178;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12178__$1, 11, out, inst_12158);
                          } else {
                            if (state_val_12179 === 5) {
                              var inst_12155 = state_12178[7];
                              var inst_12158 = state_12178[8];
                              var inst_12162 = cljs.core._EQ_.call(null, inst_12158, inst_12155);
                              var state_12178__$1 = state_12178;
                              if (inst_12162) {
                                var statearr_12191_12211 = state_12178__$1;
                                statearr_12191_12211[1] = 8;
                              } else {
                                var statearr_12192_12212 = state_12178__$1;
                                statearr_12192_12212[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12179 === 10) {
                                var inst_12170 = state_12178[2];
                                var state_12178__$1 = state_12178;
                                var statearr_12193_12213 = state_12178__$1;
                                statearr_12193_12213[2] = inst_12170;
                                statearr_12193_12213[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12179 === 8) {
                                  var inst_12155 = state_12178[7];
                                  var tmp12190 = inst_12155;
                                  var inst_12155__$1 = tmp12190;
                                  var state_12178__$1 = function() {
                                    var statearr_12194 = state_12178;
                                    statearr_12194[7] = inst_12155__$1;
                                    return statearr_12194;
                                  }();
                                  var statearr_12195_12214 = state_12178__$1;
                                  statearr_12195_12214[2] = null;
                                  statearr_12195_12214[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___12204, out);
        return function(switch__7462__auto__, c__7524__auto___12204, out) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_12199 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_12199[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_12199[1] = 1;
              return statearr_12199;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_12178) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_12178);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e12200) {
                    if (e12200 instanceof Object) {
                      var ex__7466__auto__ = e12200;
                      var statearr_12201_12215 = state_12178;
                      statearr_12201_12215[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12178);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12200;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12216 = state_12178;
                  state_12178 = G__12216;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_12178) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_12178);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___12204, out);
      }();
      var state__7526__auto__ = function() {
        var statearr_12202 = f__7525__auto__.call(null);
        statearr_12202[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___12204;
        return statearr_12202;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___12204, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition() {
  var G__12218 = arguments.length;
  switch(G__12218) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7524__auto___12287 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___12287, out) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___12287, out) {
          return function(state_12256) {
            var state_val_12257 = state_12256[1];
            if (state_val_12257 === 7) {
              var inst_12252 = state_12256[2];
              var state_12256__$1 = state_12256;
              var statearr_12258_12288 = state_12256__$1;
              statearr_12258_12288[2] = inst_12252;
              statearr_12258_12288[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12257 === 1) {
                var inst_12219 = new Array(n);
                var inst_12220 = inst_12219;
                var inst_12221 = 0;
                var state_12256__$1 = function() {
                  var statearr_12259 = state_12256;
                  statearr_12259[7] = inst_12220;
                  statearr_12259[8] = inst_12221;
                  return statearr_12259;
                }();
                var statearr_12260_12289 = state_12256__$1;
                statearr_12260_12289[2] = null;
                statearr_12260_12289[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12257 === 4) {
                  var inst_12224 = state_12256[9];
                  var inst_12224__$1 = state_12256[2];
                  var inst_12225 = inst_12224__$1 == null;
                  var inst_12226 = cljs.core.not.call(null, inst_12225);
                  var state_12256__$1 = function() {
                    var statearr_12261 = state_12256;
                    statearr_12261[9] = inst_12224__$1;
                    return statearr_12261;
                  }();
                  if (inst_12226) {
                    var statearr_12262_12290 = state_12256__$1;
                    statearr_12262_12290[1] = 5;
                  } else {
                    var statearr_12263_12291 = state_12256__$1;
                    statearr_12263_12291[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12257 === 15) {
                    var inst_12246 = state_12256[2];
                    var state_12256__$1 = state_12256;
                    var statearr_12264_12292 = state_12256__$1;
                    statearr_12264_12292[2] = inst_12246;
                    statearr_12264_12292[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12257 === 13) {
                      var state_12256__$1 = state_12256;
                      var statearr_12265_12293 = state_12256__$1;
                      statearr_12265_12293[2] = null;
                      statearr_12265_12293[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12257 === 6) {
                        var inst_12221 = state_12256[8];
                        var inst_12242 = inst_12221 > 0;
                        var state_12256__$1 = state_12256;
                        if (cljs.core.truth_(inst_12242)) {
                          var statearr_12266_12294 = state_12256__$1;
                          statearr_12266_12294[1] = 12;
                        } else {
                          var statearr_12267_12295 = state_12256__$1;
                          statearr_12267_12295[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12257 === 3) {
                          var inst_12254 = state_12256[2];
                          var state_12256__$1 = state_12256;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12256__$1, inst_12254);
                        } else {
                          if (state_val_12257 === 12) {
                            var inst_12220 = state_12256[7];
                            var inst_12244 = cljs.core.vec.call(null, inst_12220);
                            var state_12256__$1 = state_12256;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12256__$1, 15, out, inst_12244);
                          } else {
                            if (state_val_12257 === 2) {
                              var state_12256__$1 = state_12256;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12256__$1, 4, ch);
                            } else {
                              if (state_val_12257 === 11) {
                                var inst_12236 = state_12256[2];
                                var inst_12237 = new Array(n);
                                var inst_12220 = inst_12237;
                                var inst_12221 = 0;
                                var state_12256__$1 = function() {
                                  var statearr_12268 = state_12256;
                                  statearr_12268[10] = inst_12236;
                                  statearr_12268[7] = inst_12220;
                                  statearr_12268[8] = inst_12221;
                                  return statearr_12268;
                                }();
                                var statearr_12269_12296 = state_12256__$1;
                                statearr_12269_12296[2] = null;
                                statearr_12269_12296[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12257 === 9) {
                                  var inst_12220 = state_12256[7];
                                  var inst_12234 = cljs.core.vec.call(null, inst_12220);
                                  var state_12256__$1 = state_12256;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12256__$1, 11, out, inst_12234);
                                } else {
                                  if (state_val_12257 === 5) {
                                    var inst_12220 = state_12256[7];
                                    var inst_12221 = state_12256[8];
                                    var inst_12224 = state_12256[9];
                                    var inst_12229 = state_12256[11];
                                    var inst_12228 = inst_12220[inst_12221] = inst_12224;
                                    var inst_12229__$1 = inst_12221 + 1;
                                    var inst_12230 = inst_12229__$1 < n;
                                    var state_12256__$1 = function() {
                                      var statearr_12270 = state_12256;
                                      statearr_12270[12] = inst_12228;
                                      statearr_12270[11] = inst_12229__$1;
                                      return statearr_12270;
                                    }();
                                    if (cljs.core.truth_(inst_12230)) {
                                      var statearr_12271_12297 = state_12256__$1;
                                      statearr_12271_12297[1] = 8;
                                    } else {
                                      var statearr_12272_12298 = state_12256__$1;
                                      statearr_12272_12298[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12257 === 14) {
                                      var inst_12249 = state_12256[2];
                                      var inst_12250 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_12256__$1 = function() {
                                        var statearr_12274 = state_12256;
                                        statearr_12274[13] = inst_12249;
                                        return statearr_12274;
                                      }();
                                      var statearr_12275_12299 = state_12256__$1;
                                      statearr_12275_12299[2] = inst_12250;
                                      statearr_12275_12299[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12257 === 10) {
                                        var inst_12240 = state_12256[2];
                                        var state_12256__$1 = state_12256;
                                        var statearr_12276_12300 = state_12256__$1;
                                        statearr_12276_12300[2] = inst_12240;
                                        statearr_12276_12300[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12257 === 8) {
                                          var inst_12220 = state_12256[7];
                                          var inst_12229 = state_12256[11];
                                          var tmp12273 = inst_12220;
                                          var inst_12220__$1 = tmp12273;
                                          var inst_12221 = inst_12229;
                                          var state_12256__$1 = function() {
                                            var statearr_12277 = state_12256;
                                            statearr_12277[7] = inst_12220__$1;
                                            statearr_12277[8] = inst_12221;
                                            return statearr_12277;
                                          }();
                                          var statearr_12278_12301 = state_12256__$1;
                                          statearr_12278_12301[2] = null;
                                          statearr_12278_12301[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___12287, out);
        return function(switch__7462__auto__, c__7524__auto___12287, out) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_12282 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12282[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_12282[1] = 1;
              return statearr_12282;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_12256) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_12256);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e12283) {
                    if (e12283 instanceof Object) {
                      var ex__7466__auto__ = e12283;
                      var statearr_12284_12302 = state_12256;
                      statearr_12284_12302[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12256);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12283;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12303 = state_12256;
                  state_12256 = G__12303;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_12256) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_12256);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___12287, out);
      }();
      var state__7526__auto__ = function() {
        var statearr_12285 = f__7525__auto__.call(null);
        statearr_12285[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___12287;
        return statearr_12285;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___12287, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by() {
  var G__12305 = arguments.length;
  switch(G__12305) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7524__auto___12378 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7524__auto___12378, out) {
    return function() {
      var f__7525__auto__ = function() {
        var switch__7462__auto__ = function(c__7524__auto___12378, out) {
          return function(state_12347) {
            var state_val_12348 = state_12347[1];
            if (state_val_12348 === 7) {
              var inst_12343 = state_12347[2];
              var state_12347__$1 = state_12347;
              var statearr_12349_12379 = state_12347__$1;
              statearr_12349_12379[2] = inst_12343;
              statearr_12349_12379[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12348 === 1) {
                var inst_12306 = [];
                var inst_12307 = inst_12306;
                var inst_12308 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_12347__$1 = function() {
                  var statearr_12350 = state_12347;
                  statearr_12350[7] = inst_12307;
                  statearr_12350[8] = inst_12308;
                  return statearr_12350;
                }();
                var statearr_12351_12380 = state_12347__$1;
                statearr_12351_12380[2] = null;
                statearr_12351_12380[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12348 === 4) {
                  var inst_12311 = state_12347[9];
                  var inst_12311__$1 = state_12347[2];
                  var inst_12312 = inst_12311__$1 == null;
                  var inst_12313 = cljs.core.not.call(null, inst_12312);
                  var state_12347__$1 = function() {
                    var statearr_12352 = state_12347;
                    statearr_12352[9] = inst_12311__$1;
                    return statearr_12352;
                  }();
                  if (inst_12313) {
                    var statearr_12353_12381 = state_12347__$1;
                    statearr_12353_12381[1] = 5;
                  } else {
                    var statearr_12354_12382 = state_12347__$1;
                    statearr_12354_12382[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12348 === 15) {
                    var inst_12337 = state_12347[2];
                    var state_12347__$1 = state_12347;
                    var statearr_12355_12383 = state_12347__$1;
                    statearr_12355_12383[2] = inst_12337;
                    statearr_12355_12383[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12348 === 13) {
                      var state_12347__$1 = state_12347;
                      var statearr_12356_12384 = state_12347__$1;
                      statearr_12356_12384[2] = null;
                      statearr_12356_12384[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12348 === 6) {
                        var inst_12307 = state_12347[7];
                        var inst_12332 = inst_12307.length;
                        var inst_12333 = inst_12332 > 0;
                        var state_12347__$1 = state_12347;
                        if (cljs.core.truth_(inst_12333)) {
                          var statearr_12357_12385 = state_12347__$1;
                          statearr_12357_12385[1] = 12;
                        } else {
                          var statearr_12358_12386 = state_12347__$1;
                          statearr_12358_12386[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12348 === 3) {
                          var inst_12345 = state_12347[2];
                          var state_12347__$1 = state_12347;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12347__$1, inst_12345);
                        } else {
                          if (state_val_12348 === 12) {
                            var inst_12307 = state_12347[7];
                            var inst_12335 = cljs.core.vec.call(null, inst_12307);
                            var state_12347__$1 = state_12347;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12347__$1, 15, out, inst_12335);
                          } else {
                            if (state_val_12348 === 2) {
                              var state_12347__$1 = state_12347;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12347__$1, 4, ch);
                            } else {
                              if (state_val_12348 === 11) {
                                var inst_12311 = state_12347[9];
                                var inst_12315 = state_12347[10];
                                var inst_12325 = state_12347[2];
                                var inst_12326 = [];
                                var inst_12327 = inst_12326.push(inst_12311);
                                var inst_12307 = inst_12326;
                                var inst_12308 = inst_12315;
                                var state_12347__$1 = function() {
                                  var statearr_12359 = state_12347;
                                  statearr_12359[7] = inst_12307;
                                  statearr_12359[11] = inst_12325;
                                  statearr_12359[8] = inst_12308;
                                  statearr_12359[12] = inst_12327;
                                  return statearr_12359;
                                }();
                                var statearr_12360_12387 = state_12347__$1;
                                statearr_12360_12387[2] = null;
                                statearr_12360_12387[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12348 === 9) {
                                  var inst_12307 = state_12347[7];
                                  var inst_12323 = cljs.core.vec.call(null, inst_12307);
                                  var state_12347__$1 = state_12347;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12347__$1, 11, out, inst_12323);
                                } else {
                                  if (state_val_12348 === 5) {
                                    var inst_12311 = state_12347[9];
                                    var inst_12308 = state_12347[8];
                                    var inst_12315 = state_12347[10];
                                    var inst_12315__$1 = f.call(null, inst_12311);
                                    var inst_12316 = cljs.core._EQ_.call(null, inst_12315__$1, inst_12308);
                                    var inst_12317 = cljs.core.keyword_identical_QMARK_.call(null, inst_12308, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_12318 = inst_12316 || inst_12317;
                                    var state_12347__$1 = function() {
                                      var statearr_12361 = state_12347;
                                      statearr_12361[10] = inst_12315__$1;
                                      return statearr_12361;
                                    }();
                                    if (cljs.core.truth_(inst_12318)) {
                                      var statearr_12362_12388 = state_12347__$1;
                                      statearr_12362_12388[1] = 8;
                                    } else {
                                      var statearr_12363_12389 = state_12347__$1;
                                      statearr_12363_12389[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12348 === 14) {
                                      var inst_12340 = state_12347[2];
                                      var inst_12341 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_12347__$1 = function() {
                                        var statearr_12365 = state_12347;
                                        statearr_12365[13] = inst_12340;
                                        return statearr_12365;
                                      }();
                                      var statearr_12366_12390 = state_12347__$1;
                                      statearr_12366_12390[2] = inst_12341;
                                      statearr_12366_12390[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12348 === 10) {
                                        var inst_12330 = state_12347[2];
                                        var state_12347__$1 = state_12347;
                                        var statearr_12367_12391 = state_12347__$1;
                                        statearr_12367_12391[2] = inst_12330;
                                        statearr_12367_12391[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12348 === 8) {
                                          var inst_12311 = state_12347[9];
                                          var inst_12307 = state_12347[7];
                                          var inst_12315 = state_12347[10];
                                          var inst_12320 = inst_12307.push(inst_12311);
                                          var tmp12364 = inst_12307;
                                          var inst_12307__$1 = tmp12364;
                                          var inst_12308 = inst_12315;
                                          var state_12347__$1 = function() {
                                            var statearr_12368 = state_12347;
                                            statearr_12368[7] = inst_12307__$1;
                                            statearr_12368[14] = inst_12320;
                                            statearr_12368[8] = inst_12308;
                                            return statearr_12368;
                                          }();
                                          var statearr_12369_12392 = state_12347__$1;
                                          statearr_12369_12392[2] = null;
                                          statearr_12369_12392[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7524__auto___12378, out);
        return function(switch__7462__auto__, c__7524__auto___12378, out) {
          return function() {
            var cljs$core$async$state_machine__7463__auto__ = null;
            var cljs$core$async$state_machine__7463__auto____0 = function() {
              var statearr_12373 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12373[0] = cljs$core$async$state_machine__7463__auto__;
              statearr_12373[1] = 1;
              return statearr_12373;
            };
            var cljs$core$async$state_machine__7463__auto____1 = function(state_12347) {
              while (true) {
                var ret_value__7464__auto__ = function() {
                  try {
                    while (true) {
                      var result__7465__auto__ = switch__7462__auto__.call(null, state_12347);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7465__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7465__auto__;
                      }
                      break;
                    }
                  } catch (e12374) {
                    if (e12374 instanceof Object) {
                      var ex__7466__auto__ = e12374;
                      var statearr_12375_12393 = state_12347;
                      statearr_12375_12393[5] = ex__7466__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12347);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12374;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7464__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12394 = state_12347;
                  state_12347 = G__12394;
                  continue;
                } else {
                  return ret_value__7464__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7463__auto__ = function(state_12347) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7463__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7463__auto____1.call(this, state_12347);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7463__auto____0;
            cljs$core$async$state_machine__7463__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7463__auto____1;
            return cljs$core$async$state_machine__7463__auto__;
          }();
        }(switch__7462__auto__, c__7524__auto___12378, out);
      }();
      var state__7526__auto__ = function() {
        var statearr_12376 = f__7525__auto__.call(null);
        statearr_12376[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7524__auto___12378;
        return statearr_12376;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7526__auto__);
    };
  }(c__7524__auto___12378, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("stock_selector.storage_emulator");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("stock_selector.mock");
stock_selector.storage_emulator.get_devices = function stock_selector$storage_emulator$get_devices(on_get_devices) {
  var c__7749__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7749__auto__) {
    return function() {
      var f__7750__auto__ = function() {
        var switch__7687__auto__ = function(c__7749__auto__) {
          return function(state_12531) {
            var state_val_12532 = state_12531[1];
            if (state_val_12532 === 1) {
              var inst_12525 = cljs.core.async.timeout.call(null, 2250);
              var state_12531__$1 = state_12531;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12531__$1, 2, inst_12525);
            } else {
              if (state_val_12532 === 2) {
                var inst_12527 = state_12531[2];
                var inst_12528 = (new cljs.core.Keyword(null, "devices", "devices", 1929380599)).cljs$core$IFn$_invoke$arity$1(stock_selector.mock.data);
                var inst_12529 = on_get_devices.call(null, inst_12528);
                var state_12531__$1 = function() {
                  var statearr_12533 = state_12531;
                  statearr_12533[7] = inst_12527;
                  return statearr_12533;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12531__$1, inst_12529);
              } else {
                return null;
              }
            }
          };
        }(c__7749__auto__);
        return function(switch__7687__auto__, c__7749__auto__) {
          return function() {
            var stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto__ = null;
            var stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto____0 = function() {
              var statearr_12537 = [null, null, null, null, null, null, null, null];
              statearr_12537[0] = stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto__;
              statearr_12537[1] = 1;
              return statearr_12537;
            };
            var stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto____1 = function(state_12531) {
              while (true) {
                var ret_value__7689__auto__ = function() {
                  try {
                    while (true) {
                      var result__7690__auto__ = switch__7687__auto__.call(null, state_12531);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7690__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7690__auto__;
                      }
                      break;
                    }
                  } catch (e12538) {
                    if (e12538 instanceof Object) {
                      var ex__7691__auto__ = e12538;
                      var statearr_12539_12541 = state_12531;
                      statearr_12539_12541[5] = ex__7691__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12531);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12538;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7689__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12542 = state_12531;
                  state_12531 = G__12542;
                  continue;
                } else {
                  return ret_value__7689__auto__;
                }
                break;
              }
            };
            stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto__ = function(state_12531) {
              switch(arguments.length) {
                case 0:
                  return stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto____0.call(this);
                case 1:
                  return stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto____1.call(this, state_12531);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto__.cljs$core$IFn$_invoke$arity$0 = stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto____0;
            stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto__.cljs$core$IFn$_invoke$arity$1 = stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto____1;
            return stock_selector$storage_emulator$get_devices_$_state_machine__7688__auto__;
          }();
        }(switch__7687__auto__, c__7749__auto__);
      }();
      var state__7751__auto__ = function() {
        var statearr_12540 = f__7750__auto__.call(null);
        statearr_12540[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7749__auto__;
        return statearr_12540;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7751__auto__);
    };
  }(c__7749__auto__));
  return c__7749__auto__;
};
stock_selector.storage_emulator.get_models = function stock_selector$storage_emulator$get_models(on_get_models) {
  var c__7749__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7749__auto__) {
    return function() {
      var f__7750__auto__ = function() {
        var switch__7687__auto__ = function(c__7749__auto__) {
          return function(state_12565) {
            var state_val_12566 = state_12565[1];
            if (state_val_12566 === 1) {
              var inst_12559 = cljs.core.async.timeout.call(null, 6250);
              var state_12565__$1 = state_12565;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12565__$1, 2, inst_12559);
            } else {
              if (state_val_12566 === 2) {
                var inst_12561 = state_12565[2];
                var inst_12562 = (new cljs.core.Keyword(null, "models", "models", -1985455662)).cljs$core$IFn$_invoke$arity$1(stock_selector.mock.data);
                var inst_12563 = on_get_models.call(null, inst_12562);
                var state_12565__$1 = function() {
                  var statearr_12567 = state_12565;
                  statearr_12567[7] = inst_12561;
                  return statearr_12567;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12565__$1, inst_12563);
              } else {
                return null;
              }
            }
          };
        }(c__7749__auto__);
        return function(switch__7687__auto__, c__7749__auto__) {
          return function() {
            var stock_selector$storage_emulator$get_models_$_state_machine__7688__auto__ = null;
            var stock_selector$storage_emulator$get_models_$_state_machine__7688__auto____0 = function() {
              var statearr_12571 = [null, null, null, null, null, null, null, null];
              statearr_12571[0] = stock_selector$storage_emulator$get_models_$_state_machine__7688__auto__;
              statearr_12571[1] = 1;
              return statearr_12571;
            };
            var stock_selector$storage_emulator$get_models_$_state_machine__7688__auto____1 = function(state_12565) {
              while (true) {
                var ret_value__7689__auto__ = function() {
                  try {
                    while (true) {
                      var result__7690__auto__ = switch__7687__auto__.call(null, state_12565);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7690__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7690__auto__;
                      }
                      break;
                    }
                  } catch (e12572) {
                    if (e12572 instanceof Object) {
                      var ex__7691__auto__ = e12572;
                      var statearr_12573_12575 = state_12565;
                      statearr_12573_12575[5] = ex__7691__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12565);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12572;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7689__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12576 = state_12565;
                  state_12565 = G__12576;
                  continue;
                } else {
                  return ret_value__7689__auto__;
                }
                break;
              }
            };
            stock_selector$storage_emulator$get_models_$_state_machine__7688__auto__ = function(state_12565) {
              switch(arguments.length) {
                case 0:
                  return stock_selector$storage_emulator$get_models_$_state_machine__7688__auto____0.call(this);
                case 1:
                  return stock_selector$storage_emulator$get_models_$_state_machine__7688__auto____1.call(this, state_12565);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            stock_selector$storage_emulator$get_models_$_state_machine__7688__auto__.cljs$core$IFn$_invoke$arity$0 = stock_selector$storage_emulator$get_models_$_state_machine__7688__auto____0;
            stock_selector$storage_emulator$get_models_$_state_machine__7688__auto__.cljs$core$IFn$_invoke$arity$1 = stock_selector$storage_emulator$get_models_$_state_machine__7688__auto____1;
            return stock_selector$storage_emulator$get_models_$_state_machine__7688__auto__;
          }();
        }(switch__7687__auto__, c__7749__auto__);
      }();
      var state__7751__auto__ = function() {
        var statearr_12574 = f__7750__auto__.call(null);
        statearr_12574[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7749__auto__;
        return statearr_12574;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7751__auto__);
    };
  }(c__7749__auto__));
  return c__7749__auto__;
};
stock_selector.storage_emulator.find_results = function stock_selector$storage_emulator$find_results(device, model, text) {
  var filter_by_device = cljs.core.truth_(device) ? cljs.core.filter.call(null, function(p1__12577_SHARP_) {
    return cljs.core._EQ_.call(null, device, (new cljs.core.Keyword(null, "device", "device", 1817743352)).cljs$core$IFn$_invoke$arity$1(p1__12577_SHARP_));
  }, (new cljs.core.Keyword(null, "goods", "goods", 702040840)).cljs$core$IFn$_invoke$arity$1(stock_selector.mock.data)) : (new cljs.core.Keyword(null, "goods", "goods", 702040840)).cljs$core$IFn$_invoke$arity$1(stock_selector.mock.data);
  var filter_by_model = cljs.core.truth_(model) ? cljs.core.filter.call(null, function(filter_by_device) {
    return function(p1__12578_SHARP_) {
      return cljs.core._EQ_.call(null, model, (new cljs.core.Keyword(null, "model", "model", 331153215)).cljs$core$IFn$_invoke$arity$1(p1__12578_SHARP_));
    };
  }(filter_by_device), filter_by_device) : filter_by_device;
  var filter_by_text = !cljs.core.empty_QMARK_.call(null, text) ? cljs.core.filter.call(null, function(filter_by_device, filter_by_model) {
    return function(p1__12579_SHARP_) {
      return cljs.core.not_EQ_.call(null, -1, (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(p1__12579_SHARP_).indexOf(text));
    };
  }(filter_by_device, filter_by_model), filter_by_model) : filter_by_model;
  return filter_by_text;
};
stock_selector.storage_emulator.get_results = function stock_selector$storage_emulator$get_results(p__12580, on_get_results) {
  var map__12598 = p__12580;
  var map__12598__$1 = cljs.core.seq_QMARK_.call(null, map__12598) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12598) : map__12598;
  var device = cljs.core.get.call(null, map__12598__$1, new cljs.core.Keyword(null, "device", "device", 1817743352));
  var model = cljs.core.get.call(null, map__12598__$1, new cljs.core.Keyword(null, "model", "model", 331153215));
  var text = cljs.core.get.call(null, map__12598__$1, new cljs.core.Keyword(null, "text", "text", -1790561697));
  var c__7749__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7749__auto__, map__12598, map__12598__$1, device, model, text) {
    return function() {
      var f__7750__auto__ = function() {
        var switch__7687__auto__ = function(c__7749__auto__, map__12598, map__12598__$1, device, model, text) {
          return function(state_12605) {
            var state_val_12606 = state_12605[1];
            if (state_val_12606 === 1) {
              var inst_12599 = cljs.core.async.timeout.call(null, 250);
              var state_12605__$1 = state_12605;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12605__$1, 2, inst_12599);
            } else {
              if (state_val_12606 === 2) {
                var inst_12601 = state_12605[2];
                var inst_12602 = stock_selector.storage_emulator.find_results.call(null, device, model, text);
                var inst_12603 = on_get_results.call(null, inst_12602);
                var state_12605__$1 = function() {
                  var statearr_12607 = state_12605;
                  statearr_12607[7] = inst_12601;
                  return statearr_12607;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12605__$1, inst_12603);
              } else {
                return null;
              }
            }
          };
        }(c__7749__auto__, map__12598, map__12598__$1, device, model, text);
        return function(switch__7687__auto__, c__7749__auto__, map__12598, map__12598__$1, device, model, text) {
          return function() {
            var stock_selector$storage_emulator$get_results_$_state_machine__7688__auto__ = null;
            var stock_selector$storage_emulator$get_results_$_state_machine__7688__auto____0 = function() {
              var statearr_12611 = [null, null, null, null, null, null, null, null];
              statearr_12611[0] = stock_selector$storage_emulator$get_results_$_state_machine__7688__auto__;
              statearr_12611[1] = 1;
              return statearr_12611;
            };
            var stock_selector$storage_emulator$get_results_$_state_machine__7688__auto____1 = function(state_12605) {
              while (true) {
                var ret_value__7689__auto__ = function() {
                  try {
                    while (true) {
                      var result__7690__auto__ = switch__7687__auto__.call(null, state_12605);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7690__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7690__auto__;
                      }
                      break;
                    }
                  } catch (e12612) {
                    if (e12612 instanceof Object) {
                      var ex__7691__auto__ = e12612;
                      var statearr_12613_12615 = state_12605;
                      statearr_12613_12615[5] = ex__7691__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12605);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12612;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7689__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12616 = state_12605;
                  state_12605 = G__12616;
                  continue;
                } else {
                  return ret_value__7689__auto__;
                }
                break;
              }
            };
            stock_selector$storage_emulator$get_results_$_state_machine__7688__auto__ = function(state_12605) {
              switch(arguments.length) {
                case 0:
                  return stock_selector$storage_emulator$get_results_$_state_machine__7688__auto____0.call(this);
                case 1:
                  return stock_selector$storage_emulator$get_results_$_state_machine__7688__auto____1.call(this, state_12605);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            stock_selector$storage_emulator$get_results_$_state_machine__7688__auto__.cljs$core$IFn$_invoke$arity$0 = stock_selector$storage_emulator$get_results_$_state_machine__7688__auto____0;
            stock_selector$storage_emulator$get_results_$_state_machine__7688__auto__.cljs$core$IFn$_invoke$arity$1 = stock_selector$storage_emulator$get_results_$_state_machine__7688__auto____1;
            return stock_selector$storage_emulator$get_results_$_state_machine__7688__auto__;
          }();
        }(switch__7687__auto__, c__7749__auto__, map__12598, map__12598__$1, device, model, text);
      }();
      var state__7751__auto__ = function() {
        var statearr_12614 = f__7750__auto__.call(null);
        statearr_12614[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7749__auto__;
        return statearr_12614;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7751__auto__);
    };
  }(c__7749__auto__, map__12598, map__12598__$1, device, model, text));
  return c__7749__auto__;
};
goog.provide("stock_selector.components.line_editor");
goog.require("cljs.core");
goog.require("reagent.core");
stock_selector.components.line_editor.items = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "stock", "stock", -877288674), 5, new cljs.core.Keyword(null, "name", "name", 1843675177), "iPhone 6/6 Plus Backcov", new cljs.core.Keyword(null, "price", "price", 22129180), "1567.89", new cljs.core.Keyword(null, "text", "text", -1790561697), "02144422345", new cljs.core.Keyword(null, "device", "device", 
1817743352), "iPhone", new cljs.core.Keyword(null, "model", "model", 331153215), "6", new cljs.core.Keyword(null, "company", "company", -340475075), "apple", new cljs.core.Keyword(null, "img", "img", 1442687358), "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg"], null), new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "stock", "stock", -877288674), 1, new cljs.core.Keyword(null, "name", "name", 1843675177), "iPhone 6 Microphone", new cljs.core.Keyword(null, 
"price", "price", 22129180), "400.00", new cljs.core.Keyword(null, "text", "text", -1790561697), "02344422473", new cljs.core.Keyword(null, "device", "device", 1817743352), "iPhone", new cljs.core.Keyword(null, "model", "model", 331153215), "6", new cljs.core.Keyword(null, "company", "company", -340475075), "apple", new cljs.core.Keyword(null, "img", "img", 1442687358), "http://sinomobi.ru/packages/img/thumbnails/1432803481-iphone5_ios7.jpg"], null)], null);
stock_selector.components.line_editor.display_item_info = function stock_selector$components$line_editor$display_item_info(data) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "item-info"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", -1651076051), 
  (new cljs.core.Keyword(null, "img", "img", 1442687358)).cljs$core$IFn$_invoke$arity$1(data), new cljs.core.Keyword(null, "class", "class", -2030961996), "icon"], null)], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "info"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "good-name active-color"], null), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(data)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "class", "class", -2030961996), "good-text"], null), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(data)], null)], null)], null);
};
stock_selector.components.line_editor.display_discount_adder = function stock_selector$components$line_editor$display_discount_adder(data) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "discount-adder"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", 
  -2030961996), "discount-input", new cljs.core.Keyword(null, "type", "type", 1174270348), "text"], null)], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "select", "select", 1147833503), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "select-discount-mode"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "amount"], null), "R"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), "percentage"], null), "%"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "cancel-discount active-color"], null), "Cancel"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "apply-discount-button"], null), "Apply Discount"], null)], null)], null);
};
stock_selector.components.line_editor.display_item_price = function stock_selector$components$line_editor$display_item_price(data) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "item-price"], null), [cljs.core.str("R "), cljs.core.str((new cljs.core.Keyword(null, "price", "price", 22129180)).cljs$core$IFn$_invoke$arity$1(data))].join("")], 
  null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "add-discount active-color"], null), "+ Discount"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.line_editor.display_discount_adder, data], null)], null);
};
stock_selector.components.line_editor.display_item_total = function stock_selector$components$line_editor$display_item_total(data) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "item-price"], null), [cljs.core.str("R "), cljs.core.str((new cljs.core.Keyword(null, "price", "price", 22129180)).cljs$core$IFn$_invoke$arity$1(data))].join("")], 
  null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "discount"], null), "(Discounted)"], null)], null);
};
stock_selector.components.line_editor.display_item = function stock_selector$components$line_editor$display_item(data) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "td", "td", 1479933353), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 
  -2030961996), "quantity plus"], null), "+"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "input-quantity", new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), (new cljs.core.Keyword(null, "stock", "stock", -877288674)).cljs$core$IFn$_invoke$arity$1(data)], 
  null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "quantity minus"], null), "-"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "td", "td", 1479933353), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [stock_selector.components.line_editor.display_item_info, data], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "td.unit-price-row", "td.unit-price-row", -2120565106), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.line_editor.display_item_price, data], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "td.line-total-row", "td.line-total-row", 1311505446), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.line_editor.display_item_total, data], null)], null)], null);
};
stock_selector.components.line_editor.display_add_line_footer = function stock_selector$components$line_editor$display_add_line_footer(state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "td", "td", 1479933353), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "col-span", "col-span", -232603210), "4"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "add-line-footer"], null), "Add line"], null)], null)], null);
};
stock_selector.components.line_editor.display_total_footer = function stock_selector$components$line_editor$display_total_footer(state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "td", "td", 1479933353), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "col-span", "col-span", -232603210), "4"], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "total-footer"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "total-count"], null), "5"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "total-label"], null), "Total"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "total-price"], null), [cljs.core.str("R "), cljs.core.str("9999.00")].join("")], 
  null)], null)], null)], null);
};
stock_selector.components.line_editor.display_line_editor = function stock_selector$components$line_editor$display_line_editor() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "line-editor"], null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 
  -2030961996), "first-line"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "th", "th", -545608566), "Qty"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "th", "th", -545608566), "Items"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "th.unit-price-row", "th.unit-price-row", -952865066), 
  "Unit Price"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "th.line-total-row", "th.line-total-row", 28218550), "Line Total"], null)], null), cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__10260_SHARP_) {
    return stock_selector.components.line_editor.display_item.call(null, p1__10260_SHARP_);
  }, stock_selector.components.line_editor.items)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.line_editor.display_add_line_footer, null], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.line_editor.display_total_footer, null], null)], null);
};
goog.provide("stock_selector.core");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("stock_selector.components.stock_selector");
goog.require("stock_selector.storage_emulator");
goog.require("stock_selector.components.line_editor");
stock_selector.core.foo = function stock_selector$core$foo() {
  return console.log("Hello, World!");
};
stock_selector.core.app = function stock_selector$core$app() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "Lide editor"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.line_editor.display_line_editor], null), new cljs.core.PersistentVector(null, 2, 5, 
  cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "Stock selector"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.components.stock_selector.display_selector, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "show-prices?", "show-prices?", 1738541380), true, new cljs.core.Keyword(null, "show-costs?", "show-costs?", -1330862398), false, new cljs.core.Keyword(null, "show-stock-count?", 
  "show-stock-count?", -1043270389), false, new cljs.core.Keyword(null, "get-devices-fn", "get-devices-fn", -1092795780), stock_selector.storage_emulator.get_devices, new cljs.core.Keyword(null, "get-models-fn", "get-models-fn", 879511516), stock_selector.storage_emulator.get_models, new cljs.core.Keyword(null, "get-results-fn", "get-results-fn", 37342243), stock_selector.storage_emulator.get_results, new cljs.core.Keyword(null, "on-select-item-fn", "on-select-item-fn", 764866031), function(p1__12619_SHARP_) {
    return console.log([cljs.core.str("Item selected in stock-selector: "), cljs.core.str((new cljs.core.Keyword(null, "item", "item", 249373802)).cljs$core$IFn$_invoke$arity$1(p1__12619_SHARP_))].join(""));
  }], null)], null)], null);
};
stock_selector.core.mount_html = function stock_selector$core$mount_html() {
  return reagent.core.render_component.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [stock_selector.core.app], null), document.body);
};
stock_selector.core.start = function stock_selector$core$start() {
  stock_selector.core.foo.call(null);
  return stock_selector.core.mount_html.call(null);
};
stock_selector.core.start.call(null);
